1
00:00:00,560 --> 00:00:02,629

bienvenue russ gang si vous êtes nouveau

2
00:00:02,629 --> 00:00:02,639
bienvenue russ gang si vous êtes nouveau
 

3
00:00:02,639 --> 00:00:04,630
bienvenue russ gang si vous êtes nouveau
ici, je m'appelle bogdan et cette

4
00:00:04,630 --> 00:00:04,640
ici, je m'appelle bogdan et cette
 

5
00:00:04,640 --> 00:00:05,829
ici, je m'appelle bogdan et cette
chaîne concerne

6
00:00:05,829 --> 00:00:05,839
chaîne concerne
 

7
00:00:05,839 --> 00:00:07,990
chaîne concerne
le langage de programmation rust dans la

8
00:00:07,990 --> 00:00:08,000
le langage de programmation rust dans la
 

9
00:00:08,000 --> 00:00:10,070
le langage de programmation rust dans la
dernière vidéo, nous avons parcouru le chapitre 12 du

10
00:00:10,070 --> 00:00:10,080
dernière vidéo, nous avons parcouru le chapitre 12 du
 

11
00:00:10,080 --> 00:00:11,350
dernière vidéo, nous avons parcouru le chapitre 12 du
livre de lutte

12
00:00:11,350 --> 00:00:11,360
livre de lutte
 

13
00:00:11,360 --> 00:00:14,390
livre de lutte
dans lequel nous avons créé un programme cli

14
00:00:14,390 --> 00:00:14,400
dans lequel nous avons créé un programme cli
 

15
00:00:14,400 --> 00:00:16,470
dans lequel nous avons créé un programme cli
dans cette vidéo, nous sommes  passer en revue le chapitre

16
00:00:16,470 --> 00:00:16,480
dans cette vidéo, nous sommes  passer en revue le chapitre
 

17
00:00:16,480 --> 00:00:17,830
dans cette vidéo, nous sommes  passer en revue le chapitre
13 en particulier la

18
00:00:17,830 --> 00:00:17,840
13 en particulier la
 

19
00:00:17,840 --> 00:00:20,310
13 en particulier la
partie 1 du chapitre 13 dans laquelle nous parlerons

20
00:00:20,310 --> 00:00:20,320
partie 1 du chapitre 13 dans laquelle nous parlerons
 

21
00:00:20,320 --> 00:00:21,109
partie 1 du chapitre 13 dans laquelle nous parlerons
des

22
00:00:21,109 --> 00:00:21,119
des
 

23
00:00:21,119 --> 00:00:30,550
des
fermetures, donc avec cela, rouillés

24
00:00:30,550 --> 00:00:30,560
fermetures, donc avec cela, rouillés
 

25
00:00:30,560 --> 00:00:33,270
fermetures, donc avec cela, rouillés
tout d'abord ce que sont les fermetures les fermetures

26
00:00:33,270 --> 00:00:33,280
tout d'abord ce que sont les fermetures les fermetures
 

27
00:00:33,280 --> 00:00:34,470
tout d'abord ce que sont les fermetures les fermetures
sont comme des fonctions

28
00:00:34,470 --> 00:00:34,480
sont comme des fonctions
 

29
00:00:34,480 --> 00:00:36,150
sont comme des fonctions
sauf qu'elles sont anonymes, ce

30
00:00:36,150 --> 00:00:36,160
sauf qu'elles sont anonymes, ce
 

31
00:00:36,160 --> 00:00:37,830
sauf qu'elles sont anonymes, ce
qui signifie qu'elles n'ont pas de noms

32
00:00:37,830 --> 00:00:37,840
qui signifie qu'elles n'ont pas de noms
 

33
00:00:37,840 --> 00:00:40,150
qui signifie qu'elles n'ont pas de noms
qu'elles pourraient  être stockées sous forme de variables et

34
00:00:40,150 --> 00:00:40,160
qu'elles pourraient  être stockées sous forme de variables et
 

35
00:00:40,160 --> 00:00:41,030
qu'elles pourraient  être stockées sous forme de variables et
transmises,

36
00:00:41,030 --> 00:00:41,040
transmises,
 

37
00:00:41,040 --> 00:00:43,270
transmises,
elles pourraient même être transmises en tant que

38
00:00:43,270 --> 00:00:43,280
elles pourraient même être transmises en tant que
 

39
00:00:43,280 --> 00:00:44,150
elles pourraient même être transmises en tant que
paramètres d'entrée

40
00:00:44,150 --> 00:00:44,160
paramètres d'entrée
 

41
00:00:44,160 --> 00:00:46,549
paramètres d'entrée
à une fonction et elles capturent les

42
00:00:46,549 --> 00:00:46,559
à une fonction et elles capturent les
 

43
00:00:46,559 --> 00:00:47,590
à une fonction et elles capturent les
variables

44
00:00:47,590 --> 00:00:47,600
variables
 

45
00:00:47,600 --> 00:00:50,150
variables
à l'intérieur de la portée dans laquelle elles sont

46
00:00:50,150 --> 00:00:50,160
à l'intérieur de la portée dans laquelle elles sont
 

47
00:00:50,160 --> 00:00:50,950
à l'intérieur de la portée dans laquelle elles sont

48
00:00:50,950 --> 00:00:50,960

 

49
00:00:50,960 --> 00:00:53,029

définies afin de mieux comprendre les fermetures,

50
00:00:53,029 --> 00:00:53,039
définies afin de mieux comprendre les fermetures,
 

51
00:00:53,039 --> 00:00:54,389
définies afin de mieux comprendre les fermetures,
nous les utiliserons dans l'

52
00:00:54,389 --> 00:00:54,399
nous les utiliserons dans l'
 

53
00:00:54,399 --> 00:00:56,470
nous les utiliserons dans l'
exemple suivant imaginez-vous '  re la construction d'un back-

54
00:00:56,470 --> 00:00:56,480
exemple suivant imaginez-vous '  re la construction d'un back-
 

55
00:00:56,480 --> 00:00:58,389
exemple suivant imaginez-vous '  re la construction d'un back-
end pour une application de fitness

56
00:00:58,389 --> 00:00:58,399
end pour une application de fitness
 

57
00:00:58,399 --> 00:01:00,950
end pour une application de fitness
et le back-end est construit en rouille l'

58
00:01:00,950 --> 00:01:00,960
et le back-end est construit en rouille l'
 

59
00:01:00,960 --> 00:01:02,790
et le back-end est construit en rouille l'
application de fitness générera des

60
00:01:02,790 --> 00:01:02,800
application de fitness générera des
 

61
00:01:02,800 --> 00:01:04,390
application de fitness générera des
entraînements personnalisés pour un utilisateur en

62
00:01:04,390 --> 00:01:04,400
entraînements personnalisés pour un utilisateur en
 

63
00:01:04,400 --> 00:01:07,109
entraînements personnalisés pour un utilisateur en
fonction de divers facteurs tels que leur âge

64
00:01:07,109 --> 00:01:07,910
fonction de divers facteurs tels que leur âge
 

65
00:01:07,910 --> 00:01:07,920

 

66
00:01:07,920 --> 00:01:11,190

rence et

67
00:01:11,190 --> 00:01:11,200
rence et
 

68
00:01:11,200 --> 00:01:12,149
rence et
niveau d'intensité

69
00:01:12,149 --> 00:01:12,159
niveau d'intensité
 

70
00:01:12,159 --> 00:01:14,310
niveau d'intensité
maintenant l'implémentation de cet algorithme

71
00:01:14,310 --> 00:01:14,320
maintenant l'implémentation de cet algorithme
 

72
00:01:14,320 --> 00:01:15,670
maintenant l'implémentation de cet algorithme
n'a pas tellement d'importance

73
00:01:15,670 --> 00:01:15,680
n'a pas tellement d'importance
 

74
00:01:15,680 --> 00:01:17,270
n'a pas tellement d'importance
ce qui compte c'est qu'une partie de cet

75
00:01:17,270 --> 00:01:17,280
ce qui compte c'est qu'une partie de cet
 

76
00:01:17,280 --> 00:01:19,510
ce qui compte c'est qu'une partie de cet
algorithme exécute un calcul

77
00:01:19,510 --> 00:01:19,520
algorithme exécute un calcul
 

78
00:01:19,520 --> 00:01:21,590
algorithme exécute un calcul
qui est coûteux et prend quelques

79
00:01:21,590 --> 00:01:21,600
qui est coûteux et prend quelques
 

80
00:01:21,600 --> 00:01:23,109
qui est coûteux et prend quelques
secondes pour s'exécuter

81
00:01:23,109 --> 00:01:23,119
secondes pour s'exécuter
 

82
00:01:23,119 --> 00:01:25,510
secondes pour s'exécuter
ici nous avons simulé ce calcul

83
00:01:25,510 --> 00:01:25,520
ici nous avons simulé ce calcul
 

84
00:01:25,520 --> 00:01:26,630
ici nous avons simulé ce calcul
avec une fonction appelée

85
00:01:26,630 --> 00:01:26,640
avec une fonction appelée
 

86
00:01:26,640 --> 00:01:29,749
avec une fonction appelée
simulé cher  calcul qui

87
00:01:29,749 --> 00:01:29,759
simulé cher  calcul qui
 

88
00:01:29,759 --> 00:01:30,310
simulé cher  calcul qui
prend

89
00:01:30,310 --> 00:01:30,320
prend
 

90
00:01:30,320 --> 00:01:32,630
prend
une intensité puis imprime le

91
00:01:32,630 --> 00:01:32,640
une intensité puis imprime le
 

92
00:01:32,640 --> 00:01:34,390
une intensité puis imprime le
calcul lentement

93
00:01:34,390 --> 00:01:34,400
calcul lentement
 

94
00:01:34,400 --> 00:01:36,710
calcul lentement
laisse le thread dormir pendant deux secondes

95
00:01:36,710 --> 00:01:36,720
laisse le thread dormir pendant deux secondes
 

96
00:01:36,720 --> 00:01:38,950
laisse le thread dormir pendant deux secondes
et renvoie l'intensité

97
00:01:38,950 --> 00:01:38,960
et renvoie l'intensité
 

98
00:01:38,960 --> 00:01:41,030
et renvoie l'intensité
maintenant ici dans le maine nous simulons le

99
00:01:41,030 --> 00:01:41,040
maintenant ici dans le maine nous simulons le
 

100
00:01:41,040 --> 00:01:42,230
maintenant ici dans le maine nous simulons le
code qui serait appelé

101
00:01:42,230 --> 00:01:42,240
code qui serait appelé
 

102
00:01:42,240 --> 00:01:44,870
code qui serait appelé
si l'utilisateur voulait un nouvel entraînement que nous

103
00:01:44,870 --> 00:01:44,880
si l'utilisateur voulait un nouvel entraînement que nous
 

104
00:01:44,880 --> 00:01:46,710
si l'utilisateur voulait un nouvel entraînement que nous
appelons générer entraînement  qui est une

105
00:01:46,710 --> 00:01:46,720
appelons générer entraînement  qui est une
 

106
00:01:46,720 --> 00:01:48,630
appelons générer entraînement  qui est une
fonction que nous n'avons pas encore créée

107
00:01:48,630 --> 00:01:48,640
fonction que nous n'avons pas encore créée
 

108
00:01:48,640 --> 00:01:50,310
fonction que nous n'avons pas encore créée
et générer un entraînement prend deux

109
00:01:50,310 --> 00:01:50,320
et générer un entraînement prend deux
 

110
00:01:50,320 --> 00:01:52,710
et générer un entraînement prend deux
paramètres l'intensité qu'un utilisateur a

111
00:01:52,710 --> 00:01:52,720
paramètres l'intensité qu'un utilisateur a
 

112
00:01:52,720 --> 00:01:53,670
paramètres l'intensité qu'un utilisateur a
spécifiée

113
00:01:53,670 --> 00:01:53,680
spécifiée
 

114
00:01:53,680 --> 00:01:55,830
spécifiée
et un nombre aléatoire pour fournir une certaine

115
00:01:55,830 --> 00:01:55,840
et un nombre aléatoire pour fournir une certaine
 

116
00:01:55,840 --> 00:01:58,149
et un nombre aléatoire pour fournir une certaine
variété à l'entraînement généré

117
00:01:58,149 --> 00:01:58,159
variété à l'entraînement généré
 

118
00:01:58,159 --> 00:01:59,990
variété à l'entraînement généré
maintenant parce que nous ne construisons pas réellement

119
00:01:59,990 --> 00:02:00,000
maintenant parce que nous ne construisons pas réellement
 

120
00:02:00,000 --> 00:02:01,830
maintenant parce que nous ne construisons pas réellement
le front-end dans cet exemple

121
00:02:01,830 --> 00:02:01,840
le front-end dans cet exemple
 

122
00:02:01,840 --> 00:02:04,469
le front-end dans cet exemple
nous '  ll passera dans une intensité simulée de

123
00:02:04,469 --> 00:02:04,479
nous '  ll passera dans une intensité simulée de
 

124
00:02:04,479 --> 00:02:05,030
nous '  ll passera dans une intensité simulée de
10

125
00:02:05,030 --> 00:02:05,040
10
 

126
00:02:05,040 --> 00:02:07,109
10
et pour le nombre aléatoire, nous pourrions utiliser

127
00:02:07,109 --> 00:02:07,119
et pour le nombre aléatoire, nous pourrions utiliser
 

128
00:02:07,119 --> 00:02:08,949
et pour le nombre aléatoire, nous pourrions utiliser
la caisse rand et générer réellement un

129
00:02:08,949 --> 00:02:08,959
la caisse rand et générer réellement un
 

130
00:02:08,959 --> 00:02:09,749
la caisse rand et générer réellement un
nombre aléatoire,

131
00:02:09,749 --> 00:02:09,759
nombre aléatoire,
 

132
00:02:09,759 --> 00:02:11,510
nombre aléatoire,
mais encore une fois, ce n'est pas  Dans cet

133
00:02:11,510 --> 00:02:11,520
mais encore une fois, ce n'est pas  Dans cet
 

134
00:02:11,520 --> 00:02:13,589
mais encore une fois, ce n'est pas  Dans cet
exemple, nous allons simplement définir le

135
00:02:13,589 --> 00:02:13,599
exemple, nous allons simplement définir le
 

136
00:02:13,599 --> 00:02:15,350
exemple, nous allons simplement définir le
nombre aléatoire sur un sept codé en dur,

137
00:02:15,350 --> 00:02:15,360
nombre aléatoire sur un sept codé en dur,
 

138
00:02:15,360 --> 00:02:17,670
nombre aléatoire sur un sept codé en dur,
nous définirons ensuite la

139
00:02:17,670 --> 00:02:17,680
nous définirons ensuite la
 

140
00:02:17,680 --> 00:02:18,869
nous définirons ensuite la
fonction d'entraînement générée

141
00:02:18,869 --> 00:02:18,879
fonction d'entraînement générée
 

142
00:02:18,879 --> 00:02:21,990
fonction d'entraînement générée
juste en dessous de la

143
00:02:21,990 --> 00:02:22,000
juste en dessous de la
 

144
00:02:22,000 --> 00:02:23,990
juste en dessous de la
fonction de génération d'entraînement principale qui prend une

145
00:02:23,990 --> 00:02:24,000
fonction de génération d'entraînement principale qui prend une
 

146
00:02:24,000 --> 00:02:25,910
fonction de génération d'entraînement principale qui prend une
intensité et un nombre aléatoire

147
00:02:25,910 --> 00:02:25,920
intensité et un nombre aléatoire
 

148
00:02:25,920 --> 00:02:28,630
intensité et un nombre aléatoire
si l'intensité est inférieure à 25.  nous

149
00:02:28,630 --> 00:02:28,640
si l'intensité est inférieure à 25.  nous
 

150
00:02:28,640 --> 00:02:30,710
si l'intensité est inférieure à 25.  nous
imprimons faire x nombre de pompes

151
00:02:30,710 --> 00:02:30,720
imprimons faire x nombre de pompes
 

152
00:02:30,720 --> 00:02:33,030
imprimons faire x nombre de pompes
et faire x nombre de redressements assis pour déterminer

153
00:02:33,030 --> 00:02:33,040
et faire x nombre de redressements assis pour déterminer
 

154
00:02:33,040 --> 00:02:34,949
et faire x nombre de redressements assis pour déterminer
combien de pompes et de configurations à faire

155
00:02:34,949 --> 00:02:34,959
combien de pompes et de configurations à faire
 

156
00:02:34,959 --> 00:02:37,990
combien de pompes et de configurations à faire
nous appelons notre calcul coûteux si l'

157
00:02:37,990 --> 00:02:38,000
nous appelons notre calcul coûteux si l'
 

158
00:02:38,000 --> 00:02:39,910
nous appelons notre calcul coûteux si l'
intensité est supérieure à 25,

159
00:02:39,910 --> 00:02:39,920
intensité est supérieure à 25,
 

160
00:02:39,920 --> 00:02:42,710
intensité est supérieure à 25,
puis nous entrons dans la clause else ici nous

161
00:02:42,710 --> 00:02:42,720
puis nous entrons dans la clause else ici nous
 

162
00:02:42,720 --> 00:02:43,030
puis nous entrons dans la clause else ici nous
vérifiez

163
00:02:43,030 --> 00:02:43,040
vérifiez
 

164
00:02:43,040 --> 00:02:45,750
vérifiez
notre nombre aléatoire s'il est exactement trois

165
00:02:45,750 --> 00:02:45,760
notre nombre aléatoire s'il est exactement trois
 

166
00:02:45,760 --> 00:02:47,509
notre nombre aléatoire s'il est exactement trois
nous imprimons faites une pause

167
00:02:47,509 --> 00:02:47,519
nous imprimons faites une pause
 

168
00:02:47,519 --> 00:02:49,910
nous imprimons faites une pause
sinon nous exécutons le pronom x nombre de

169
00:02:49,910 --> 00:02:49,920
sinon nous exécutons le pronom x nombre de
 

170
00:02:49,920 --> 00:02:51,670
sinon nous exécutons le pronom x nombre de
minutes et encore pour calculer le

171
00:02:51,670 --> 00:02:51,680
minutes et encore pour calculer le
 

172
00:02:51,680 --> 00:02:53,110
minutes et encore pour calculer le
nombre de minutes à exécuter

173
00:02:53,110 --> 00:02:53,120
nombre de minutes à exécuter
 

174
00:02:53,120 --> 00:02:55,350
nombre de minutes à exécuter
nous utilisons notre fonction de calcul coûteuse

175
00:02:55,350 --> 00:02:55,360
nous utilisons notre fonction de calcul coûteuse
 

176
00:02:55,360 --> 00:02:56,150
nous utilisons notre fonction de calcul coûteuse

177
00:02:56,150 --> 00:02:56,160

 

178
00:02:56,160 --> 00:02:57,910

maintenant cela fonctionne mais cela pourrait

179
00:02:57,910 --> 00:02:57,920
maintenant cela fonctionne mais cela pourrait
 

180
00:02:57,920 --> 00:02:59,750
maintenant cela fonctionne mais cela pourrait
nécessiter une refactorisation un problème est  que nous

181
00:02:59,750 --> 00:02:59,760
nécessiter une refactorisation un problème est  que nous
 

182
00:02:59,760 --> 00:03:01,350
nécessiter une refactorisation un problème est  que nous
appelons notre fonction coûteuse

183
00:03:01,350 --> 00:03:01,360
appelons notre fonction coûteuse
 

184
00:03:01,360 --> 00:03:03,910
appelons notre fonction coûteuse
à plusieurs endroits, donc si nous modifions la

185
00:03:03,910 --> 00:03:03,920
à plusieurs endroits, donc si nous modifions la
 

186
00:03:03,920 --> 00:03:05,350
à plusieurs endroits, donc si nous modifions la
façon dont la fonction est appelée,

187
00:03:05,350 --> 00:03:05,360
façon dont la fonction est appelée,
 

188
00:03:05,360 --> 00:03:07,910
façon dont la fonction est appelée,
par exemple si nous ajoutons un autre paramètre,

189
00:03:07,910 --> 00:03:07,920
par exemple si nous ajoutons un autre paramètre,
 

190
00:03:07,920 --> 00:03:09,110
par exemple si nous ajoutons un autre paramètre,
nous devons modifier

191
00:03:09,110 --> 00:03:09,120
nous devons modifier
 

192
00:03:09,120 --> 00:03:11,589
nous devons modifier
tous les sites d'appel, nous appelons également notre fonction

193
00:03:11,589 --> 00:03:11,599
tous les sites d'appel, nous appelons également notre fonction
 

194
00:03:11,599 --> 00:03:12,710
tous les sites d'appel, nous appelons également notre fonction
coûteuse

195
00:03:12,710 --> 00:03:12,720
coûteuse
 

196
00:03:12,720 --> 00:03:15,589
coûteuse
plusieurs fois inutilement, par exemple

197
00:03:15,589 --> 00:03:15,599
plusieurs fois inutilement, par exemple
 

198
00:03:15,599 --> 00:03:16,710
plusieurs fois inutilement, par exemple
dans ce bloc if,

199
00:03:16,710 --> 00:03:16,720
dans ce bloc if,
 

200
00:03:16,720 --> 00:03:18,790
dans ce bloc if,
nous appelons notre fonction coûteuse deux fois

201
00:03:18,790 --> 00:03:18,800
nous appelons notre fonction coûteuse deux fois
 

202
00:03:18,800 --> 00:03:21,030
nous appelons notre fonction coûteuse deux fois
alors que nous n'avons vraiment besoin de l'appeler qu'une seule fois

203
00:03:21,030 --> 00:03:21,040
alors que nous n'avons vraiment besoin de l'appeler qu'une seule fois
 

204
00:03:21,040 --> 00:03:23,190
alors que nous n'avons vraiment besoin de l'appeler qu'une seule fois
, puis de transmettre la valeur de retour à

205
00:03:23,190 --> 00:03:23,200
, puis de transmettre la valeur de retour à
 

206
00:03:23,200 --> 00:03:24,789
, puis de transmettre la valeur de retour à
ces deux instructions d'impression.

207
00:03:24,789 --> 00:03:26,630
ces deux instructions d'impression.
 

208
00:03:26,630 --> 00:03:28,470

 

209
00:03:28,470 --> 00:03:28,480

 

210
00:03:28,480 --> 00:03:30,229

fonction qui prend deux

211
00:03:30,229 --> 00:03:30,239
fonction qui prend deux
 

212
00:03:30,239 --> 00:03:32,550
fonction qui prend deux
secondes pour s'exécuter, nous voulons donc limiter autant que possible le

213
00:03:32,550 --> 00:03:32,560
secondes pour s'exécuter, nous voulons donc limiter autant que possible le
 

214
00:03:32,560 --> 00:03:34,470
secondes pour s'exécuter, nous voulons donc limiter autant que possible le
nombre de fois où nous appelons cette fonction

215
00:03:34,470 --> 00:03:34,480
nombre de fois où nous appelons cette fonction
 

216
00:03:34,480 --> 00:03:37,110
nombre de fois où nous appelons cette fonction
. Résolvons ces deux

217
00:03:37,110 --> 00:03:37,120
. Résolvons ces deux
 

218
00:03:37,120 --> 00:03:37,750
. Résolvons ces deux
problèmes

219
00:03:37,750 --> 00:03:37,760
problèmes
 

220
00:03:37,760 --> 00:03:39,670
problèmes
en stockant le résultat de notre

221
00:03:39,670 --> 00:03:39,680
en stockant le résultat de notre
 

222
00:03:39,680 --> 00:03:41,830
en stockant le résultat de notre
appel de fonction coûteux dans une variable

223
00:03:41,830 --> 00:03:41,840
appel de fonction coûteux dans une variable
 

224
00:03:41,840 --> 00:03:43,270
appel de fonction coûteux dans une variable
afin que nous créions une nouvelle variable à  en

225
00:03:43,270 --> 00:03:43,280
afin que nous créions une nouvelle variable à  en
 

226
00:03:43,280 --> 00:03:44,869
afin que nous créions une nouvelle variable à  en
haut de notre fonction,

227
00:03:44,869 --> 00:03:44,879
haut de notre fonction,
 

228
00:03:44,879 --> 00:03:50,470
haut de notre fonction,
nous l'appellerons résultat coûteux

229
00:03:50,470 --> 00:03:50,480

 

230
00:03:50,480 --> 00:03:52,789

et nous le définirons égal à notre

231
00:03:52,789 --> 00:03:52,799
et nous le définirons égal à notre
 

232
00:03:52,799 --> 00:03:56,710
et nous le définirons égal à notre
appel de fonction coûteux,

233
00:03:56,710 --> 00:03:56,720

 

234
00:03:56,720 --> 00:03:58,550

puis nous utiliserons notre variable dans toutes nos

235
00:03:58,550 --> 00:03:58,560
puis nous utiliserons notre variable dans toutes nos
 

236
00:03:58,560 --> 00:04:07,509
puis nous utiliserons notre variable dans toutes nos
instructions de ligne d'impression

237
00:04:07,509 --> 00:04:07,519

 

238
00:04:07,519 --> 00:04:09,509

maintenant cela prend en charge notre

239
00:04:09,509 --> 00:04:09,519
maintenant cela prend en charge notre
 

240
00:04:09,519 --> 00:04:11,670
maintenant cela prend en charge notre
problème de duplication mais maintenant nous en avons un autre  problème,

241
00:04:11,670 --> 00:04:11,680
problème de duplication mais maintenant nous en avons un autre  problème,
 

242
00:04:11,680 --> 00:04:13,910
problème de duplication mais maintenant nous en avons un autre  problème,
nous appelons notre fonction coûteuse dans

243
00:04:13,910 --> 00:04:13,920
nous appelons notre fonction coûteuse dans
 

244
00:04:13,920 --> 00:04:15,429
nous appelons notre fonction coûteuse dans
chaque cas

245
00:04:15,429 --> 00:04:15,439
chaque cas
 

246
00:04:15,439 --> 00:04:17,509
chaque cas
ici en haut, peu importe ce qui est

247
00:04:17,509 --> 00:04:17,519
ici en haut, peu importe ce qui est
 

248
00:04:17,519 --> 00:04:18,629
ici en haut, peu importe ce qui est
exécuté ci-dessous,

249
00:04:18,629 --> 00:04:18,639
exécuté ci-dessous,
 

250
00:04:18,639 --> 00:04:20,310
exécuté ci-dessous,
nous allons appeler notre

251
00:04:20,310 --> 00:04:20,320
nous allons appeler notre
 

252
00:04:20,320 --> 00:04:22,870
nous allons appeler notre
fonction coûteuse, mais ici vous pouvez voir que si

253
00:04:22,870 --> 00:04:22,880
fonction coûteuse, mais ici vous pouvez voir que si
 

254
00:04:22,880 --> 00:04:24,390
fonction coûteuse, mais ici vous pouvez voir que si
le hasard  le nombre est 3,

255
00:04:24,390 --> 00:04:24,400
le hasard  le nombre est 3,
 

256
00:04:24,400 --> 00:04:26,070
le hasard  le nombre est 3,
nous n'avons pas besoin de notre fonction coûteuse

257
00:04:26,070 --> 00:04:26,080
nous n'avons pas besoin de notre fonction coûteuse
 

258
00:04:26,080 --> 00:04:27,430
nous n'avons pas besoin de notre fonction coûteuse
car nous

259
00:04:27,430 --> 00:04:27,440
car nous
 

260
00:04:27,440 --> 00:04:30,310
car nous
imprimons simplement ce texte ce que nous voulons, c'est

261
00:04:30,310 --> 00:04:30,320
imprimons simplement ce texte ce que nous voulons, c'est
 

262
00:04:30,320 --> 00:04:32,310
imprimons simplement ce texte ce que nous voulons, c'est
définir notre code à un endroit

263
00:04:32,310 --> 00:04:32,320
définir notre code à un endroit
 

264
00:04:32,320 --> 00:04:35,270
définir notre code à un endroit
mais ne l'exécuter que lorsque cela est nécessaire, alors

265
00:04:35,270 --> 00:04:35,280
mais ne l'exécuter que lorsque cela est nécessaire, alors
 

266
00:04:35,280 --> 00:04:37,189
mais ne l'exécuter que lorsque cela est nécessaire, alors
essayons de refactoriser cela en

267
00:04:37,189 --> 00:04:37,199
essayons de refactoriser cela en
 

268
00:04:37,199 --> 00:04:39,749
essayons de refactoriser cela en
utilisant des fermetures, revenons

269
00:04:39,749 --> 00:04:39,759
utilisant des fermetures, revenons
 

270
00:04:39,759 --> 00:04:41,030
utilisant des fermetures, revenons
en haut  de notre programme

271
00:04:41,030 --> 00:04:41,040
en haut  de notre programme
 

272
00:04:41,040 --> 00:04:43,270
en haut  de notre programme
et au lieu de définir cette

273
00:04:43,270 --> 00:04:43,280
et au lieu de définir cette
 

274
00:04:43,280 --> 00:04:44,550
et au lieu de définir cette
variable de résultat coûteuse,

275
00:04:44,550 --> 00:04:44,560
variable de résultat coûteuse,
 

276
00:04:44,560 --> 00:04:48,150
variable de résultat coûteuse,
nous définirons une fermeture

277
00:04:48,150 --> 00:04:48,160

 

278
00:04:48,160 --> 00:04:50,310

ici, nous avons une variable appelée

279
00:04:50,310 --> 00:04:50,320
ici, nous avons une variable appelée
 

280
00:04:50,320 --> 00:04:52,550
ici, nous avons une variable appelée
fermeture coûteuse qui est égale à

281
00:04:52,550 --> 00:04:52,560
fermeture coûteuse qui est égale à
 

282
00:04:52,560 --> 00:04:55,030
fermeture coûteuse qui est égale à
notre fermeture maintenant rappelez-vous que les fermetures sont

283
00:04:55,030 --> 00:04:55,040
notre fermeture maintenant rappelez-vous que les fermetures sont
 

284
00:04:55,040 --> 00:04:56,469
notre fermeture maintenant rappelez-vous que les fermetures sont
des fonctions anonymes

285
00:04:56,469 --> 00:04:56,479
des fonctions anonymes
 

286
00:04:56,479 --> 00:04:58,390
des fonctions anonymes
et la différence entre une fermeture et

287
00:04:58,390 --> 00:04:58,400
et la différence entre une fermeture et
 

288
00:04:58,400 --> 00:05:00,230
et la différence entre une fermeture et
une fonction ou au moins le  la différence visuelle principale

289
00:05:00,230 --> 00:05:00,240
une fonction ou au moins le  la différence visuelle principale
 

290
00:05:00,240 --> 00:05:00,870
une fonction ou au moins le  la différence visuelle principale

291
00:05:00,870 --> 00:05:00,880

 

292
00:05:00,880 --> 00:05:03,029

est qu'au lieu que les paramètres d'entrée soient à l'

293
00:05:03,029 --> 00:05:03,039
est qu'au lieu que les paramètres d'entrée soient à l'
 

294
00:05:03,039 --> 00:05:04,629
est qu'au lieu que les paramètres d'entrée soient à l'
intérieur de parenthèses,

295
00:05:04,629 --> 00:05:04,639
intérieur de parenthèses,
 

296
00:05:04,639 --> 00:05:06,790
intérieur de parenthèses,
ils sont à l'intérieur de ces tuyaux verticaux

297
00:05:06,790 --> 00:05:06,800
ils sont à l'intérieur de ces tuyaux verticaux
 

298
00:05:06,800 --> 00:05:07,749
ils sont à l'intérieur de ces tuyaux verticaux
, nous avons donc ici un

299
00:05:07,749 --> 00:05:07,759
, nous avons donc ici un
 

300
00:05:07,759 --> 00:05:10,230
, nous avons donc ici un
paramètre d'entrée qui est num suivi de

301
00:05:10,230 --> 00:05:10,240
paramètre d'entrée qui est num suivi de
 

302
00:05:10,240 --> 00:05:10,950
paramètre d'entrée qui est num suivi de
crochets

303
00:05:10,950 --> 00:05:10,960
crochets
 

304
00:05:10,960 --> 00:05:13,590
crochets
qui maintiennent le corps de notre fermeture et

305
00:05:13,590 --> 00:05:13,600
qui maintiennent le corps de notre fermeture et
 

306
00:05:13,600 --> 00:05:14,790
qui maintiennent le corps de notre fermeture et
si notre fermeture n'était qu'une

307
00:05:14,790 --> 00:05:14,800
si notre fermeture n'était qu'une
 

308
00:05:14,800 --> 00:05:16,629
si notre fermeture n'était qu'une
seule ligne alors  nous n'avons même pas besoin des

309
00:05:16,629 --> 00:05:16,639
seule ligne alors  nous n'avons même pas besoin des
 

310
00:05:16,639 --> 00:05:19,189
seule ligne alors  nous n'avons même pas besoin des
crochets, donc à l'intérieur de notre corps de fermeture,

311
00:05:19,189 --> 00:05:19,199
crochets, donc à l'intérieur de notre corps de fermeture,
 

312
00:05:19,199 --> 00:05:21,909
crochets, donc à l'intérieur de notre corps de fermeture,
nous exécutons notre calcul coûteux,

313
00:05:21,909 --> 00:05:21,919
nous exécutons notre calcul coûteux,
 

314
00:05:21,919 --> 00:05:22,629
nous exécutons notre calcul coûteux,
puis nous

315
00:05:22,629 --> 00:05:22,639
puis nous
 

316
00:05:22,639 --> 00:05:25,990
puis nous
retournons num enfin à la fin, nous avons besoin de

317
00:05:25,990 --> 00:05:26,000
retournons num enfin à la fin, nous avons besoin de
 

318
00:05:26,000 --> 00:05:28,790
retournons num enfin à la fin, nous avons besoin de
ce semico  lon ici pour terminer l'

319
00:05:28,790 --> 00:05:28,800
ce semico  lon ici pour terminer l'
 

320
00:05:28,800 --> 00:05:29,830
ce semico  lon ici pour terminer l'
instruction let

321
00:05:29,830 --> 00:05:29,840
instruction let
 

322
00:05:29,840 --> 00:05:31,830
instruction let
notez que notre variable de fermeture coûteuse

323
00:05:31,830 --> 00:05:31,840
notez que notre variable de fermeture coûteuse
 

324
00:05:31,840 --> 00:05:34,070
notez que notre variable de fermeture coûteuse
ne stocke pas la valeur de retour de notre

325
00:05:34,070 --> 00:05:34,080
ne stocke pas la valeur de retour de notre
 

326
00:05:34,080 --> 00:05:34,870
ne stocke pas la valeur de retour de notre
fermeture

327
00:05:34,870 --> 00:05:34,880
fermeture
 

328
00:05:34,880 --> 00:05:37,189
fermeture
plutôt qu'elle stocke la fermeture elle-

329
00:05:37,189 --> 00:05:37,199
plutôt qu'elle stocke la fermeture elle-
 

330
00:05:37,199 --> 00:05:39,590
plutôt qu'elle stocke la fermeture elle-
même notez également que le corps de notre fermeture

331
00:05:39,590 --> 00:05:39,600
même notez également que le corps de notre fermeture
 

332
00:05:39,600 --> 00:05:41,990
même notez également que le corps de notre fermeture
est identique au corps de notre

333
00:05:41,990 --> 00:05:42,000
est identique au corps de notre
 

334
00:05:42,000 --> 00:05:43,670
est identique au corps de notre
fonction coûteuse

335
00:05:43,670 --> 00:05:43,680
fonction coûteuse
 

336
00:05:43,680 --> 00:05:46,230
fonction coûteuse
définie ici maintenant  que notre fermeture est définie,

337
00:05:46,230 --> 00:05:46,240
définie ici maintenant  que notre fermeture est définie,
 

338
00:05:46,240 --> 00:05:47,670
définie ici maintenant  que notre fermeture est définie,
nous pouvons l'appeler à l'intérieur de

339
00:05:47,670 --> 00:05:47,680
nous pouvons l'appeler à l'intérieur de
 

340
00:05:47,680 --> 00:05:54,550
nous pouvons l'appeler à l'intérieur de
nos instructions de ligne d'impression,

341
00:05:54,550 --> 00:05:54,560

 

342
00:05:54,560 --> 00:05:56,230

comme vous pouvez le voir, la syntaxe pour appeler

343
00:05:56,230 --> 00:05:56,240
comme vous pouvez le voir, la syntaxe pour appeler
 

344
00:05:56,240 --> 00:05:58,629
comme vous pouvez le voir, la syntaxe pour appeler
notre fermeture est similaire à la syntaxe pour

345
00:05:58,629 --> 00:05:58,639
notre fermeture est similaire à la syntaxe pour
 

346
00:05:58,639 --> 00:06:00,150
notre fermeture est similaire à la syntaxe pour
appeler une fonction,

347
00:06:00,150 --> 00:06:00,160
appeler une fonction,
 

348
00:06:00,160 --> 00:06:02,469
appeler une fonction,
nous spécifions notre nom de variable qui contient

349
00:06:02,469 --> 00:06:02,479
nous spécifions notre nom de variable qui contient
 

350
00:06:02,479 --> 00:06:03,430
nous spécifions notre nom de variable qui contient
notre fermeture

351
00:06:03,430 --> 00:06:03,440
notre fermeture
 

352
00:06:03,440 --> 00:06:06,150
notre fermeture
suivie de parenthèses, puis passe dans

353
00:06:06,150 --> 00:06:06,160
suivie de parenthèses, puis passe dans
 

354
00:06:06,160 --> 00:06:07,590
suivie de parenthèses, puis passe dans
le  paramètres d'entrée

355
00:06:07,590 --> 00:06:07,600
le  paramètres d'entrée
 

356
00:06:07,600 --> 00:06:09,590
le  paramètres d'entrée
maintenant notre logique est définie en un seul endroit

357
00:06:09,590 --> 00:06:09,600
maintenant notre logique est définie en un seul endroit
 

358
00:06:09,600 --> 00:06:11,189
maintenant notre logique est définie en un seul endroit
et nous n'appelons notre opération coûteuse

359
00:06:11,189 --> 00:06:11,199
et nous n'appelons notre opération coûteuse
 

360
00:06:11,199 --> 00:06:12,150
et nous n'appelons notre opération coûteuse

361
00:06:12,150 --> 00:06:12,160

 

362
00:06:12,160 --> 00:06:14,550

qu'en cas de besoin mais nous sommes de retour avec un vieux

363
00:06:14,550 --> 00:06:14,560
qu'en cas de besoin mais nous sommes de retour avec un vieux
 

364
00:06:14,560 --> 00:06:15,749
qu'en cas de besoin mais nous sommes de retour avec un vieux
problème qui est que

365
00:06:15,749 --> 00:06:15,759
problème qui est que
 

366
00:06:15,759 --> 00:06:17,670
problème qui est que
dans ce bloc if nous appelons notre

367
00:06:17,670 --> 00:06:17,680
dans ce bloc if nous appelons notre
 

368
00:06:17,680 --> 00:06:19,110
dans ce bloc if nous appelons notre
opération coûteuse

369
00:06:19,110 --> 00:06:19,120
opération coûteuse
 

370
00:06:19,120 --> 00:06:21,830
opération coûteuse
deux fois ce qui n'est pas bon  maintenant, nous pourrions résoudre

371
00:06:21,830 --> 00:06:21,840
deux fois ce qui n'est pas bon  maintenant, nous pourrions résoudre
 

372
00:06:21,840 --> 00:06:23,590
deux fois ce qui n'est pas bon  maintenant, nous pourrions résoudre
ce problème en stockant le résultat de

373
00:06:23,590 --> 00:06:23,600
ce problème en stockant le résultat de
 

374
00:06:23,600 --> 00:06:25,189
ce problème en stockant le résultat de
notre appel de fermeture coûteux

375
00:06:25,189 --> 00:06:25,199
notre appel de fermeture coûteux
 

376
00:06:25,199 --> 00:06:27,350
notre appel de fermeture coûteux
en haut de cette instruction if, mais

377
00:06:27,350 --> 00:06:27,360
en haut de cette instruction if, mais
 

378
00:06:27,360 --> 00:06:28,710
en haut de cette instruction if, mais
il existe un autre moyen de résoudre ce

379
00:06:28,710 --> 00:06:28,720
il existe un autre moyen de résoudre ce
 

380
00:06:28,720 --> 00:06:29,270
il existe un autre moyen de résoudre ce
problème

381
00:06:29,270 --> 00:06:29,280
problème
 

382
00:06:29,280 --> 00:06:31,670
problème
que nous allons  parlons un peu

383
00:06:31,670 --> 00:06:31,680
que nous allons  parlons un peu
 

384
00:06:31,680 --> 00:06:33,430
que nous allons  parlons un peu
avant de résoudre ce problème,

385
00:06:33,430 --> 00:06:33,440
avant de résoudre ce problème,
 

386
00:06:33,440 --> 00:06:34,870
avant de résoudre ce problème,
vous avez peut-être remarqué que nous n'avions pas

387
00:06:34,870 --> 00:06:34,880
vous avez peut-être remarqué que nous n'avions pas
 

388
00:06:34,880 --> 00:06:36,629
vous avez peut-être remarqué que nous n'avions pas
à annoter le type du

389
00:06:36,629 --> 00:06:36,639
à annoter le type du
 

390
00:06:36,639 --> 00:06:37,270
à annoter le type du

391
00:06:37,270 --> 00:06:37,280

 

392
00:06:37,280 --> 00:06:39,350

paramètre d'entrée de

393
00:06:39,350 --> 00:06:39,360
paramètre d'entrée de
 

394
00:06:39,360 --> 00:06:40,710
paramètre d'entrée de
notre fermeture ni à annoter la

395
00:06:40,710 --> 00:06:40,720
notre fermeture ni à annoter la
 

396
00:06:40,720 --> 00:06:42,950
notre fermeture ni à annoter la
valeur de retour de notre fermeture pour les fonctions régulières nous

397
00:06:42,950 --> 00:06:42,960
valeur de retour de notre fermeture pour les fonctions régulières nous
 

398
00:06:42,960 --> 00:06:44,790
valeur de retour de notre fermeture pour les fonctions régulières nous
aurions à spécifier le type  de nos

399
00:06:44,790 --> 00:06:44,800
aurions à spécifier le type  de nos
 

400
00:06:44,800 --> 00:06:45,909
aurions à spécifier le type  de nos
paramètres d'entrée

401
00:06:45,909 --> 00:06:45,919
paramètres d'entrée
 

402
00:06:45,919 --> 00:06:48,070
paramètres d'entrée
et du type de nos valeurs de retour et

403
00:06:48,070 --> 00:06:48,080
et du type de nos valeurs de retour et
 

404
00:06:48,080 --> 00:06:49,990
et du type de nos valeurs de retour et
c'est parce que les fonctions font partie d'une

405
00:06:49,990 --> 00:06:50,000
c'est parce que les fonctions font partie d'une
 

406
00:06:50,000 --> 00:06:51,350
c'est parce que les fonctions font partie d'une
interface explicite

407
00:06:51,350 --> 00:06:51,360
interface explicite
 

408
00:06:51,360 --> 00:06:53,749
interface explicite
exposée aux utilisateurs, il est donc important de s'entendre sur les

409
00:06:53,749 --> 00:06:53,759
exposée aux utilisateurs, il est donc important de s'entendre sur les
 

410
00:06:53,759 --> 00:06:55,110
exposée aux utilisateurs, il est donc important de s'entendre sur les
types transmis

411
00:06:55,110 --> 00:06:55,120
types transmis
 

412
00:06:55,120 --> 00:06:57,830
types transmis
et renvoyés, les fermetures

413
00:06:57,830 --> 00:06:57,840
et renvoyés, les fermetures
 

414
00:06:57,840 --> 00:06:59,510
et renvoyés, les fermetures
d'autre part sont généralement courtes et

415
00:06:59,510 --> 00:06:59,520
d'autre part sont généralement courtes et
 

416
00:06:59,520 --> 00:07:02,150
d'autre part sont généralement courtes et
uniquement pertinentes dans un étroit  contexte afin que

417
00:07:02,150 --> 00:07:02,160
uniquement pertinentes dans un étroit  contexte afin que
 

418
00:07:02,160 --> 00:07:02,550
uniquement pertinentes dans un étroit  contexte afin que
le

419
00:07:02,550 --> 00:07:02,560
le
 

420
00:07:02,560 --> 00:07:04,870
le
compilateur soit capable de déterminer les

421
00:07:04,870 --> 00:07:04,880
compilateur soit capable de déterminer les
 

422
00:07:04,880 --> 00:07:05,990
compilateur soit capable de déterminer les
types de paramètres d'entrée

423
00:07:05,990 --> 00:07:06,000
types de paramètres d'entrée
 

424
00:07:06,000 --> 00:07:08,230
types de paramètres d'entrée
et les types de retour ceci est similaire à la

425
00:07:08,230 --> 00:07:08,240
et les types de retour ceci est similaire à la
 

426
00:07:08,240 --> 00:07:10,150
et les types de retour ceci est similaire à la
façon dont le compilateur est capable de déterminer

427
00:07:10,150 --> 00:07:10,160
façon dont le compilateur est capable de déterminer
 

428
00:07:10,160 --> 00:07:12,070
façon dont le compilateur est capable de déterminer
les types de la plupart des variables

429
00:07:12,070 --> 00:07:12,080
les types de la plupart des variables
 

430
00:07:12,080 --> 00:07:13,749
les types de la plupart des variables
notez que nous pourrions rendre les types

431
00:07:13,749 --> 00:07:13,759
notez que nous pourrions rendre les types
 

432
00:07:13,759 --> 00:07:17,430
notez que nous pourrions rendre les types
explicites si nous le voulons comme

433
00:07:17,430 --> 00:07:17,440
explicites si nous le voulons comme
 

434
00:07:17,440 --> 00:07:19,270
explicites si nous le voulons comme
cela rend les types explicites  au

435
00:07:19,270 --> 00:07:19,280
cela rend les types explicites  au
 

436
00:07:19,280 --> 00:07:21,350
cela rend les types explicites  au
prix d'être plus verbeux,

437
00:07:21,350 --> 00:07:21,360
prix d'être plus verbeux,
 

438
00:07:21,360 --> 00:07:23,189
prix d'être plus verbeux,
notez que les définitions de fermeture ne peuvent

439
00:07:23,189 --> 00:07:23,199
notez que les définitions de fermeture ne peuvent
 

440
00:07:23,199 --> 00:07:25,350
notez que les définitions de fermeture ne peuvent
avoir qu'un seul type concret déduit

441
00:07:25,350 --> 00:07:25,360
avoir qu'un seul type concret déduit
 

442
00:07:25,360 --> 00:07:27,749
avoir qu'un seul type concret déduit
pour chaque paramètre d'entrée, par exemple

443
00:07:27,749 --> 00:07:27,759
pour chaque paramètre d'entrée, par exemple
 

444
00:07:27,759 --> 00:07:29,110
pour chaque paramètre d'entrée, par exemple
ici nous  avoir une variable appelée

445
00:07:29,110 --> 00:07:29,120
ici nous  avoir une variable appelée
 

446
00:07:29,120 --> 00:07:31,189
ici nous  avoir une variable appelée
exemple de fermeture qui est égale à une

447
00:07:31,189 --> 00:07:31,199
exemple de fermeture qui est égale à une
 

448
00:07:31,199 --> 00:07:33,270
exemple de fermeture qui est égale à une
fermeture qui prend x

449
00:07:33,270 --> 00:07:33,280
fermeture qui prend x
 

450
00:07:33,280 --> 00:07:36,150
fermeture qui prend x
puis renvoie x maintenant parce que la

451
00:07:36,150 --> 00:07:36,160
puis renvoie x maintenant parce que la
 

452
00:07:36,160 --> 00:07:37,589
puis renvoie x maintenant parce que la
fermeture est utilisée

453
00:07:37,589 --> 00:07:37,599
fermeture est utilisée
 

454
00:07:37,599 --> 00:07:40,309
fermeture est utilisée
ici à la ligne 26 avec une chaîne le

455
00:07:40,309 --> 00:07:40,319
ici à la ligne 26 avec une chaîne le
 

456
00:07:40,319 --> 00:07:41,670
ici à la ligne 26 avec une chaîne le
compilateur en déduit

457
00:07:41,670 --> 00:07:41,680
compilateur en déduit
 

458
00:07:41,680 --> 00:07:43,830
compilateur en déduit
que le type de paramètre d'entrée est une

459
00:07:43,830 --> 00:07:43,840
que le type de paramètre d'entrée est une
 

460
00:07:43,840 --> 00:07:46,230
que le type de paramètre d'entrée est une
chaîne mais juste en dessous sur la ligne

461
00:07:46,230 --> 00:07:46,240
chaîne mais juste en dessous sur la ligne
 

462
00:07:46,240 --> 00:07:47,270
chaîne mais juste en dessous sur la ligne
27

463
00:07:47,270 --> 00:07:47,280
27
 

464
00:07:47,280 --> 00:07:50,309
27
nous appelons notre exemple de variable de fermeture

465
00:07:50,309 --> 00:07:50,319
nous appelons notre exemple de variable de fermeture
 

466
00:07:50,319 --> 00:07:53,110
nous appelons notre exemple de variable de fermeture
avec un entier maintenant le compilateur se

467
00:07:53,110 --> 00:07:53,120
avec un entier maintenant le compilateur se
 

468
00:07:53,120 --> 00:07:53,830
avec un entier maintenant le compilateur se
plaindra

469
00:07:53,830 --> 00:07:53,840
plaindra
 

470
00:07:53,840 --> 00:07:55,350
plaindra
et la flèche dira que nous avons des

471
00:07:55,350 --> 00:07:55,360
et la flèche dira que nous avons des
 

472
00:07:55,360 --> 00:07:57,510
et la flèche dira que nous avons des
types incompatibles nous attendons une

473
00:07:57,510 --> 00:07:57,520
types incompatibles nous attendons une
 

474
00:07:57,520 --> 00:07:58,550
types incompatibles nous attendons une
chaîne mais nous obtenons

475
00:07:58,550 --> 00:07:58,560
chaîne mais nous obtenons
 

476
00:07:58,560 --> 00:08:00,950
chaîne mais nous obtenons
un entier donc la façon dont le compilateur fonctionne

477
00:08:00,950 --> 00:08:00,960
un entier donc la façon dont le compilateur fonctionne
 

478
00:08:00,960 --> 00:08:02,869
un entier donc la façon dont le compilateur fonctionne
est que le premier type passé dans notre

479
00:08:02,869 --> 00:08:02,879
est que le premier type passé dans notre
 

480
00:08:02,879 --> 00:08:03,670
est que le premier type passé dans notre
la fermeture

481
00:08:03,670 --> 00:08:03,680
la fermeture
 

482
00:08:03,680 --> 00:08:06,309
la fermeture
sera le type concret de nos

483
00:08:06,309 --> 00:08:06,319
sera le type concret de nos
 

484
00:08:06,319 --> 00:08:07,189
sera le type concret de nos
paramètres d'entrée

485
00:08:07,189 --> 00:08:07,199
paramètres d'entrée
 

486
00:08:07,199 --> 00:08:08,790
paramètres d'entrée
maintenant revenons au problème d'

487
00:08:08,790 --> 00:08:08,800
maintenant revenons au problème d'
 

488
00:08:08,800 --> 00:08:11,029
maintenant revenons au problème d'
appeler notre fermeture coûteuse deux fois

489
00:08:11,029 --> 00:08:11,039
appeler notre fermeture coûteuse deux fois
 

490
00:08:11,039 --> 00:08:13,830
appeler notre fermeture coûteuse deux fois
dans ce bloc si à nouveau nous pourrions résoudre

491
00:08:13,830 --> 00:08:13,840
dans ce bloc si à nouveau nous pourrions résoudre
 

492
00:08:13,840 --> 00:08:15,830
dans ce bloc si à nouveau nous pourrions résoudre
cette fonction en créant une variable

493
00:08:15,830 --> 00:08:15,840
cette fonction en créant une variable
 

494
00:08:15,840 --> 00:08:16,710
cette fonction en créant une variable
en haut de notre

495
00:08:16,710 --> 00:08:16,720
en haut de notre
 

496
00:08:16,720 --> 00:08:18,950
en haut de notre
bloc si et en stockant simplement le résultat de

497
00:08:18,950 --> 00:08:18,960
bloc si et en stockant simplement le résultat de
 

498
00:08:18,960 --> 00:08:20,309
bloc si et en stockant simplement le résultat de
notre fermeture coûteuse

499
00:08:20,309 --> 00:08:20,319
notre fermeture coûteuse
 

500
00:08:20,319 --> 00:08:22,309
notre fermeture coûteuse
, puis en utilisant ce résultat dans ces deux

501
00:08:22,309 --> 00:08:22,319
, puis en utilisant ce résultat dans ces deux
 

502
00:08:22,319 --> 00:08:23,990
, puis en utilisant ce résultat dans ces deux
instructions de ligne d'impression,

503
00:08:23,990 --> 00:08:24,000
instructions de ligne d'impression,
 

504
00:08:24,000 --> 00:08:25,830
instructions de ligne d'impression,
mais nous allons faire autre chose,

505
00:08:25,830 --> 00:08:25,840
mais nous allons faire autre chose,
 

506
00:08:25,840 --> 00:08:28,070
mais nous allons faire autre chose,
ce que nous ferons, c'est utiliser le

507
00:08:28,070 --> 00:08:28,080
ce que nous ferons, c'est utiliser le
 

508
00:08:28,080 --> 00:08:28,869
ce que nous ferons, c'est utiliser le
modèle de mémorisation

509
00:08:28,869 --> 00:08:28,879
modèle de mémorisation
 

510
00:08:28,879 --> 00:08:31,670
modèle de mémorisation
en créant un str  uct qui contiendra notre

511
00:08:31,670 --> 00:08:31,680
en créant un str  uct qui contiendra notre
 

512
00:08:31,680 --> 00:08:32,630
en créant un str  uct qui contiendra notre
fermeture

513
00:08:32,630 --> 00:08:32,640
fermeture
 

514
00:08:32,640 --> 00:08:35,430
fermeture
et le résultat de notre fermeture ici j'ai

515
00:08:35,430 --> 00:08:35,440
et le résultat de notre fermeture ici j'ai
 

516
00:08:35,440 --> 00:08:37,110
et le résultat de notre fermeture ici j'ai
créé une structure appelée

517
00:08:37,110 --> 00:08:37,120
créé une structure appelée
 

518
00:08:37,120 --> 00:08:40,070
créé une structure appelée
cacher juste au-dessus de notre fonction d'entraînement de génération

519
00:08:40,070 --> 00:08:40,080
cacher juste au-dessus de notre fonction d'entraînement de génération
 

520
00:08:40,080 --> 00:08:40,870
cacher juste au-dessus de notre fonction d'entraînement de génération

521
00:08:40,870 --> 00:08:40,880

 

522
00:08:40,880 --> 00:08:43,670

maintenant afin de définir des énumérations de structs ou

523
00:08:43,670 --> 00:08:43,680
maintenant afin de définir des énumérations de structs ou
 

524
00:08:43,680 --> 00:08:45,269
maintenant afin de définir des énumérations de structs ou
même des paramètres de fonction

525
00:08:45,269 --> 00:08:45,279
même des paramètres de fonction
 

526
00:08:45,279 --> 00:08:47,910
même des paramètres de fonction
qui utilisent des fermetures nous devons utiliser des

527
00:08:47,910 --> 00:08:47,920
qui utilisent des fermetures nous devons utiliser des
 

528
00:08:47,920 --> 00:08:48,870
qui utilisent des fermetures nous devons utiliser des
génériques

529
00:08:48,870 --> 00:08:48,880
génériques
 

530
00:08:48,880 --> 00:08:51,590
génériques
et des limites de trait ici notre cache

531
00:08:51,590 --> 00:08:51,600
et des limites de trait ici notre cache
 

532
00:08:51,600 --> 00:08:52,230
et des limites de trait ici notre cache
instruction utilise

533
00:08:52,230 --> 00:08:52,240
instruction utilise
 

534
00:08:52,240 --> 00:08:55,430
instruction utilise
un générique appelé t et ci-dessous, nous définissons un

535
00:08:55,430 --> 00:08:55,440
un générique appelé t et ci-dessous, nous définissons un
 

536
00:08:55,440 --> 00:08:56,949
un générique appelé t et ci-dessous, nous définissons un
trait lié au générique

537
00:08:56,949 --> 00:08:56,959
trait lié au générique
 

538
00:08:56,959 --> 00:08:59,590
trait lié au générique
et le trait que nous utilisons est fn court

539
00:08:59,590 --> 00:08:59,600
et le trait que nous utilisons est fn court
 

540
00:08:59,600 --> 00:09:00,150
et le trait que nous utilisons est fn court
pour la

541
00:09:00,150 --> 00:09:00,160
pour la
 

542
00:09:00,160 --> 00:09:02,070
pour la
fonction maintenant sans entrer dans ce qu'est le

543
00:09:02,070 --> 00:09:02,080
fonction maintenant sans entrer dans ce qu'est le
 

544
00:09:02,080 --> 00:09:04,310
fonction maintenant sans entrer dans ce qu'est le
trait fn, sachez simplement qu'il est fourni

545
00:09:04,310 --> 00:09:04,320
trait fn, sachez simplement qu'il est fourni
 

546
00:09:04,320 --> 00:09:05,750
trait fn, sachez simplement qu'il est fourni
par la bibliothèque standard

547
00:09:05,750 --> 00:09:05,760
par la bibliothèque standard
 

548
00:09:05,760 --> 00:09:07,829
par la bibliothèque standard
et toutes les fermetures implémentent  l'un des

549
00:09:07,829 --> 00:09:07,839
et toutes les fermetures implémentent  l'un des
 

550
00:09:07,839 --> 00:09:09,670
et toutes les fermetures implémentent  l'un des
trois traits fn l'

551
00:09:09,670 --> 00:09:09,680
trois traits fn l'
 

552
00:09:09,680 --> 00:09:12,389
trois traits fn l'
un d'eux est fn l'autre est fn

553
00:09:12,389 --> 00:09:12,399
un d'eux est fn l'autre est fn
 

554
00:09:12,399 --> 00:09:13,350
un d'eux est fn l'autre est fn
muet

555
00:09:13,350 --> 00:09:13,360
muet
 

556
00:09:13,360 --> 00:09:17,269
muet
et le dernier est fn une fois que

557
00:09:17,269 --> 00:09:17,279
et le dernier est fn une fois que
 

558
00:09:17,279 --> 00:09:19,110
et le dernier est fn une fois que
nous entrerons dans les différences entre

559
00:09:19,110 --> 00:09:19,120
nous entrerons dans les différences entre
 

560
00:09:19,120 --> 00:09:21,190
nous entrerons dans les différences entre
ces trois traits dans un instant

561
00:09:21,190 --> 00:09:21,200
ces trois traits dans un instant
 

562
00:09:21,200 --> 00:09:23,190
ces trois traits dans un instant
ici, nous avons ajouté des types au plateau fn pour

563
00:09:23,190 --> 00:09:23,200
ici, nous avons ajouté des types au plateau fn pour
 

564
00:09:23,200 --> 00:09:25,030
ici, nous avons ajouté des types au plateau fn pour
représenter le  les paramètres d'entrée

565
00:09:25,030 --> 00:09:25,040
représenter le  les paramètres d'entrée
 

566
00:09:25,040 --> 00:09:27,509
représenter le  les paramètres d'entrée
de notre fermeture qui va être un

567
00:09:27,509 --> 00:09:27,519
de notre fermeture qui va être un
 

568
00:09:27,519 --> 00:09:29,430
de notre fermeture qui va être un
entier 32 bits non signé

569
00:09:29,430 --> 00:09:29,440
entier 32 bits non signé
 

570
00:09:29,440 --> 00:09:31,670
entier 32 bits non signé
et aussi les paramètres de sortie qui

571
00:09:31,670 --> 00:09:31,680
et aussi les paramètres de sortie qui
 

572
00:09:31,680 --> 00:09:32,630
et aussi les paramètres de sortie qui
vont être à nouveau

573
00:09:32,630 --> 00:09:32,640
vont être à nouveau
 

574
00:09:32,640 --> 00:09:35,269
vont être à nouveau
un entier 32 bits non signé alors dans le

575
00:09:35,269 --> 00:09:35,279
un entier 32 bits non signé alors dans le
 

576
00:09:35,279 --> 00:09:37,190
un entier 32 bits non signé alors dans le
corps de notre structure nous avons

577
00:09:37,190 --> 00:09:37,200
corps de notre structure nous avons
 

578
00:09:37,200 --> 00:09:39,509
corps de notre structure nous avons
t  deux champs le premier est le calcul

579
00:09:39,509 --> 00:09:39,519
t  deux champs le premier est le calcul
 

580
00:09:39,519 --> 00:09:41,350
t  deux champs le premier est le calcul
qui stockera notre type générique

581
00:09:41,350 --> 00:09:41,360
qui stockera notre type générique
 

582
00:09:41,360 --> 00:09:44,070
qui stockera notre type générique
donc le calcul pourrait être n'importe quelle fermeture qui

583
00:09:44,070 --> 00:09:44,080
donc le calcul pourrait être n'importe quelle fermeture qui
 

584
00:09:44,080 --> 00:09:44,949
donc le calcul pourrait être n'importe quelle fermeture qui
rencontre ce

585
00:09:44,949 --> 00:09:44,959
rencontre ce
 

586
00:09:44,959 --> 00:09:48,310
rencontre ce
plateau lié ici alors nous avons une

587
00:09:48,310 --> 00:09:48,320
plateau lié ici alors nous avons une
 

588
00:09:48,320 --> 00:09:50,710
plateau lié ici alors nous avons une
valeur qui va être une valeur entière facultative de

589
00:09:50,710 --> 00:09:50,720
valeur qui va être une valeur entière facultative de
 

590
00:09:50,720 --> 00:09:51,670
valeur qui va être une valeur entière facultative de
32 bits

591
00:09:51,670 --> 00:09:51,680
32 bits
 

592
00:09:51,680 --> 00:09:54,230
32 bits
est facultative car lorsque

593
00:09:54,230 --> 00:09:54,240
est facultative car lorsque
 

594
00:09:54,240 --> 00:09:55,110
est facultative car lorsque
notre cacher est

595
00:09:55,110 --> 00:09:55,120
notre cacher est
 

596
00:09:55,120 --> 00:09:57,190
notre cacher est
initialisé  ça va être aucun et

597
00:09:57,190 --> 00:09:57,200
initialisé  ça va être aucun et
 

598
00:09:57,200 --> 00:09:59,110
initialisé  ça va être aucun et
puis une fois que nous appellerons notre calcul,

599
00:09:59,110 --> 00:09:59,120
puis une fois que nous appellerons notre calcul,
 

600
00:09:59,120 --> 00:10:01,590
puis une fois que nous appellerons notre calcul,
nous stockerons la valeur de retour à l'intérieur de

601
00:10:01,590 --> 00:10:01,600
nous stockerons la valeur de retour à l'intérieur de
 

602
00:10:01,600 --> 00:10:02,870
nous stockerons la valeur de retour à l'intérieur de
notre champ de valeur

603
00:10:02,870 --> 00:10:02,880
notre champ de valeur
 

604
00:10:02,880 --> 00:10:05,190
notre champ de valeur
notez que les fonctions régulières

605
00:10:05,190 --> 00:10:05,200
notez que les fonctions régulières
 

606
00:10:05,200 --> 00:10:06,710
notez que les fonctions régulières
implémentent également ces trois

607
00:10:06,710 --> 00:10:06,720
implémentent également ces trois
 

608
00:10:06,720 --> 00:10:09,829
implémentent également ces trois
traits fn afin que nous puissions stocker une fonction régulière à

609
00:10:09,829 --> 00:10:09,839
traits fn afin que nous puissions stocker une fonction régulière à
 

610
00:10:09,839 --> 00:10:10,310
traits fn afin que nous puissions stocker une fonction régulière à
l'

611
00:10:10,310 --> 00:10:10,320
l'
 

612
00:10:10,320 --> 00:10:13,190
l'
intérieur de notre champ de calcul également

613
00:10:13,190 --> 00:10:13,200
intérieur de notre champ de calcul également
 

614
00:10:13,200 --> 00:10:15,190
intérieur de notre champ de calcul également
suivant i '  collons dans le

615
00:10:15,190 --> 00:10:15,200
suivant i '  collons dans le
 

616
00:10:15,200 --> 00:10:16,949
suivant i '  collons dans le
bloc d'implémentation pour un cache ou une structure

617
00:10:16,949 --> 00:10:16,959
bloc d'implémentation pour un cache ou une structure
 

618
00:10:16,959 --> 00:10:21,110
bloc d'implémentation pour un cache ou une structure
et nous en parlerons d'

619
00:10:21,110 --> 00:10:21,120

 

620
00:10:21,120 --> 00:10:23,269

accord, parcourons cela, nous avons notre

621
00:10:23,269 --> 00:10:23,279
accord, parcourons cela, nous avons notre
 

622
00:10:23,279 --> 00:10:24,389
accord, parcourons cela, nous avons notre
bloc d'implémentation

623
00:10:24,389 --> 00:10:24,399
bloc d'implémentation
 

624
00:10:24,399 --> 00:10:27,110
bloc d'implémentation
pour cacher qui a le même générique et le même

625
00:10:27,110 --> 00:10:27,120
pour cacher qui a le même générique et le même
 

626
00:10:27,120 --> 00:10:28,230
pour cacher qui a le même générique et le même
trait lié

627
00:10:28,230 --> 00:10:28,240
trait lié
 

628
00:10:28,240 --> 00:10:30,630
trait lié
que notre cache ou notre structure, puis la

629
00:10:30,630 --> 00:10:30,640
que notre cache ou notre structure, puis la
 

630
00:10:30,640 --> 00:10:31,590
que notre cache ou notre structure, puis la
première fonction à l'

631
00:10:31,590 --> 00:10:31,600
première fonction à l'
 

632
00:10:31,600 --> 00:10:34,150
première fonction à l'
intérieur est  appelé new new est une

633
00:10:34,150 --> 00:10:34,160
intérieur est  appelé new new est une
 

634
00:10:34,160 --> 00:10:35,750
intérieur est  appelé new new est une
fonction constructeur qu'il prend dans un

635
00:10:35,750 --> 00:10:35,760
fonction constructeur qu'il prend dans un
 

636
00:10:35,760 --> 00:10:37,829
fonction constructeur qu'il prend dans un
calcul qui est de type t

637
00:10:37,829 --> 00:10:37,839
calcul qui est de type t
 

638
00:10:37,839 --> 00:10:39,910
calcul qui est de type t
notre fermeture et crée ensuite un nouveau

639
00:10:39,910 --> 00:10:39,920
notre fermeture et crée ensuite un nouveau
 

640
00:10:39,920 --> 00:10:41,190
notre fermeture et crée ensuite un nouveau
cacher en passant

641
00:10:41,190 --> 00:10:41,200
cacher en passant
 

642
00:10:41,200 --> 00:10:44,069
cacher en passant
le calcul et en définissant la valeur sur

643
00:10:44,069 --> 00:10:44,079
le calcul et en définissant la valeur sur
 

644
00:10:44,079 --> 00:10:44,790
le calcul et en définissant la valeur sur
none

645
00:10:44,790 --> 00:10:44,800
none
 

646
00:10:44,800 --> 00:10:47,910
none
alors nous avons notre méthode de valeur et c'est une

647
00:10:47,910 --> 00:10:47,920
alors nous avons notre méthode de valeur et c'est une
 

648
00:10:47,920 --> 00:10:49,670
alors nous avons notre méthode de valeur et c'est une
méthode parce que le premier paramètre

649
00:10:49,670 --> 00:10:49,680
méthode parce que le premier paramètre
 

650
00:10:49,680 --> 00:10:52,389
méthode parce que le premier paramètre
est une référence à soi et en fait nous

651
00:10:52,389 --> 00:10:52,399
est une référence à soi et en fait nous
 

652
00:10:52,399 --> 00:10:54,470
est une référence à soi et en fait nous
avons une référence mutable à soi

653
00:10:54,470 --> 00:10:54,480
avons une référence mutable à soi
 

654
00:10:54,480 --> 00:10:57,590
avons une référence mutable à soi
le paramètre suivant est arg qui est l'

655
00:10:57,590 --> 00:10:57,600
le paramètre suivant est arg qui est l'
 

656
00:10:57,600 --> 00:11:00,150
le paramètre suivant est arg qui est l'
argument que nous allons passer dans notre fermeture et

657
00:11:00,150 --> 00:11:00,160
argument que nous allons passer dans notre fermeture et
 

658
00:11:00,160 --> 00:11:02,550
argument que nous allons passer dans notre fermeture et
c'est un non signé 32  -bit entier le

659
00:11:02,550 --> 00:11:02,560
c'est un non signé 32  -bit entier le
 

660
00:11:02,560 --> 00:11:05,110
c'est un non signé 32  -bit entier le
type de retour est également un entier 32 bits non signé

661
00:11:05,110 --> 00:11:05,120
type de retour est également un entier 32 bits non signé
 

662
00:11:05,120 --> 00:11:05,829
type de retour est également un entier 32 bits non signé

663
00:11:05,829 --> 00:11:05,839

 

664
00:11:05,839 --> 00:11:08,069

à l'intérieur de la méthode value nous allons

665
00:11:08,069 --> 00:11:08,079
à l'intérieur de la méthode value nous allons
 

666
00:11:08,079 --> 00:11:09,590
à l'intérieur de la méthode value nous allons
faire une expression de correspondance

667
00:11:09,590 --> 00:11:09,600
faire une expression de correspondance
 

668
00:11:09,600 --> 00:11:12,710
faire une expression de correspondance
sur la valeur self dot donc nous

669
00:11:12,710 --> 00:11:13,829
sur la valeur self dot donc nous
 

670
00:11:13,829 --> 00:11:13,839

 

671
00:11:13,839 --> 00:11:16,550

vérifions le type self dot et souvenons-nous que self.value est un

672
00:11:16,550 --> 00:11:16,560
vérifions le type self dot et souvenons-nous que self.value est un
 

673
00:11:16,560 --> 00:11:17,509
vérifions le type self dot et souvenons-nous que self.value est un
type facultatif

674
00:11:17,509 --> 00:11:17,519
type facultatif
 

675
00:11:17,519 --> 00:11:19,829
type facultatif
et  lorsque nous créons notre cacher pour la première fois, il

676
00:11:19,829 --> 00:11:19,839
et  lorsque nous créons notre cacher pour la première fois, il
 

677
00:11:19,839 --> 00:11:21,269
et  lorsque nous créons notre cacher pour la première fois, il
sera défini sur

678
00:11:21,269 --> 00:11:21,279
sera défini sur
 

679
00:11:21,279 --> 00:11:24,310
sera défini sur
none, nous exécuterons donc cette branche none

680
00:11:24,310 --> 00:11:24,320
none, nous exécuterons donc cette branche none
 

681
00:11:24,320 --> 00:11:26,389
none, nous exécuterons donc cette branche none
à l'intérieur du bras none nous créons une

682
00:11:26,389 --> 00:11:26,399
à l'intérieur du bras none nous créons une
 

683
00:11:26,399 --> 00:11:27,430
à l'intérieur du bras none nous créons une
variable appelée v

684
00:11:27,430 --> 00:11:27,440
variable appelée v
 

685
00:11:27,440 --> 00:11:29,590
variable appelée v
et la fixons égale au résultat de l'

686
00:11:29,590 --> 00:11:29,600
et la fixons égale au résultat de l'
 

687
00:11:29,600 --> 00:11:31,350
et la fixons égale au résultat de l'
appel de notre

688
00:11:31,350 --> 00:11:31,360
appel de notre
 

689
00:11:31,360 --> 00:11:35,030
appel de notre
fermeture de calcul et de la transmission de la variable arg

690
00:11:35,030 --> 00:11:35,040
fermeture de calcul et de la transmission de la variable arg
 

691
00:11:35,040 --> 00:11:37,110
fermeture de calcul et de la transmission de la variable arg
alors nous mutons le champ de valeur

692
00:11:37,110 --> 00:11:37,120
alors nous mutons le champ de valeur
 

693
00:11:37,120 --> 00:11:38,710
alors nous mutons le champ de valeur
du cache ou de l'instance actuel

694
00:11:38,710 --> 00:11:38,720
du cache ou de l'instance actuel
 

695
00:11:38,720 --> 00:11:42,069
du cache ou de l'instance actuel
et le définissons sur un passage dans

696
00:11:42,069 --> 00:11:42,079
et le définissons sur un passage dans
 

697
00:11:42,079 --> 00:11:44,069
et le définissons sur un passage dans
v c'est là que la mise en cache se produit nous mettons en

698
00:11:44,069 --> 00:11:44,079
v c'est là que la mise en cache se produit nous mettons en
 

699
00:11:44,079 --> 00:11:45,829
v c'est là que la mise en cache se produit nous mettons en
cache la valeur de retour de notre

700
00:11:45,829 --> 00:11:45,839
cache la valeur de retour de notre
 

701
00:11:45,839 --> 00:11:46,949
cache la valeur de retour de notre
calcul

702
00:11:46,949 --> 00:11:46,959
calcul
 

703
00:11:46,959 --> 00:11:49,110
calcul
dans le champ de valeur, puis nous

704
00:11:49,110 --> 00:11:49,120
dans le champ de valeur, puis nous
 

705
00:11:49,120 --> 00:11:50,710
dans le champ de valeur, puis nous
retournons simplement

706
00:11:50,710 --> 00:11:50,720
retournons simplement
 

707
00:11:50,720 --> 00:11:53,190
retournons simplement
v let suivant  utilisons notre argent ou notre structure

708
00:11:53,190 --> 00:11:53,200
v let suivant  utilisons notre argent ou notre structure
 

709
00:11:53,200 --> 00:11:55,350
v let suivant  utilisons notre argent ou notre structure
à l'intérieur de la fonction de génération d'entraînement,

710
00:11:55,350 --> 00:11:55,360
à l'intérieur de la fonction de génération d'entraînement,
 

711
00:11:55,360 --> 00:11:57,430
à l'intérieur de la fonction de génération d'entraînement,
mais avant cela, exécutons d'abord

712
00:11:57,430 --> 00:11:57,440
mais avant cela, exécutons d'abord
 

713
00:11:57,440 --> 00:12:03,509
mais avant cela, exécutons d'abord
notre programme

714
00:12:03,509 --> 00:12:03,519

 

715
00:12:03,519 --> 00:12:05,590

car vous pouvez voir que notre fermeture coûteuse a été

716
00:12:05,590 --> 00:12:05,600
car vous pouvez voir que notre fermeture coûteuse a été
 

717
00:12:05,600 --> 00:12:06,710
car vous pouvez voir que notre fermeture coûteuse a été
appelée deux

718
00:12:06,710 --> 00:12:06,720
appelée deux
 

719
00:12:06,720 --> 00:12:08,949
appelée deux
fois une fois pour calculer le nombre de pompes

720
00:12:08,949 --> 00:12:08,959
fois une fois pour calculer le nombre de pompes
 

721
00:12:08,959 --> 00:12:10,550
fois une fois pour calculer le nombre de pompes
et la deuxième fois pour calculer

722
00:12:10,550 --> 00:12:10,560
et la deuxième fois pour calculer
 

723
00:12:10,560 --> 00:12:12,870
et la deuxième fois pour calculer
le nombre de  sit-ups rendons cela

724
00:12:12,870 --> 00:12:12,880
le nombre de  sit-ups rendons cela
 

725
00:12:12,880 --> 00:12:14,710
le nombre de  sit-ups rendons cela
plus efficace en enveloppant notre

726
00:12:14,710 --> 00:12:14,720
plus efficace en enveloppant notre
 

727
00:12:14,720 --> 00:12:15,430
plus efficace en enveloppant notre
définition de fermeture

728
00:12:15,430 --> 00:12:15,440
définition de fermeture
 

729
00:12:15,440 --> 00:12:27,990
définition de fermeture
ici à l'intérieur de notre structure de casher

730
00:12:27,990 --> 00:12:28,000

 

731
00:12:28,000 --> 00:12:29,750

ici nous appelons la nouvelle fonction sur

732
00:12:29,750 --> 00:12:29,760
ici nous appelons la nouvelle fonction sur
 

733
00:12:29,760 --> 00:12:31,829
ici nous appelons la nouvelle fonction sur
notre trésorerie ou notre structure et en transmettant

734
00:12:31,829 --> 00:12:31,839
notre trésorerie ou notre structure et en transmettant
 

735
00:12:31,839 --> 00:12:34,069
notre trésorerie ou notre structure et en transmettant
notre fermeture qui sera définie sur le

736
00:12:34,069 --> 00:12:34,079
notre fermeture qui sera définie sur le
 

737
00:12:34,079 --> 00:12:35,430
notre fermeture qui sera définie sur le
champ de calcul

738
00:12:35,430 --> 00:12:35,440
champ de calcul
 

739
00:12:35,440 --> 00:12:37,670
champ de calcul
de notre restructuration de trésorerie  changer notre

740
00:12:37,670 --> 00:12:37,680
de notre restructuration de trésorerie  changer notre
 

741
00:12:37,680 --> 00:12:42,870
de notre restructuration de trésorerie  changer notre
nom de variable en résultat mis en cache,

742
00:12:42,870 --> 00:12:42,880

 

743
00:12:42,880 --> 00:12:44,310

nous voudrons également rendre notre variable

744
00:12:44,310 --> 00:12:44,320
nous voudrons également rendre notre variable
 

745
00:12:44,320 --> 00:12:45,910
nous voudrons également rendre notre variable
mutable car nous appellerons la

746
00:12:45,910 --> 00:12:45,920
mutable car nous appellerons la
 

747
00:12:45,920 --> 00:12:46,790
mutable car nous appellerons la
méthode de valeur

748
00:12:46,790 --> 00:12:46,800
méthode de valeur
 

749
00:12:46,800 --> 00:12:52,389
méthode de valeur
qui va muter notre cache ou notre structure,

750
00:12:52,389 --> 00:12:52,399
qui va muter notre cache ou notre structure,
 

751
00:12:52,399 --> 00:12:54,230
qui va muter notre cache ou notre structure,
puis au lieu d'appeler une fermeture coûteuse,

752
00:12:54,230 --> 00:12:54,240
puis au lieu d'appeler une fermeture coûteuse,
 

753
00:12:54,240 --> 00:12:55,509
puis au lieu d'appeler une fermeture coûteuse,
nous appellerons

754
00:12:55,509 --> 00:12:55,519
nous appellerons
 

755
00:12:55,519 --> 00:13:07,590
nous appellerons
cachedresult dot value

756
00:13:07,590 --> 00:13:07,600
cachedresult dot value
 

757
00:13:07,600 --> 00:13:13,269
cachedresult dot value
allons-y et  exécutez à nouveau notre programme

758
00:13:13,269 --> 00:13:13,279

 

759
00:13:13,279 --> 00:13:15,269

et comme vous pouvez le voir cette fois-ci, nous

760
00:13:15,269 --> 00:13:15,279
et comme vous pouvez le voir cette fois-ci, nous
 

761
00:13:15,279 --> 00:13:17,590
et comme vous pouvez le voir cette fois-ci, nous
n'appelons notre opération coûteuse

762
00:13:17,590 --> 00:13:17,600
n'appelons notre opération coûteuse
 

763
00:13:17,600 --> 00:13:20,389
n'appelons notre opération coûteuse
qu'une seule fois. La mise en cache des valeurs est généralement un

764
00:13:20,389 --> 00:13:20,399
qu'une seule fois. La mise en cache des valeurs est généralement un
 

765
00:13:20,399 --> 00:13:22,470
qu'une seule fois. La mise en cache des valeurs est généralement un
comportement utile.

766
00:13:22,470 --> 00:13:23,350
comportement utile.
 

767
00:13:23,350 --> 00:13:23,360

 

768
00:13:23,360 --> 00:13:25,590

contextes mais il y a deux

769
00:13:25,590 --> 00:13:25,600
contextes mais il y a deux
 

770
00:13:25,600 --> 00:13:27,910
contextes mais il y a deux
problèmes qui nous empêchent de faire ce

771
00:13:27,910 --> 00:13:27,920
problèmes qui nous empêchent de faire ce
 

772
00:13:27,920 --> 00:13:30,230
problèmes qui nous empêchent de faire ce
problème numéro un appelle notre

773
00:13:30,230 --> 00:13:30,240
problème numéro un appelle notre
 

774
00:13:30,240 --> 00:13:32,069
problème numéro un appelle notre
méthode de valeur va retourner

775
00:13:32,069 --> 00:13:32,079
méthode de valeur va retourner
 

776
00:13:32,079 --> 00:13:35,190
méthode de valeur va retourner
la même valeur quel que soit le

777
00:13:35,190 --> 00:13:35,200
la même valeur quel que soit le
 

778
00:13:35,200 --> 00:13:37,829
la même valeur quel que soit le
paramètre d'entrée arg par exemple disons que

779
00:13:37,829 --> 00:13:37,839
paramètre d'entrée arg par exemple disons que
 

780
00:13:37,839 --> 00:13:39,910
paramètre d'entrée arg par exemple disons que
la première fois que nous appelons la méthode de valeur

781
00:13:39,910 --> 00:13:39,920
la première fois que nous appelons la méthode de valeur
 

782
00:13:39,920 --> 00:13:43,110
la première fois que nous appelons la méthode de valeur
nous passons en un  comme valeur pour arg

783
00:13:43,110 --> 00:13:43,120
nous passons en un  comme valeur pour arg
 

784
00:13:43,120 --> 00:13:44,389
nous passons en un  comme valeur pour arg
parce que c'est la première fois que nous

785
00:13:44,389 --> 00:13:44,399
parce que c'est la première fois que nous
 

786
00:13:44,399 --> 00:13:46,790
parce que c'est la première fois que nous
appelons la méthode de valeur self.value

787
00:13:46,790 --> 00:13:46,800
appelons la méthode de valeur self.value
 

788
00:13:46,800 --> 00:13:48,230
appelons la méthode de valeur self.value
va être évalué à none

789
00:13:48,230 --> 00:13:48,240
va être évalué à none
 

790
00:13:48,240 --> 00:13:50,150
va être évalué à none
donc nous allons aller dans la branche none

791
00:13:50,150 --> 00:13:50,160
donc nous allons aller dans la branche none
 

792
00:13:50,160 --> 00:13:51,350
donc nous allons aller dans la branche none
puis appeler notre

793
00:13:51,350 --> 00:13:51,360
puis appeler notre
 

794
00:13:51,360 --> 00:13:53,910
puis appeler notre
fermeture avec notre arg qui va

795
00:13:53,910 --> 00:13:53,920
fermeture avec notre arg qui va
 

796
00:13:53,920 --> 00:13:55,269
fermeture avec notre arg qui va
être égal  à 1.

797
00:13:55,269 --> 00:13:55,279
être égal  à 1.
 

798
00:13:55,279 --> 00:13:57,670
être égal  à 1.
alors nous prendrons la valeur résultante et l'

799
00:13:57,670 --> 00:13:57,680
alors nous prendrons la valeur résultante et l'
 

800
00:13:57,680 --> 00:13:58,870
alors nous prendrons la valeur résultante et l'
enregistrerons à l'intérieur de

801
00:13:58,870 --> 00:13:58,880
enregistrerons à l'intérieur de
 

802
00:13:58,880 --> 00:14:01,670
enregistrerons à l'intérieur de
self.value maintenant imaginez que nous appelons à nouveau notre méthode value

803
00:14:01,670 --> 00:14:01,680
self.value maintenant imaginez que nous appelons à nouveau notre méthode value
 

804
00:14:01,680 --> 00:14:02,150
self.value maintenant imaginez que nous appelons à nouveau notre méthode value

805
00:14:02,150 --> 00:14:02,160

 

806
00:14:02,160 --> 00:14:04,870

mais cette fois nous passons en 2 car la

807
00:14:04,870 --> 00:14:04,880
mais cette fois nous passons en 2 car la
 

808
00:14:04,880 --> 00:14:05,590
mais cette fois nous passons en 2 car la
valeur pour

809
00:14:05,590 --> 00:14:05,600
valeur pour
 

810
00:14:05,600 --> 00:14:08,470
valeur pour
arg cette fois self.value existe déjà

811
00:14:08,470 --> 00:14:08,480
arg cette fois self.value existe déjà
 

812
00:14:08,480 --> 00:14:10,550
arg cette fois self.value existe déjà
donc nous allons y aller  dans le bras de somme et

813
00:14:10,550 --> 00:14:10,560
donc nous allons y aller  dans le bras de somme et
 

814
00:14:10,560 --> 00:14:13,350
donc nous allons y aller  dans le bras de somme et
renvoyez simplement la valeur stockée dans sum, cela

815
00:14:13,350 --> 00:14:13,360
renvoyez simplement la valeur stockée dans sum, cela
 

816
00:14:13,360 --> 00:14:14,389
renvoyez simplement la valeur stockée dans sum, cela
pose problème car

817
00:14:14,389 --> 00:14:14,399
pose problème car
 

818
00:14:14,399 --> 00:14:16,790
pose problème car
r est transmis à notre fermeture, ce qui signifie

819
00:14:16,790 --> 00:14:16,800
r est transmis à notre fermeture, ce qui signifie
 

820
00:14:16,800 --> 00:14:18,790
r est transmis à notre fermeture, ce qui signifie
qu'il pourrait changer la valeur résultante

821
00:14:18,790 --> 00:14:18,800
qu'il pourrait changer la valeur résultante
 

822
00:14:18,800 --> 00:14:19,430
qu'il pourrait changer la valeur résultante
provenant

823
00:14:19,430 --> 00:14:19,440
provenant
 

824
00:14:19,440 --> 00:14:21,269
provenant
de notre fermeture, mais avec notre implémentation actuelle, la

825
00:14:21,269 --> 00:14:21,279
de notre fermeture, mais avec notre implémentation actuelle, la
 

826
00:14:21,279 --> 00:14:23,430
de notre fermeture, mais avec notre implémentation actuelle, la
valeur sera

827
00:14:23,430 --> 00:14:23,440
valeur sera
 

828
00:14:23,440 --> 00:14:25,590
valeur sera
toujours égale à la re  le résultat d'appeler

829
00:14:25,590 --> 00:14:25,600
toujours égale à la re  le résultat d'appeler
 

830
00:14:25,600 --> 00:14:27,829
toujours égale à la re  le résultat d'appeler
notre fermeture avec l'argument passé

831
00:14:27,829 --> 00:14:27,839
notre fermeture avec l'argument passé
 

832
00:14:27,839 --> 00:14:29,110
notre fermeture avec l'argument passé
dans le premier appel

833
00:14:29,110 --> 00:14:29,120
dans le premier appel
 

834
00:14:29,120 --> 00:14:31,350
dans le premier appel
à la valeur ce que je dis essentiellement est

835
00:14:31,350 --> 00:14:31,360
à la valeur ce que je dis essentiellement est
 

836
00:14:31,360 --> 00:14:33,189
à la valeur ce que je dis essentiellement est
au lieu d'encaisser une valeur

837
00:14:33,189 --> 00:14:33,199
au lieu d'encaisser une valeur
 

838
00:14:33,199 --> 00:14:35,590
au lieu d'encaisser une valeur
quel que soit l'argument passé est que

839
00:14:35,590 --> 00:14:35,600
quel que soit l'argument passé est que
 

840
00:14:35,600 --> 00:14:36,710
quel que soit l'argument passé est que
nous devons encaisser

841
00:14:36,710 --> 00:14:36,720
nous devons encaisser
 

842
00:14:36,720 --> 00:14:39,110
nous devons encaisser
une valeur pour chaque argument

843
00:14:39,110 --> 00:14:39,120
une valeur pour chaque argument
 

844
00:14:39,120 --> 00:14:40,790
une valeur pour chaque argument
passé parce que l'argument

845
00:14:40,790 --> 00:14:40,800
passé parce que l'argument
 

846
00:14:40,800 --> 00:14:43,750
passé parce que l'argument
influence la valeur en tant qu'exercice, vous

847
00:14:43,750 --> 00:14:43,760
influence la valeur en tant qu'exercice, vous
 

848
00:14:43,760 --> 00:14:45,910
influence la valeur en tant qu'exercice, vous
pouvez corriger cette implémentation en stockant un

849
00:14:45,910 --> 00:14:45,920
pouvez corriger cette implémentation en stockant un
 

850
00:14:45,920 --> 00:14:46,629
pouvez corriger cette implémentation en stockant un
hashmap

851
00:14:46,629 --> 00:14:46,639
hashmap
 

852
00:14:46,639 --> 00:14:48,949
hashmap
au lieu d'une valeur unique les clés

853
00:14:48,949 --> 00:14:48,959
au lieu d'une valeur unique les clés
 

854
00:14:48,959 --> 00:14:50,389
au lieu d'une valeur unique les clés
du hashmap seront

855
00:14:50,389 --> 00:14:50,399
du hashmap seront
 

856
00:14:50,399 --> 00:14:53,110
du hashmap seront
l'argument passé à value et les

857
00:14:53,110 --> 00:14:53,120
l'argument passé à value et les
 

858
00:14:53,120 --> 00:14:54,470
l'argument passé à value et les
valeurs de votre hashmap

859
00:14:54,470 --> 00:14:54,480
valeurs de votre hashmap
 

860
00:14:54,480 --> 00:14:57,189
valeurs de votre hashmap
seront le résultat de l'appel de la

861
00:14:57,189 --> 00:14:57,199
seront le résultat de l'appel de la
 

862
00:14:57,199 --> 00:14:58,069
seront le résultat de l'appel de la
fermeture

863
00:14:58,069 --> 00:14:58,079
fermeture
 

864
00:14:58,079 --> 00:15:00,550
fermeture
avec l'argument puis  à l'intérieur du corps

865
00:15:00,550 --> 00:15:00,560
avec l'argument puis  à l'intérieur du corps
 

866
00:15:00,560 --> 00:15:01,670
avec l'argument puis  à l'intérieur du corps
de cette méthode de valeur,

867
00:15:01,670 --> 00:15:01,680
de cette méthode de valeur,
 

868
00:15:01,680 --> 00:15:04,150
de cette méthode de valeur,
vous devrez rechercher l'argument dans

869
00:15:04,150 --> 00:15:04,160
vous devrez rechercher l'argument dans
 

870
00:15:04,160 --> 00:15:05,110
vous devrez rechercher l'argument dans
votre carte de hachage

871
00:15:05,110 --> 00:15:05,120
votre carte de hachage
 

872
00:15:05,120 --> 00:15:07,829
votre carte de hachage
et si une valeur pour cet argument existe,

873
00:15:07,829 --> 00:15:07,839
et si une valeur pour cet argument existe,
 

874
00:15:07,839 --> 00:15:09,110
et si une valeur pour cet argument existe,
renvoyez simplement

875
00:15:09,110 --> 00:15:09,120
renvoyez simplement
 

876
00:15:09,120 --> 00:15:11,590
renvoyez simplement
la valeur et si elle n'existe pas, exécutez

877
00:15:11,590 --> 00:15:11,600
la valeur et si elle n'existe pas, exécutez
 

878
00:15:11,600 --> 00:15:13,829
la valeur et si elle n'existe pas, exécutez
votre calcul coûteux et stockez le

879
00:15:13,829 --> 00:15:13,839
votre calcul coûteux et stockez le
 

880
00:15:13,839 --> 00:15:14,550
votre calcul coûteux et stockez le
résultat à l'

881
00:15:14,550 --> 00:15:14,560
résultat à l'
 

882
00:15:14,560 --> 00:15:16,790
résultat à l'
intérieur  votre carte de hachage le deuxième problème

883
00:15:16,790 --> 00:15:16,800
intérieur  votre carte de hachage le deuxième problème
 

884
00:15:16,800 --> 00:15:18,949
intérieur  votre carte de hachage le deuxième problème
avec notre implémentation de cacher

885
00:15:18,949 --> 00:15:18,959
avec notre implémentation de cacher
 

886
00:15:18,959 --> 00:15:21,350
avec notre implémentation de cacher
est que nous utilisons des types codés en dur par

887
00:15:21,350 --> 00:15:21,360
est que nous utilisons des types codés en dur par
 

888
00:15:21,360 --> 00:15:22,710
est que nous utilisons des types codés en dur par
exemple nous disons que notre

889
00:15:22,710 --> 00:15:22,720
exemple nous disons que notre
 

890
00:15:22,720 --> 00:15:25,189
exemple nous disons que notre
fermeture doit accepter un entier et

891
00:15:25,189 --> 00:15:25,199
fermeture doit accepter un entier et
 

892
00:15:25,199 --> 00:15:26,470
fermeture doit accepter un entier et
retourner un entier

893
00:15:26,470 --> 00:15:26,480
retourner un entier
 

894
00:15:26,480 --> 00:15:28,949
retourner un entier
et notre valeur doit également être un nombre entier

895
00:15:28,949 --> 00:15:28,959
et notre valeur doit également être un nombre entier
 

896
00:15:28,959 --> 00:15:29,590
et notre valeur doit également être un nombre entier

897
00:15:29,590 --> 00:15:29,600

 

898
00:15:29,600 --> 00:15:32,069

pour résoudre ce problème, vous pouvez simplement utiliser des génériques

899
00:15:32,069 --> 00:15:32,079
pour résoudre ce problème, vous pouvez simplement utiliser des génériques
 

900
00:15:32,079 --> 00:15:32,710
pour résoudre ce problème, vous pouvez simplement utiliser des génériques
au lieu de

901
00:15:32,710 --> 00:15:32,720
au lieu de
 

902
00:15:32,720 --> 00:15:34,870
au lieu de
valeurs codées en dur. La dernière chose dont je

903
00:15:34,870 --> 00:15:34,880
valeurs codées en dur. La dernière chose dont je
 

904
00:15:34,880 --> 00:15:36,629
valeurs codées en dur. La dernière chose dont je
veux parler est de capturer l'

905
00:15:36,629 --> 00:15:36,639
veux parler est de capturer l'
 

906
00:15:36,639 --> 00:15:38,389
veux parler est de capturer l'
environnement avec des fermetures

907
00:15:38,389 --> 00:15:38,399
environnement avec des fermetures
 

908
00:15:38,399 --> 00:15:41,189
environnement avec des fermetures
contrairement aux fonctions les fermetures ont accès aux

909
00:15:41,189 --> 00:15:41,199
contrairement aux fonctions les fermetures ont accès aux
 

910
00:15:41,199 --> 00:15:42,069
contrairement aux fonctions les fermetures ont accès aux
variables

911
00:15:42,069 --> 00:15:42,079
variables
 

912
00:15:42,079 --> 00:15:43,990
variables
qui sont définies dans le  portée dans

913
00:15:43,990 --> 00:15:44,000
qui sont définies dans le  portée dans
 

914
00:15:44,000 --> 00:15:45,829
qui sont définies dans le  portée dans
laquelle la fermeture est définie

915
00:15:45,829 --> 00:15:45,839
laquelle la fermeture est définie
 

916
00:15:45,839 --> 00:15:47,749
laquelle la fermeture est définie
voici un exemple simple en haut nous

917
00:15:47,749 --> 00:15:47,759
voici un exemple simple en haut nous
 

918
00:15:47,759 --> 00:15:48,870
voici un exemple simple en haut nous
avons une variable appelée

919
00:15:48,870 --> 00:15:48,880
avons une variable appelée
 

920
00:15:48,880 --> 00:15:51,590
avons une variable appelée
x qui est égale à quatre puis nous avons une

921
00:15:51,590 --> 00:15:51,600
x qui est égale à quatre puis nous avons une
 

922
00:15:51,600 --> 00:15:53,350
x qui est égale à quatre puis nous avons une
fermeture appelée égale à x

923
00:15:53,350 --> 00:15:53,360
fermeture appelée égale à x
 

924
00:15:53,360 --> 00:15:55,749
fermeture appelée égale à x
qui prend une variable appelée z

925
00:15:55,749 --> 00:15:55,759
qui prend une variable appelée z
 

926
00:15:55,759 --> 00:15:57,509
qui prend une variable appelée z
puis renvoie un booléen

927
00:15:57,509 --> 00:15:57,519
puis renvoie un booléen
 

928
00:15:57,519 --> 00:15:59,110
puis renvoie un booléen
le booléen va  être égal à cette

929
00:15:59,110 --> 00:15:59,120
le booléen va  être égal à cette
 

930
00:15:59,120 --> 00:16:00,949
le booléen va  être égal à cette
expression z est égal

931
00:16:00,949 --> 00:16:00,959
expression z est égal
 

932
00:16:00,959 --> 00:16:03,590
expression z est égal
à x maintenant même si x est défini en

933
00:16:03,590 --> 00:16:03,600
à x maintenant même si x est défini en
 

934
00:16:03,600 --> 00:16:05,110
à x maintenant même si x est défini en
dehors de notre fermeture

935
00:16:05,110 --> 00:16:05,120
dehors de notre fermeture
 

936
00:16:05,120 --> 00:16:07,430
dehors de notre fermeture
notre fermeture a toujours accès à x

937
00:16:07,430 --> 00:16:07,440
notre fermeture a toujours accès à x
 

938
00:16:07,440 --> 00:16:09,030
notre fermeture a toujours accès à x
parce qu'ils sont tous deux définis dans la

939
00:16:09,030 --> 00:16:09,040
parce qu'ils sont tous deux définis dans la
 

940
00:16:09,040 --> 00:16:09,990
parce qu'ils sont tous deux définis dans la
même portée

941
00:16:09,990 --> 00:16:10,000
même portée
 

942
00:16:10,000 --> 00:16:11,990
même portée
alors nous définissons une variable appelée y et la

943
00:16:11,990 --> 00:16:12,000
alors nous définissons une variable appelée y et la
 

944
00:16:12,000 --> 00:16:13,749
alors nous définissons une variable appelée y et la
définissons également égale  à quatre

945
00:16:13,749 --> 00:16:13,759
définissons également égale  à quatre
 

946
00:16:13,759 --> 00:16:16,710
définissons également égale  à quatre
enfin, nous appelons notre fermeture en passant en y

947
00:16:16,710 --> 00:16:16,720
enfin, nous appelons notre fermeture en passant en y
 

948
00:16:16,720 --> 00:16:18,470
enfin, nous appelons notre fermeture en passant en y
l'appel à notre fermeture est enveloppé

949
00:16:18,470 --> 00:16:18,480
l'appel à notre fermeture est enveloppé
 

950
00:16:18,480 --> 00:16:20,310
l'appel à notre fermeture est enveloppé
dans une macro assert

951
00:16:20,310 --> 00:16:20,320
dans une macro assert
 

952
00:16:20,320 --> 00:16:22,629
dans une macro assert
qui paniquera si la fonction de tour d'appel

953
00:16:22,629 --> 00:16:23,590
qui paniquera si la fonction de tour d'appel
 

954
00:16:23,590 --> 00:16:23,600

 

955
00:16:23,600 --> 00:16:26,069

donne faux alors allons-y et exécutons notre

956
00:16:26,069 --> 00:16:26,079
donne faux alors allons-y et exécutons notre
 

957
00:16:26,079 --> 00:16:28,710
donne faux alors allons-y et exécutons notre
programme

958
00:16:28,710 --> 00:16:28,720

 

959
00:16:28,720 --> 00:16:31,670

et comme vous pouvez le voir, nous n'avons pas paniqué maintenant

960
00:16:31,670 --> 00:16:31,680
et comme vous pouvez le voir, nous n'avons pas paniqué maintenant
 

961
00:16:31,680 --> 00:16:33,509
et comme vous pouvez le voir, nous n'avons pas paniqué maintenant
, voyons ce qui se passerait si nous utilisions une

962
00:16:33,509 --> 00:16:33,519
, voyons ce qui se passerait si nous utilisions une
 

963
00:16:33,519 --> 00:16:34,230
, voyons ce qui se passerait si nous utilisions une
fonction

964
00:16:34,230 --> 00:16:34,240
fonction
 

965
00:16:34,240 --> 00:16:36,710
fonction
au lieu d'une fermeture, nous allons donc changer notre

966
00:16:36,710 --> 00:16:37,670
au lieu d'une fermeture, nous allons donc changer notre
 

967
00:16:37,670 --> 00:16:37,680

 

968
00:16:37,680 --> 00:16:41,829

fermeture égale à x en une fonction

969
00:16:41,829 --> 00:16:41,839

 

970
00:16:41,839 --> 00:16:43,910

ici, vous pouvez voir des lignes ondulées rouges

971
00:16:43,910 --> 00:16:43,920
ici, vous pouvez voir des lignes ondulées rouges
 

972
00:16:43,920 --> 00:16:45,910
ici, vous pouvez voir des lignes ondulées rouges
sous x et si je  survolez vous pouvez

973
00:16:45,910 --> 00:16:45,920
sous x et si je  survolez vous pouvez
 

974
00:16:45,920 --> 00:16:47,030
sous x et si je  survolez vous pouvez
voir que l'erreur

975
00:16:47,030 --> 00:16:47,040
voir que l'erreur
 

976
00:16:47,040 --> 00:16:49,509
voir que l'erreur
ne peut pas capturer l'environnement dynamique à l'intérieur d'

977
00:16:49,509 --> 00:16:49,519
ne peut pas capturer l'environnement dynamique à l'intérieur d'
 

978
00:16:49,519 --> 00:16:50,470
ne peut pas capturer l'environnement dynamique à l'intérieur d'
une fonction,

979
00:16:50,470 --> 00:16:50,480
une fonction,
 

980
00:16:50,480 --> 00:16:52,710
une fonction,
utilisez une fermeture à la place, donc le compilateur

981
00:16:52,710 --> 00:16:52,720
utilisez une fermeture à la place, donc le compilateur
 

982
00:16:52,720 --> 00:16:54,230
utilisez une fermeture à la place, donc le compilateur
nous dit en fait d'utiliser

983
00:16:54,230 --> 00:16:54,240
nous dit en fait d'utiliser
 

984
00:16:54,240 --> 00:16:56,550
nous dit en fait d'utiliser
une fermeture au lieu d'une fonction car les

985
00:16:56,550 --> 00:16:56,560
une fermeture au lieu d'une fonction car les
 

986
00:16:56,560 --> 00:16:58,230
une fermeture au lieu d'une fonction car les
fermetures sont capables de capturer leur

987
00:16:58,230 --> 00:16:58,240
fermetures sont capables de capturer leur
 

988
00:16:58,240 --> 00:16:58,949
fermetures sont capables de capturer leur
environnement,

989
00:16:58,949 --> 00:16:58,959
environnement,
 

990
00:16:58,959 --> 00:17:01,189
environnement,
elles doivent utiliser de la mémoire supplémentaire  pour stocker

991
00:17:01,189 --> 00:17:01,199
elles doivent utiliser de la mémoire supplémentaire  pour stocker
 

992
00:17:01,199 --> 00:17:02,310
elles doivent utiliser de la mémoire supplémentaire  pour stocker
ce contexte,

993
00:17:02,310 --> 00:17:02,320
ce contexte,
 

994
00:17:02,320 --> 00:17:04,069
ce contexte,
mais parce que les fonctions ne capturent pas

995
00:17:04,069 --> 00:17:04,079
mais parce que les fonctions ne capturent pas
 

996
00:17:04,079 --> 00:17:06,069
mais parce que les fonctions ne capturent pas
leur environnement, elles n'encourent pas les

997
00:17:06,069 --> 00:17:06,079
leur environnement, elles n'encourent pas les
 

998
00:17:06,079 --> 00:17:07,429
leur environnement, elles n'encourent pas les
mêmes

999
00:17:07,429 --> 00:17:07,439
mêmes
 

1000
00:17:07,439 --> 00:17:09,189
mêmes
fermetures de frais généraux capturent les valeurs de leur

1001
00:17:09,189 --> 00:17:09,199
fermetures de frais généraux capturent les valeurs de leur
 

1002
00:17:09,199 --> 00:17:10,870
fermetures de frais généraux capturent les valeurs de leur
environnement de trois manières

1003
00:17:10,870 --> 00:17:10,880
environnement de trois manières
 

1004
00:17:10,880 --> 00:17:13,110
environnement de trois manières
qui correspondent directement aux trois façons dont une

1005
00:17:13,110 --> 00:17:13,120
qui correspondent directement aux trois façons dont une
 

1006
00:17:13,120 --> 00:17:14,549
qui correspondent directement aux trois façons dont une
fonction pourrait prendre en

1007
00:17:14,549 --> 00:17:14,559
fonction pourrait prendre en
 

1008
00:17:14,559 --> 00:17:17,590
fonction pourrait prendre en
paramètres d'entrée en s'appropriant en

1009
00:17:17,590 --> 00:17:17,600
paramètres d'entrée en s'appropriant en
 

1010
00:17:17,600 --> 00:17:18,870
paramètres d'entrée en s'appropriant en
empruntant immuablement

1011
00:17:18,870 --> 00:17:18,880
empruntant immuablement
 

1012
00:17:18,880 --> 00:17:21,909
empruntant immuablement
ou en empruntant immuablement ces trois

1013
00:17:21,909 --> 00:17:21,919
ou en empruntant immuablement ces trois
 

1014
00:17:21,919 --> 00:17:23,669
ou en empruntant immuablement ces trois
manières de capter l'environnement

1015
00:17:23,669 --> 00:17:23,679
manières de capter l'environnement
 

1016
00:17:23,679 --> 00:17:26,069
manières de capter l'environnement
sont encodées dans les traits de fonction dont nous

1017
00:17:26,069 --> 00:17:26,079
sont encodées dans les traits de fonction dont nous
 

1018
00:17:26,079 --> 00:17:27,350
sont encodées dans les traits de fonction dont nous
avons parlé plus haut

1019
00:17:27,350 --> 00:17:27,360
avons parlé plus haut
 

1020
00:17:27,360 --> 00:17:30,470
avons parlé plus haut
qui sont fn une fois f et mu et

1021
00:17:30,470 --> 00:17:30,480
qui sont fn une fois f et mu et
 

1022
00:17:30,480 --> 00:17:33,270
qui sont fn une fois f et mu et
fn fn une fois  s'approprie les

1023
00:17:33,270 --> 00:17:33,280
fn fn une fois  s'approprie les
 

1024
00:17:33,280 --> 00:17:34,870
fn fn une fois  s'approprie les
variables à l'intérieur de l'

1025
00:17:34,870 --> 00:17:34,880
variables à l'intérieur de l'
 

1026
00:17:34,880 --> 00:17:36,710
variables à l'intérieur de l'
environnement de fermetures la partie once du nom

1027
00:17:36,710 --> 00:17:36,720
environnement de fermetures la partie once du nom
 

1028
00:17:36,720 --> 00:17:38,630
environnement de fermetures la partie once du nom
représente le fait que les fermetures

1029
00:17:38,630 --> 00:17:38,640
représente le fait que les fermetures
 

1030
00:17:38,640 --> 00:17:40,230
représente le fait que les fermetures
ne peuvent pas s'approprier les mêmes

1031
00:17:40,230 --> 00:17:40,240
ne peuvent pas s'approprier les mêmes
 

1032
00:17:40,240 --> 00:17:42,150
ne peuvent pas s'approprier les mêmes
variables plus d'une fois

1033
00:17:42,150 --> 00:17:42,160
variables plus d'une fois
 

1034
00:17:42,160 --> 00:17:43,990
variables plus d'une fois
donc ces fermetures ne peuvent être

1035
00:17:43,990 --> 00:17:44,000
donc ces fermetures ne peuvent être
 

1036
00:17:44,000 --> 00:17:45,510
donc ces fermetures ne peuvent être
appelées que fn mu

1037
00:17:45,510 --> 00:17:45,520
appelées que fn mu
 

1038
00:17:45,520 --> 00:17:48,549
appelées que fn mu
emprunte des valeurs de manière mutable et fn

1039
00:17:48,549 --> 00:17:48,559
emprunte des valeurs de manière mutable et fn
 

1040
00:17:48,559 --> 00:17:51,029
emprunte des valeurs de manière mutable et fn
emprunte des valeurs de manière immuable  lorsque vous créez

1041
00:17:51,029 --> 00:17:51,039
emprunte des valeurs de manière immuable  lorsque vous créez
 

1042
00:17:51,039 --> 00:17:52,870
emprunte des valeurs de manière immuable  lorsque vous créez
une fermeture, rust déduit lequel de ces

1043
00:17:52,870 --> 00:17:52,880
une fermeture, rust déduit lequel de ces
 

1044
00:17:52,880 --> 00:17:54,070
une fermeture, rust déduit lequel de ces
traits utiliser en

1045
00:17:54,070 --> 00:17:54,080
traits utiliser en
 

1046
00:17:54,080 --> 00:17:56,630
traits utiliser en
fonction de la façon dont vous utilisez les valeurs dans

1047
00:17:56,630 --> 00:17:56,640
fonction de la façon dont vous utilisez les valeurs dans
 

1048
00:17:56,640 --> 00:17:58,230
fonction de la façon dont vous utilisez les valeurs dans
l'environnement des fermetures,

1049
00:17:58,230 --> 00:17:58,240
l'environnement des fermetures,
 

1050
00:17:58,240 --> 00:18:00,230
l'environnement des fermetures,
nous pourrions cependant forcer la fermeture à

1051
00:18:00,230 --> 00:18:00,240
nous pourrions cependant forcer la fermeture à
 

1052
00:18:00,240 --> 00:18:02,710
nous pourrions cependant forcer la fermeture à
s'approprier les valeurs qu'elle utilise

1053
00:18:02,710 --> 00:18:02,720
s'approprier les valeurs qu'elle utilise
 

1054
00:18:02,720 --> 00:18:05,270
s'approprier les valeurs qu'elle utilise
dans son environnement en utilisant le

1055
00:18:05,270 --> 00:18:05,280
dans son environnement en utilisant le
 

1056
00:18:05,280 --> 00:18:05,909
dans son environnement en utilisant le
mot-

1057
00:18:05,909 --> 00:18:05,919
mot-
 

1058
00:18:05,919 --> 00:18:08,070
mot-
clé move devant le  fermeture c'est surtout

1059
00:18:08,070 --> 00:18:08,080
clé move devant le  fermeture c'est surtout
 

1060
00:18:08,080 --> 00:18:09,590
clé move devant le  fermeture c'est surtout
utile lorsque vous passez une fermeture

1061
00:18:09,590 --> 00:18:09,600
utile lorsque vous passez une fermeture
 

1062
00:18:09,600 --> 00:18:10,470
utile lorsque vous passez une fermeture
d'un thread

1063
00:18:10,470 --> 00:18:10,480
d'un thread
 

1064
00:18:10,480 --> 00:18:12,470
d'un thread
à un autre thread afin que vous puissiez également passer

1065
00:18:12,470 --> 00:18:12,480
à un autre thread afin que vous puissiez également passer
 

1066
00:18:12,480 --> 00:18:14,310
à un autre thread afin que vous puissiez également passer
la propriété des variables d'un

1067
00:18:14,310 --> 00:18:14,320
la propriété des variables d'un
 

1068
00:18:14,320 --> 00:18:14,789
la propriété des variables d'un
thread

1069
00:18:14,789 --> 00:18:14,799
thread
 

1070
00:18:14,799 --> 00:18:17,029
thread
à l'autre thread par exemple dans ce

1071
00:18:17,029 --> 00:18:17,039
à l'autre thread par exemple dans ce
 

1072
00:18:17,039 --> 00:18:19,029
à l'autre thread par exemple dans ce
cas x est égal à un vecteur

1073
00:18:19,029 --> 00:18:19,039
cas x est égal à un vecteur
 

1074
00:18:19,039 --> 00:18:21,750
cas x est égal à un vecteur
nous avons notre fermeture  qui ne change pas,

1075
00:18:21,750 --> 00:18:21,760
nous avons notre fermeture  qui ne change pas,
 

1076
00:18:21,760 --> 00:18:22,789
nous avons notre fermeture  qui ne change pas,
nous imprimons

1077
00:18:22,789 --> 00:18:22,799
nous imprimons
 

1078
00:18:22,799 --> 00:18:25,990
nous imprimons
x et nous avons également y égal à un

1079
00:18:25,990 --> 00:18:26,000
x et nous avons également y égal à un
 

1080
00:18:26,000 --> 00:18:26,950
x et nous avons également y égal à un
vecteur

1081
00:18:26,950 --> 00:18:26,960
vecteur
 

1082
00:18:26,960 --> 00:18:28,950
vecteur
, puis nous appelons à nouveau notre fermeture en

1083
00:18:28,950 --> 00:18:28,960
, puis nous appelons à nouveau notre fermeture en
 

1084
00:18:28,960 --> 00:18:31,110
, puis nous appelons à nouveau notre fermeture en
passant en y et en affirmant

1085
00:18:31,110 --> 00:18:31,120
passant en y et en affirmant
 

1086
00:18:31,120 --> 00:18:33,750
passant en y et en affirmant
qu'elle retu  rns vrai maintenant parce qu'à l'intérieur de

1087
00:18:33,750 --> 00:18:33,760
qu'elle retu  rns vrai maintenant parce qu'à l'intérieur de
 

1088
00:18:33,760 --> 00:18:34,549
qu'elle retu  rns vrai maintenant parce qu'à l'intérieur de
notre fermeture

1089
00:18:34,549 --> 00:18:34,559
notre fermeture
 

1090
00:18:34,559 --> 00:18:37,590
notre fermeture
nous évaluons juste x contre z

1091
00:18:37,590 --> 00:18:37,600
nous évaluons juste x contre z
 

1092
00:18:37,600 --> 00:18:40,150
nous évaluons juste x contre z
nous ne prenons pas possession de x à l'intérieur de

1093
00:18:40,150 --> 00:18:40,160
nous ne prenons pas possession de x à l'intérieur de
 

1094
00:18:40,160 --> 00:18:41,029
nous ne prenons pas possession de x à l'intérieur de
notre fermeture

1095
00:18:41,029 --> 00:18:41,039
notre fermeture
 

1096
00:18:41,039 --> 00:18:43,350
notre fermeture
mais encore une fois nous pourrions forcer la fermeture à

1097
00:18:43,350 --> 00:18:43,360
mais encore une fois nous pourrions forcer la fermeture à
 

1098
00:18:43,360 --> 00:18:44,390
mais encore une fois nous pourrions forcer la fermeture à
prendre possession

1099
00:18:44,390 --> 00:18:44,400
prendre possession
 

1100
00:18:44,400 --> 00:18:46,870
prendre possession
en spécifiant le mot-clé move

1101
00:18:46,870 --> 00:18:46,880
en spécifiant le mot-clé move
 

1102
00:18:46,880 --> 00:18:50,710
en spécifiant le mot-clé move
devant notre définition de fermeture

1103
00:18:50,710 --> 00:18:50,720

 

1104
00:18:50,720 --> 00:18:53,669

maintenant notre fermeture  prend possession de x

1105
00:18:53,669 --> 00:18:53,679
maintenant notre fermeture  prend possession de x
 

1106
00:18:53,679 --> 00:18:54,070
maintenant notre fermeture  prend possession de x
et

1107
00:18:54,070 --> 00:18:54,080
et
 

1108
00:18:54,080 --> 00:18:56,310
et
nous obtenons une erreur dans notre déclaration d'impression

1109
00:18:56,310 --> 00:18:56,320
nous obtenons une erreur dans notre déclaration d'impression
 

1110
00:18:56,320 --> 00:18:58,390
nous obtenons une erreur dans notre déclaration d'impression
sous la définition de notre fermeture

1111
00:18:58,390 --> 00:18:58,400
sous la définition de notre fermeture
 

1112
00:18:58,400 --> 00:19:00,310
sous la définition de notre fermeture
si je survole les gribouillis rouges, vous

1113
00:19:00,310 --> 00:19:00,320
si je survole les gribouillis rouges, vous
 

1114
00:19:00,320 --> 00:19:01,590
si je survole les gribouillis rouges, vous
pouvez voir qu'il est indiqué

1115
00:19:01,590 --> 00:19:01,600
pouvez voir qu'il est indiqué
 

1116
00:19:01,600 --> 00:19:04,230
pouvez voir qu'il est indiqué
que nous utilisons une valeur empruntée après qu'elle a

1117
00:19:04,230 --> 00:19:04,240
que nous utilisons une valeur empruntée après qu'elle a
 

1118
00:19:04,240 --> 00:19:04,950
que nous utilisons une valeur empruntée après qu'elle a
été déplacée,

1119
00:19:04,950 --> 00:19:04,960
été déplacée,
 

1120
00:19:04,960 --> 00:19:07,350
été déplacée,
cela a du sens car au-dessus  notre

1121
00:19:07,350 --> 00:19:07,360
cela a du sens car au-dessus  notre
 

1122
00:19:07,360 --> 00:19:09,270
cela a du sens car au-dessus  notre
fermeture prend possession de x

1123
00:19:09,270 --> 00:19:09,280
fermeture prend possession de x
 

1124
00:19:09,280 --> 00:19:12,150
fermeture prend possession de x
donc nous ne pouvons pas utiliser x après qu'il ait été

1125
00:19:12,150 --> 00:19:12,160
donc nous ne pouvons pas utiliser x après qu'il ait été
 

1126
00:19:12,160 --> 00:19:13,029
donc nous ne pouvons pas utiliser x après qu'il ait été
déplacé ici d'

1127
00:19:13,029 --> 00:19:13,039
déplacé ici d'
 

1128
00:19:13,039 --> 00:19:14,789
déplacé ici d'
accord, ce qui conclut la première partie du

1129
00:19:14,789 --> 00:19:14,799
accord, ce qui conclut la première partie du
 

1130
00:19:14,799 --> 00:19:16,870
accord, ce qui conclut la première partie du
chapitre 13 dans laquelle nous avons couvert les

1131
00:19:16,870 --> 00:19:16,880
chapitre 13 dans laquelle nous avons couvert les
 

1132
00:19:16,880 --> 00:19:19,029
chapitre 13 dans laquelle nous avons couvert les
fermetures maintenant je sais que les fermetures pourraient être

1133
00:19:19,029 --> 00:19:19,039
fermetures maintenant je sais que les fermetures pourraient être
 

1134
00:19:19,039 --> 00:19:20,470
fermetures maintenant je sais que les fermetures pourraient être
difficiles à digérer

1135
00:19:20,470 --> 00:19:20,480
difficiles à digérer
 

1136
00:19:20,480 --> 00:19:22,230
difficiles à digérer
et nous n'avons pas parcouru tout  les

1137
00:19:22,230 --> 00:19:22,240
et nous n'avons pas parcouru tout  les
 

1138
00:19:22,240 --> 00:19:24,070
et nous n'avons pas parcouru tout  les
façons possibles d'utiliser les fermetures,

1139
00:19:24,070 --> 00:19:24,080
façons possibles d'utiliser les fermetures,
 

1140
00:19:24,080 --> 00:19:25,909
façons possibles d'utiliser les fermetures,
donc si vous voulez voir une autre vidéo

1141
00:19:25,909 --> 00:19:25,919
donc si vous voulez voir une autre vidéo
 

1142
00:19:25,919 --> 00:19:28,150
donc si vous voulez voir une autre vidéo
sur les fermetures avec plus d'exemples,

1143
00:19:28,150 --> 00:19:28,160
sur les fermetures avec plus d'exemples,
 

1144
00:19:28,160 --> 00:19:30,470
sur les fermetures avec plus d'exemples,
commentez ci-dessous et bien sûr si vous

1145
00:19:30,470 --> 00:19:30,480
commentez ci-dessous et bien sûr si vous
 

1146
00:19:30,480 --> 00:19:31,510
commentez ci-dessous et bien sûr si vous
aimez cette vidéo,

1147
00:19:31,510 --> 00:19:31,520
aimez cette vidéo,
 

1148
00:19:31,520 --> 00:19:33,350
aimez cette vidéo,
assurez-vous de lui donner un coup de pouce dans la

1149
00:19:33,350 --> 00:19:33,360
assurez-vous de lui donner un coup de pouce dans la
 

1150
00:19:33,360 --> 00:19:34,630
assurez-vous de lui donner un coup de pouce dans la
prochaine vidéo, nous sommes g  sur les

1151
00:19:34,630 --> 00:19:34,640
prochaine vidéo, nous sommes g  sur les
 

1152
00:19:34,640 --> 00:19:36,870
prochaine vidéo, nous sommes g  sur les
itérateurs, donc si vous voulez en être

1153
00:19:36,870 --> 00:19:36,880
itérateurs, donc si vous voulez en être
 

1154
00:19:36,880 --> 00:19:37,990
itérateurs, donc si vous voulez en être
informé, assurez-vous

1155
00:19:37,990 --> 00:19:38,000
informé, assurez-vous
 

1156
00:19:38,000 --> 00:19:40,870
informé, assurez-vous
de cliquer sur s'abonner et avec cela, je vous verrai

1157
00:19:40,870 --> 00:19:40,880
de cliquer sur s'abonner et avec cela, je vous verrai
 

1158
00:19:40,880 --> 00:19:41,590
de cliquer sur s'abonner et avec cela, je vous verrai

1159
00:19:41,590 --> 00:19:41,600

 

1160
00:19:41,600 --> 00:19:52,470

dans le prochain

1161
00:19:52,470 --> 00:19:52,480
dans le prochain
 

1162
00:19:52,480 --> 00:19:54,559
dans le prochain
vous

