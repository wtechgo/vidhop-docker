1
00:00:00,560 --> 00:00:02,629

bentornato russ gang se sei nuovo

2
00:00:02,629 --> 00:00:02,639
bentornato russ gang se sei nuovo
 

3
00:00:02,639 --> 00:00:04,630
bentornato russ gang se sei nuovo
qui mi chiamo bogdan e questo

4
00:00:04,630 --> 00:00:04,640
qui mi chiamo bogdan e questo
 

5
00:00:04,640 --> 00:00:05,829
qui mi chiamo bogdan e questo
canale parla

6
00:00:05,829 --> 00:00:05,839
canale parla
 

7
00:00:05,839 --> 00:00:07,990
canale parla
del linguaggio di programmazione ruggine

8
00:00:07,990 --> 00:00:08,000
del linguaggio di programmazione ruggine
 

9
00:00:08,000 --> 00:00:10,070
del linguaggio di programmazione ruggine
nell'ultimo video abbiamo esaminato il capitolo 12

10
00:00:10,070 --> 00:00:10,080
nell'ultimo video abbiamo esaminato il capitolo 12
 

11
00:00:10,080 --> 00:00:11,350
nell'ultimo video abbiamo esaminato il capitolo 12
del libro di wrestling

12
00:00:11,350 --> 00:00:11,360
del libro di wrestling
 

13
00:00:11,360 --> 00:00:14,390
del libro di wrestling
in cui abbiamo creato un programma cli

14
00:00:14,390 --> 00:00:14,400
in cui abbiamo creato un programma cli
 

15
00:00:14,400 --> 00:00:16,470
in cui abbiamo creato un programma cli
in questo video siamo  ripassando il capitolo

16
00:00:16,470 --> 00:00:16,480
in questo video siamo  ripassando il capitolo
 

17
00:00:16,480 --> 00:00:17,830
in questo video siamo  ripassando il capitolo
13 in particolare la

18
00:00:17,830 --> 00:00:17,840
13 in particolare la
 

19
00:00:17,840 --> 00:00:20,310
13 in particolare la
parte 1 del capitolo 13 in cui parleremo

20
00:00:20,310 --> 00:00:20,320
parte 1 del capitolo 13 in cui parleremo
 

21
00:00:20,320 --> 00:00:21,109
parte 1 del capitolo 13 in cui parleremo
di

22
00:00:21,109 --> 00:00:21,119
di
 

23
00:00:21,119 --> 00:00:30,550
di
chiusure, quindi con questo arrugginiamo

24
00:00:30,550 --> 00:00:30,560
chiusure, quindi con questo arrugginiamo
 

25
00:00:30,560 --> 00:00:33,270
chiusure, quindi con questo arrugginiamo
prima di tutto cosa sono le chiusure le chiusure

26
00:00:33,270 --> 00:00:33,280
prima di tutto cosa sono le chiusure le chiusure
 

27
00:00:33,280 --> 00:00:34,470
prima di tutto cosa sono le chiusure le chiusure
sono come funzioni

28
00:00:34,470 --> 00:00:34,480
sono come funzioni
 

29
00:00:34,480 --> 00:00:36,150
sono come funzioni
tranne per il fatto che sono anonime nel senso

30
00:00:36,150 --> 00:00:36,160
tranne per il fatto che sono anonime nel senso
 

31
00:00:36,160 --> 00:00:37,830
tranne per il fatto che sono anonime nel senso
che non hanno nomi

32
00:00:37,830 --> 00:00:37,840
che non hanno nomi
 

33
00:00:37,840 --> 00:00:40,150
che non hanno nomi
che potrebbero  essere archiviati come variabili e

34
00:00:40,150 --> 00:00:40,160
che potrebbero  essere archiviati come variabili e
 

35
00:00:40,160 --> 00:00:41,030
che potrebbero  essere archiviati come variabili e
passati in

36
00:00:41,030 --> 00:00:41,040
passati in
 

37
00:00:41,040 --> 00:00:43,270
passati in
giro potrebbero anche essere passati come

38
00:00:43,270 --> 00:00:43,280
giro potrebbero anche essere passati come
 

39
00:00:43,280 --> 00:00:44,150
giro potrebbero anche essere passati come
parametri di input

40
00:00:44,150 --> 00:00:44,160
parametri di input
 

41
00:00:44,160 --> 00:00:46,549
parametri di input
a una funzione e catturano le

42
00:00:46,549 --> 00:00:46,559
a una funzione e catturano le
 

43
00:00:46,559 --> 00:00:47,590
a una funzione e catturano le
variabili

44
00:00:47,590 --> 00:00:47,600
variabili
 

45
00:00:47,600 --> 00:00:50,150
variabili
all'interno dell'ambito in cui sono

46
00:00:50,150 --> 00:00:50,160
all'interno dell'ambito in cui sono
 

47
00:00:50,160 --> 00:00:50,950
all'interno dell'ambito in cui sono

48
00:00:50,950 --> 00:00:50,960

 

49
00:00:50,960 --> 00:00:53,029

definite per comprendere meglio le chiusure le

50
00:00:53,029 --> 00:00:53,039
definite per comprendere meglio le chiusure le
 

51
00:00:53,039 --> 00:00:54,389
definite per comprendere meglio le chiusure le
useremo nel seguente

52
00:00:54,389 --> 00:00:54,399
useremo nel seguente
 

53
00:00:54,399 --> 00:00:56,470
useremo nel seguente
esempio immagina di '  Ricostruendo un back-

54
00:00:56,470 --> 00:00:56,480
esempio immagina di '  Ricostruendo un back-
 

55
00:00:56,480 --> 00:00:58,389
esempio immagina di '  Ricostruendo un back-
end per un'app di fitness

56
00:00:58,389 --> 00:00:58,399
end per un'app di fitness
 

57
00:00:58,399 --> 00:01:00,950
end per un'app di fitness
e il back-end è costruito in ruggine, l'

58
00:01:00,950 --> 00:01:00,960
e il back-end è costruito in ruggine, l'
 

59
00:01:00,960 --> 00:01:02,790
e il back-end è costruito in ruggine, l'
app di fitness genererà

60
00:01:02,790 --> 00:01:02,800
app di fitness genererà
 

61
00:01:02,800 --> 00:01:04,390
app di fitness genererà
allenamenti personalizzati per un utente in

62
00:01:04,390 --> 00:01:04,400
allenamenti personalizzati per un utente in
 

63
00:01:04,400 --> 00:01:07,109
allenamenti personalizzati per un utente in
base a vari fattori come la loro

64
00:01:07,109 --> 00:01:07,910
base a vari fattori come la loro
 

65
00:01:07,910 --> 00:01:07,920

 

66
00:01:07,920 --> 00:01:11,190

preferenza di allenamento per l'indice di massa corporea dell'età  rence e

67
00:01:11,190 --> 00:01:11,200
preferenza di allenamento per l'indice di massa corporea dell'età  rence e
 

68
00:01:11,200 --> 00:01:12,149
preferenza di allenamento per l'indice di massa corporea dell'età  rence e
livello di intensità

69
00:01:12,149 --> 00:01:12,159
livello di intensità
 

70
00:01:12,159 --> 00:01:14,310
livello di intensità
ora l'implementazione di questo algoritmo

71
00:01:14,310 --> 00:01:14,320
ora l'implementazione di questo algoritmo
 

72
00:01:14,320 --> 00:01:15,670
ora l'implementazione di questo algoritmo
non ha molta

73
00:01:15,670 --> 00:01:15,680
non ha molta
 

74
00:01:15,680 --> 00:01:17,270
non ha molta
importanza ciò che conta è che una parte di questo

75
00:01:17,270 --> 00:01:17,280
importanza ciò che conta è che una parte di questo
 

76
00:01:17,280 --> 00:01:19,510
importanza ciò che conta è che una parte di questo
algoritmo esegue un calcolo

77
00:01:19,510 --> 00:01:19,520
algoritmo esegue un calcolo
 

78
00:01:19,520 --> 00:01:21,590
algoritmo esegue un calcolo
che è costoso e richiede alcuni

79
00:01:21,590 --> 00:01:21,600
che è costoso e richiede alcuni
 

80
00:01:21,600 --> 00:01:23,109
che è costoso e richiede alcuni
secondi per essere eseguito

81
00:01:23,109 --> 00:01:23,119
secondi per essere eseguito
 

82
00:01:23,119 --> 00:01:25,510
secondi per essere eseguito
qui abbiamo simulato questo calcolo

83
00:01:25,510 --> 00:01:25,520
qui abbiamo simulato questo calcolo
 

84
00:01:25,520 --> 00:01:26,630
qui abbiamo simulato questo calcolo
con una funzione chiamata

85
00:01:26,630 --> 00:01:26,640
con una funzione chiamata
 

86
00:01:26,640 --> 00:01:29,749
con una funzione chiamata
simulato costoso  calcolo che

87
00:01:29,749 --> 00:01:29,759
simulato costoso  calcolo che
 

88
00:01:29,759 --> 00:01:30,310
simulato costoso  calcolo che
prende

89
00:01:30,310 --> 00:01:30,320
prende
 

90
00:01:30,320 --> 00:01:32,630
prende
un'intensità e quindi stampa

91
00:01:32,630 --> 00:01:32,640
un'intensità e quindi stampa
 

92
00:01:32,640 --> 00:01:34,390
un'intensità e quindi stampa
calcolando lentamente

93
00:01:34,390 --> 00:01:34,400
calcolando lentamente
 

94
00:01:34,400 --> 00:01:36,710
calcolando lentamente
lascia dormire il thread per due secondi

95
00:01:36,710 --> 00:01:36,720
lascia dormire il thread per due secondi
 

96
00:01:36,720 --> 00:01:38,950
lascia dormire il thread per due secondi
e restituisce l'intensità

97
00:01:38,950 --> 00:01:38,960
e restituisce l'intensità
 

98
00:01:38,960 --> 00:01:41,030
e restituisce l'intensità
ora qui nel maine stiamo simulando il

99
00:01:41,030 --> 00:01:41,040
ora qui nel maine stiamo simulando il
 

100
00:01:41,040 --> 00:01:42,230
ora qui nel maine stiamo simulando il
codice che verrebbe chiamato

101
00:01:42,230 --> 00:01:42,240
codice che verrebbe chiamato
 

102
00:01:42,240 --> 00:01:44,870
codice che verrebbe chiamato
se l'utente volesse un nuovo allenamento che stiamo

103
00:01:44,870 --> 00:01:44,880
se l'utente volesse un nuovo allenamento che stiamo
 

104
00:01:44,880 --> 00:01:46,710
se l'utente volesse un nuovo allenamento che stiamo
chiamando genera allenamento  che è una

105
00:01:46,710 --> 00:01:46,720
chiamando genera allenamento  che è una
 

106
00:01:46,720 --> 00:01:48,630
chiamando genera allenamento  che è una
funzione che non abbiamo ancora creato

107
00:01:48,630 --> 00:01:48,640
funzione che non abbiamo ancora creato
 

108
00:01:48,640 --> 00:01:50,310
funzione che non abbiamo ancora creato
e la generazione dell'allenamento richiede due

109
00:01:50,310 --> 00:01:50,320
e la generazione dell'allenamento richiede due
 

110
00:01:50,320 --> 00:01:52,710
e la generazione dell'allenamento richiede due
parametri l'intensità specificata dall'utente

111
00:01:52,710 --> 00:01:52,720
parametri l'intensità specificata dall'utente
 

112
00:01:52,720 --> 00:01:53,670
parametri l'intensità specificata dall'utente

113
00:01:53,670 --> 00:01:53,680

 

114
00:01:53,680 --> 00:01:55,830

e un numero casuale per fornire una certa

115
00:01:55,830 --> 00:01:55,840
e un numero casuale per fornire una certa
 

116
00:01:55,840 --> 00:01:58,149
e un numero casuale per fornire una certa
varietà all'allenamento generato

117
00:01:58,149 --> 00:01:58,159
varietà all'allenamento generato
 

118
00:01:58,159 --> 00:01:59,990
varietà all'allenamento generato
ora perché in questo esempio non stiamo effettivamente costruendo

119
00:01:59,990 --> 00:02:00,000
ora perché in questo esempio non stiamo effettivamente costruendo
 

120
00:02:00,000 --> 00:02:01,830
ora perché in questo esempio non stiamo effettivamente costruendo
il front-end,

121
00:02:01,830 --> 00:02:01,840
il front-end,
 

122
00:02:01,840 --> 00:02:04,469
il front-end,
noi '  Passerò con un'intensità simulata di

123
00:02:04,469 --> 00:02:04,479
noi '  Passerò con un'intensità simulata di
 

124
00:02:04,479 --> 00:02:05,030
noi '  Passerò con un'intensità simulata di
10

125
00:02:05,030 --> 00:02:05,040
10
 

126
00:02:05,040 --> 00:02:07,109
10
e per il numero casuale potremmo usare

127
00:02:07,109 --> 00:02:07,119
e per il numero casuale potremmo usare
 

128
00:02:07,119 --> 00:02:08,949
e per il numero casuale potremmo usare
la cassa rand e generare effettivamente un

129
00:02:08,949 --> 00:02:08,959
la cassa rand e generare effettivamente un
 

130
00:02:08,959 --> 00:02:09,749
la cassa rand e generare effettivamente un
numero casuale

131
00:02:09,749 --> 00:02:09,759
numero casuale
 

132
00:02:09,759 --> 00:02:11,510
numero casuale
ma ancora una volta non è  t il nostro obiettivo in questo

133
00:02:11,510 --> 00:02:11,520
ma ancora una volta non è  t il nostro obiettivo in questo
 

134
00:02:11,520 --> 00:02:13,589
ma ancora una volta non è  t il nostro obiettivo in questo
esempio, quindi imposteremo semplicemente il

135
00:02:13,589 --> 00:02:13,599
esempio, quindi imposteremo semplicemente il
 

136
00:02:13,599 --> 00:02:15,350
esempio, quindi imposteremo semplicemente il
numero casuale su un sette codificato,

137
00:02:15,350 --> 00:02:15,360
numero casuale su un sette codificato,
 

138
00:02:15,360 --> 00:02:17,670
numero casuale su un sette codificato,
quindi definiremo la

139
00:02:17,670 --> 00:02:17,680
quindi definiremo la
 

140
00:02:17,680 --> 00:02:18,869
quindi definiremo la
funzione di allenamento generata

141
00:02:18,869 --> 00:02:18,879
funzione di allenamento generata
 

142
00:02:18,879 --> 00:02:21,990
funzione di allenamento generata
proprio sotto la

143
00:02:21,990 --> 00:02:22,000
proprio sotto la
 

144
00:02:22,000 --> 00:02:23,990
proprio sotto la
funzione di generazione dell'allenamento principale prende

145
00:02:23,990 --> 00:02:24,000
funzione di generazione dell'allenamento principale prende
 

146
00:02:24,000 --> 00:02:25,910
funzione di generazione dell'allenamento principale prende
un'intensità e un numero casuale

147
00:02:25,910 --> 00:02:25,920
un'intensità e un numero casuale
 

148
00:02:25,920 --> 00:02:28,630
un'intensità e un numero casuale
se l'intensità è inferiore a 25

149
00:02:28,630 --> 00:02:28,640
se l'intensità è inferiore a 25
 

150
00:02:28,640 --> 00:02:30,710
se l'intensità è inferiore a 25
stampiamo do x numero di flessioni

151
00:02:30,710 --> 00:02:30,720
stampiamo do x numero di flessioni
 

152
00:02:30,720 --> 00:02:33,030
stampiamo do x numero di flessioni
e facciamo x numero di addominali per capire

153
00:02:33,030 --> 00:02:33,040
e facciamo x numero di addominali per capire
 

154
00:02:33,040 --> 00:02:34,949
e facciamo x numero di addominali per capire
quante flessioni e configurazioni fare

155
00:02:34,949 --> 00:02:34,959
quante flessioni e configurazioni fare
 

156
00:02:34,959 --> 00:02:37,990
quante flessioni e configurazioni fare
chiamiamo il nostro costoso calcolo se l'

157
00:02:37,990 --> 00:02:38,000
chiamiamo il nostro costoso calcolo se l'
 

158
00:02:38,000 --> 00:02:39,910
chiamiamo il nostro costoso calcolo se l'
intensità è superiore a 25,

159
00:02:39,910 --> 00:02:39,920
intensità è superiore a 25,
 

160
00:02:39,920 --> 00:02:42,710
intensità è superiore a 25,
entriamo nella clausola else qui

161
00:02:42,710 --> 00:02:42,720
entriamo nella clausola else qui
 

162
00:02:42,720 --> 00:02:43,030
entriamo nella clausola else qui
controlla il

163
00:02:43,030 --> 00:02:43,040
controlla il
 

164
00:02:43,040 --> 00:02:45,750
controlla il
nostro numero casuale se è esattamente tre

165
00:02:45,750 --> 00:02:45,760
nostro numero casuale se è esattamente tre
 

166
00:02:45,760 --> 00:02:47,509
nostro numero casuale se è esattamente tre
stampiamo prendiamo una pausa

167
00:02:47,509 --> 00:02:47,519
stampiamo prendiamo una pausa
 

168
00:02:47,519 --> 00:02:49,910
stampiamo prendiamo una pausa
altrimenti pronome run x quantità di

169
00:02:49,910 --> 00:02:49,920
altrimenti pronome run x quantità di
 

170
00:02:49,920 --> 00:02:51,670
altrimenti pronome run x quantità di
minuti e di nuovo per calcolare il

171
00:02:51,670 --> 00:02:51,680
minuti e di nuovo per calcolare il
 

172
00:02:51,680 --> 00:02:53,110
minuti e di nuovo per calcolare il
numero di minuti da eseguire

173
00:02:53,110 --> 00:02:53,120
numero di minuti da eseguire
 

174
00:02:53,120 --> 00:02:55,350
numero di minuti da eseguire
usiamo la nostra costosa

175
00:02:55,350 --> 00:02:55,360
usiamo la nostra costosa
 

176
00:02:55,360 --> 00:02:56,150
usiamo la nostra costosa
funzione di calcolo

177
00:02:56,150 --> 00:02:56,160
funzione di calcolo
 

178
00:02:56,160 --> 00:02:57,910
funzione di calcolo
ora funziona ma potrebbe usare un po' di

179
00:02:57,910 --> 00:02:57,920
ora funziona ma potrebbe usare un po' di
 

180
00:02:57,920 --> 00:02:59,750
ora funziona ma potrebbe usare un po' di
refactoring un problema è  che stiamo

181
00:02:59,750 --> 00:02:59,760
refactoring un problema è  che stiamo
 

182
00:02:59,760 --> 00:03:01,350
refactoring un problema è  che stiamo
chiamando la nostra funzione costosa

183
00:03:01,350 --> 00:03:01,360
chiamando la nostra funzione costosa
 

184
00:03:01,360 --> 00:03:03,910
chiamando la nostra funzione costosa
in più punti, quindi se cambiamo il

185
00:03:03,910 --> 00:03:03,920
in più punti, quindi se cambiamo il
 

186
00:03:03,920 --> 00:03:05,350
in più punti, quindi se cambiamo il
modo in cui la funzione viene chiamata,

187
00:03:05,350 --> 00:03:05,360
modo in cui la funzione viene chiamata,
 

188
00:03:05,360 --> 00:03:07,910
modo in cui la funzione viene chiamata,
ad esempio se aggiungiamo un altro parametro,

189
00:03:07,910 --> 00:03:07,920
ad esempio se aggiungiamo un altro parametro,
 

190
00:03:07,920 --> 00:03:09,110
ad esempio se aggiungiamo un altro parametro,
dobbiamo cambiare

191
00:03:09,110 --> 00:03:09,120
dobbiamo cambiare
 

192
00:03:09,120 --> 00:03:11,589
dobbiamo cambiare
tutti i siti di chiamata, chiamiamo anche le nostre

193
00:03:11,589 --> 00:03:11,599
tutti i siti di chiamata, chiamiamo anche le nostre
 

194
00:03:11,599 --> 00:03:12,710
tutti i siti di chiamata, chiamiamo anche le nostre
costose functi  su

195
00:03:12,710 --> 00:03:12,720
costose functi  su
 

196
00:03:12,720 --> 00:03:15,589
costose functi  su
più volte inutilmente, ad esempio

197
00:03:15,589 --> 00:03:15,599
più volte inutilmente, ad esempio
 

198
00:03:15,599 --> 00:03:16,710
più volte inutilmente, ad esempio
in questo blocco if

199
00:03:16,710 --> 00:03:16,720
in questo blocco if
 

200
00:03:16,720 --> 00:03:18,790
in questo blocco if
chiamiamo la nostra funzione costosa due volte

201
00:03:18,790 --> 00:03:18,800
chiamiamo la nostra funzione costosa due volte
 

202
00:03:18,800 --> 00:03:21,030
chiamiamo la nostra funzione costosa due volte
quando abbiamo davvero bisogno di chiamarla solo una volta

203
00:03:21,030 --> 00:03:21,040
quando abbiamo davvero bisogno di chiamarla solo una volta
 

204
00:03:21,040 --> 00:03:23,190
quando abbiamo davvero bisogno di chiamarla solo una volta
e quindi passiamo il valore di ritorno a entrambe

205
00:03:23,190 --> 00:03:23,200
e quindi passiamo il valore di ritorno a entrambe
 

206
00:03:23,200 --> 00:03:24,789
e quindi passiamo il valore di ritorno a entrambe
queste istruzioni print

207
00:03:24,789 --> 00:03:24,799
queste istruzioni print
 

208
00:03:24,799 --> 00:03:26,630
queste istruzioni print
ora questo potrebbe andare bene per le normali

209
00:03:26,630 --> 00:03:26,640
ora questo potrebbe andare bene per le normali
 

210
00:03:26,640 --> 00:03:28,470
ora questo potrebbe andare bene per le normali
funzioni ma ricorda che è

211
00:03:28,470 --> 00:03:28,480
funzioni ma ricorda che è
 

212
00:03:28,480 --> 00:03:30,229
funzioni ma ricorda che è
costoso  funzione che impiega due

213
00:03:30,229 --> 00:03:30,239
costoso  funzione che impiega due
 

214
00:03:30,239 --> 00:03:32,550
costoso  funzione che impiega due
secondi per essere eseguita, quindi vogliamo limitare il più possibile il

215
00:03:32,550 --> 00:03:32,560
secondi per essere eseguita, quindi vogliamo limitare il più possibile il
 

216
00:03:32,560 --> 00:03:34,470
secondi per essere eseguita, quindi vogliamo limitare il più possibile il
numero di volte in cui chiamiamo questa

217
00:03:34,470 --> 00:03:34,480
numero di volte in cui chiamiamo questa
 

218
00:03:34,480 --> 00:03:37,110
numero di volte in cui chiamiamo questa
funzione risolviamo questi due

219
00:03:37,110 --> 00:03:37,120
funzione risolviamo questi due
 

220
00:03:37,120 --> 00:03:37,750
funzione risolviamo questi due

221
00:03:37,750 --> 00:03:37,760

 

222
00:03:37,760 --> 00:03:39,670

problemi memorizzando il risultato della nostra costosa

223
00:03:39,670 --> 00:03:39,680
problemi memorizzando il risultato della nostra costosa
 

224
00:03:39,680 --> 00:03:41,830
problemi memorizzando il risultato della nostra costosa
chiamata di funzione all'interno di una variabile in

225
00:03:41,830 --> 00:03:41,840
chiamata di funzione all'interno di una variabile in
 

226
00:03:41,840 --> 00:03:43,270
chiamata di funzione all'interno di una variabile in
modo da creare una nuova variabile in  la parte

227
00:03:43,270 --> 00:03:43,280
modo da creare una nuova variabile in  la parte
 

228
00:03:43,280 --> 00:03:44,869
modo da creare una nuova variabile in  la parte
superiore della nostra funzione

229
00:03:44,869 --> 00:03:44,879
superiore della nostra funzione
 

230
00:03:44,879 --> 00:03:50,470
superiore della nostra funzione
lo chiameremo risultato costoso

231
00:03:50,470 --> 00:03:50,480

 

232
00:03:50,480 --> 00:03:52,789

e lo imposteremo uguale alla nostra

233
00:03:52,789 --> 00:03:52,799
e lo imposteremo uguale alla nostra
 

234
00:03:52,799 --> 00:03:56,710
e lo imposteremo uguale alla nostra
chiamata di funzione costosa

235
00:03:56,710 --> 00:03:56,720

 

236
00:03:56,720 --> 00:03:58,550

quindi useremo la nostra variabile in tutte le nostre

237
00:03:58,550 --> 00:03:58,560
quindi useremo la nostra variabile in tutte le nostre
 

238
00:03:58,560 --> 00:04:07,509
quindi useremo la nostra variabile in tutte le nostre
istruzioni della riga di stampa

239
00:04:07,509 --> 00:04:07,519

 

240
00:04:07,519 --> 00:04:09,509

ora questo risolve il nostro

241
00:04:09,509 --> 00:04:09,519
ora questo risolve il nostro
 

242
00:04:09,519 --> 00:04:11,670
ora questo risolve il nostro
problema di duplicazione ma ora ne abbiamo un altro  problema,

243
00:04:11,670 --> 00:04:11,680
problema di duplicazione ma ora ne abbiamo un altro  problema,
 

244
00:04:11,680 --> 00:04:13,910
problema di duplicazione ma ora ne abbiamo un altro  problema,
chiameremo la nostra funzione costosa in

245
00:04:13,910 --> 00:04:13,920
chiameremo la nostra funzione costosa in
 

246
00:04:13,920 --> 00:04:15,429
chiameremo la nostra funzione costosa in
ogni singolo caso

247
00:04:15,429 --> 00:04:15,439
ogni singolo caso
 

248
00:04:15,439 --> 00:04:17,509
ogni singolo caso
qui in alto, non importa cosa viene

249
00:04:17,509 --> 00:04:17,519
qui in alto, non importa cosa viene
 

250
00:04:17,519 --> 00:04:18,629
qui in alto, non importa cosa viene
eseguito di seguito

251
00:04:18,629 --> 00:04:18,639
eseguito di seguito
 

252
00:04:18,639 --> 00:04:20,310
eseguito di seguito
, chiameremo la nostra

253
00:04:20,310 --> 00:04:20,320
, chiameremo la nostra
 

254
00:04:20,320 --> 00:04:22,870
, chiameremo la nostra
funzione costosa ma qui puoi vederlo se

255
00:04:22,870 --> 00:04:22,880
funzione costosa ma qui puoi vederlo se
 

256
00:04:22,880 --> 00:04:24,390
funzione costosa ma qui puoi vederlo se
il  il numero è 3

257
00:04:24,390 --> 00:04:24,400
il  il numero è 3
 

258
00:04:24,400 --> 00:04:26,070
il  il numero è 3
non abbiamo bisogno della nostra costosa funzione

259
00:04:26,070 --> 00:04:26,080
non abbiamo bisogno della nostra costosa funzione
 

260
00:04:26,080 --> 00:04:27,430
non abbiamo bisogno della nostra costosa funzione
perché

261
00:04:27,430 --> 00:04:27,440
perché
 

262
00:04:27,440 --> 00:04:30,310
perché
stampiamo semplicemente questo testo quello che vogliamo è

263
00:04:30,310 --> 00:04:30,320
stampiamo semplicemente questo testo quello che vogliamo è
 

264
00:04:30,320 --> 00:04:32,310
stampiamo semplicemente questo testo quello che vogliamo è
definire il nostro codice in un posto

265
00:04:32,310 --> 00:04:32,320
definire il nostro codice in un posto
 

266
00:04:32,320 --> 00:04:35,270
definire il nostro codice in un posto
ma eseguirlo solo quando necessario quindi

267
00:04:35,270 --> 00:04:35,280
ma eseguirlo solo quando necessario quindi
 

268
00:04:35,280 --> 00:04:37,189
ma eseguirlo solo quando necessario quindi
proviamo a refactoring

269
00:04:37,189 --> 00:04:37,199
proviamo a refactoring
 

270
00:04:37,199 --> 00:04:39,749
proviamo a refactoring
usando le chiusure torniamo

271
00:04:39,749 --> 00:04:39,759
usando le chiusure torniamo
 

272
00:04:39,759 --> 00:04:41,030
usando le chiusure torniamo
all'inizio  del nostro programma

273
00:04:41,030 --> 00:04:41,040
all'inizio  del nostro programma
 

274
00:04:41,040 --> 00:04:43,270
all'inizio  del nostro programma
e invece di definire questa costosa

275
00:04:43,270 --> 00:04:43,280
e invece di definire questa costosa
 

276
00:04:43,280 --> 00:04:44,550
e invece di definire questa costosa
variabile di risultato

277
00:04:44,550 --> 00:04:44,560
variabile di risultato
 

278
00:04:44,560 --> 00:04:48,150
variabile di risultato
definiremo una chiusura

279
00:04:48,150 --> 00:04:48,160

 

280
00:04:48,160 --> 00:04:50,310

qui abbiamo una variabile chiamata

281
00:04:50,310 --> 00:04:50,320
qui abbiamo una variabile chiamata
 

282
00:04:50,320 --> 00:04:52,550
qui abbiamo una variabile chiamata
chiusura costosa che è uguale alla

283
00:04:52,550 --> 00:04:52,560
chiusura costosa che è uguale alla
 

284
00:04:52,560 --> 00:04:55,030
chiusura costosa che è uguale alla
nostra chiusura ora ricorda che le chiusure sono

285
00:04:55,030 --> 00:04:55,040
nostra chiusura ora ricorda che le chiusure sono
 

286
00:04:55,040 --> 00:04:56,469
nostra chiusura ora ricorda che le chiusure sono
funzioni anonime

287
00:04:56,469 --> 00:04:56,479
funzioni anonime
 

288
00:04:56,479 --> 00:04:58,390
funzioni anonime
e la differenza tra una chiusura e

289
00:04:58,390 --> 00:04:58,400
e la differenza tra una chiusura e
 

290
00:04:58,400 --> 00:05:00,230
e la differenza tra una chiusura e
una funzione o almeno il  la principale differenza visiva

291
00:05:00,230 --> 00:05:00,240
una funzione o almeno il  la principale differenza visiva
 

292
00:05:00,240 --> 00:05:00,870
una funzione o almeno il  la principale differenza visiva

293
00:05:00,870 --> 00:05:00,880

 

294
00:05:00,880 --> 00:05:03,029

è invece che i parametri di input sono

295
00:05:03,029 --> 00:05:03,039
è invece che i parametri di input sono
 

296
00:05:03,039 --> 00:05:04,629
è invece che i parametri di input sono
all'interno di

297
00:05:04,629 --> 00:05:04,639
all'interno di
 

298
00:05:04,639 --> 00:05:06,790
all'interno di
parentesi sono all'interno di questi tubi verticali

299
00:05:06,790 --> 00:05:06,800
parentesi sono all'interno di questi tubi verticali
 

300
00:05:06,800 --> 00:05:07,749
parentesi sono all'interno di questi tubi verticali
quindi qui abbiamo un

301
00:05:07,749 --> 00:05:07,759
quindi qui abbiamo un
 

302
00:05:07,759 --> 00:05:10,230
quindi qui abbiamo un
parametro di input che è num seguito da

303
00:05:10,230 --> 00:05:10,240
parametro di input che è num seguito da
 

304
00:05:10,240 --> 00:05:10,950
parametro di input che è num seguito da
parentesi

305
00:05:10,950 --> 00:05:10,960
parentesi
 

306
00:05:10,960 --> 00:05:13,590
parentesi
che tengono il corpo della nostra chiusura e

307
00:05:13,590 --> 00:05:13,600
che tengono il corpo della nostra chiusura e
 

308
00:05:13,600 --> 00:05:14,790
che tengono il corpo della nostra chiusura e
se la nostra chiusura era solo

309
00:05:14,790 --> 00:05:14,800
se la nostra chiusura era solo
 

310
00:05:14,800 --> 00:05:16,629
se la nostra chiusura era solo
una linea allora  non abbiamo nemmeno bisogno delle

311
00:05:16,629 --> 00:05:16,639
una linea allora  non abbiamo nemmeno bisogno delle
 

312
00:05:16,639 --> 00:05:19,189
una linea allora  non abbiamo nemmeno bisogno delle
parentesi quindi all'interno del nostro corpo di chiusura

313
00:05:19,189 --> 00:05:19,199
parentesi quindi all'interno del nostro corpo di chiusura
 

314
00:05:19,199 --> 00:05:21,909
parentesi quindi all'interno del nostro corpo di chiusura
eseguiamo il nostro costoso calcolo e

315
00:05:21,909 --> 00:05:21,919
eseguiamo il nostro costoso calcolo e
 

316
00:05:21,919 --> 00:05:22,629
eseguiamo il nostro costoso calcolo e
poi

317
00:05:22,629 --> 00:05:22,639
poi
 

318
00:05:22,639 --> 00:05:25,990
poi
restituiamo num finalmente alla fine abbiamo bisogno di

319
00:05:25,990 --> 00:05:26,000
restituiamo num finalmente alla fine abbiamo bisogno di
 

320
00:05:26,000 --> 00:05:28,790
restituiamo num finalmente alla fine abbiamo bisogno di
questo semico  lon qui per concludere la

321
00:05:28,790 --> 00:05:28,800
questo semico  lon qui per concludere la
 

322
00:05:28,800 --> 00:05:29,830
questo semico  lon qui per concludere la
dichiarazione let

323
00:05:29,830 --> 00:05:29,840
dichiarazione let
 

324
00:05:29,840 --> 00:05:31,830
dichiarazione let
nota che la nostra costosa variabile di chiusura

325
00:05:31,830 --> 00:05:31,840
nota che la nostra costosa variabile di chiusura
 

326
00:05:31,840 --> 00:05:34,070
nota che la nostra costosa variabile di chiusura
non sta memorizzando il valore di ritorno della nostra

327
00:05:34,070 --> 00:05:34,080
non sta memorizzando il valore di ritorno della nostra
 

328
00:05:34,080 --> 00:05:34,870
non sta memorizzando il valore di ritorno della nostra
chiusura,

329
00:05:34,870 --> 00:05:34,880
chiusura,
 

330
00:05:34,880 --> 00:05:37,189
chiusura,
piuttosto sta memorizzando la chiusura stessa

331
00:05:37,189 --> 00:05:37,199
piuttosto sta memorizzando la chiusura stessa
 

332
00:05:37,199 --> 00:05:39,590
piuttosto sta memorizzando la chiusura stessa
nota anche che il corpo della nostra chiusura

333
00:05:39,590 --> 00:05:39,600
nota anche che il corpo della nostra chiusura
 

334
00:05:39,600 --> 00:05:41,990
nota anche che il corpo della nostra chiusura
è identico al corpo della nostra

335
00:05:41,990 --> 00:05:42,000
è identico al corpo della nostra
 

336
00:05:42,000 --> 00:05:43,670
è identico al corpo della nostra
costosa funzione

337
00:05:43,670 --> 00:05:43,680
costosa funzione
 

338
00:05:43,680 --> 00:05:46,230
costosa funzione
definita qui ora  che la nostra chiusura è definita

339
00:05:46,230 --> 00:05:46,240
definita qui ora  che la nostra chiusura è definita
 

340
00:05:46,240 --> 00:05:47,670
definita qui ora  che la nostra chiusura è definita
possiamo chiamarla all'interno delle

341
00:05:47,670 --> 00:05:47,680
possiamo chiamarla all'interno delle
 

342
00:05:47,680 --> 00:05:54,550
possiamo chiamarla all'interno delle
nostre istruzioni della riga di stampa

343
00:05:54,550 --> 00:05:54,560

 

344
00:05:54,560 --> 00:05:56,230

come puoi vedere la sintassi per chiamare la

345
00:05:56,230 --> 00:05:56,240
come puoi vedere la sintassi per chiamare la
 

346
00:05:56,240 --> 00:05:58,629
come puoi vedere la sintassi per chiamare la
nostra chiusura è simile alla sintassi per

347
00:05:58,629 --> 00:05:58,639
nostra chiusura è simile alla sintassi per
 

348
00:05:58,639 --> 00:06:00,150
nostra chiusura è simile alla sintassi per
chiamare una

349
00:06:00,150 --> 00:06:00,160
chiamare una
 

350
00:06:00,160 --> 00:06:02,469
chiamare una
funzione specifichiamo il nome della nostra variabile che contiene la

351
00:06:02,469 --> 00:06:02,479
funzione specifichiamo il nome della nostra variabile che contiene la
 

352
00:06:02,479 --> 00:06:03,430
funzione specifichiamo il nome della nostra variabile che contiene la
nostra chiusura

353
00:06:03,430 --> 00:06:03,440
nostra chiusura
 

354
00:06:03,440 --> 00:06:06,150
nostra chiusura
seguita da parentesi e quindi passiamo

355
00:06:06,150 --> 00:06:06,160
seguita da parentesi e quindi passiamo
 

356
00:06:06,160 --> 00:06:07,590
seguita da parentesi e quindi passiamo
nel  parametri di input

357
00:06:07,590 --> 00:06:07,600
nel  parametri di input
 

358
00:06:07,600 --> 00:06:09,590
nel  parametri di input
ora la nostra logica è definita in un posto

359
00:06:09,590 --> 00:06:09,600
ora la nostra logica è definita in un posto
 

360
00:06:09,600 --> 00:06:11,189
ora la nostra logica è definita in un posto
e chiamiamo la nostra costosa

361
00:06:11,189 --> 00:06:11,199
e chiamiamo la nostra costosa
 

362
00:06:11,199 --> 00:06:12,150
e chiamiamo la nostra costosa
operazione solo

363
00:06:12,150 --> 00:06:12,160
operazione solo
 

364
00:06:12,160 --> 00:06:14,550
operazione solo
quando necessario, ma siamo tornati con un vecchio

365
00:06:14,550 --> 00:06:14,560
quando necessario, ma siamo tornati con un vecchio
 

366
00:06:14,560 --> 00:06:15,749
quando necessario, ma siamo tornati con un vecchio
problema che è che

367
00:06:15,749 --> 00:06:15,759
problema che è che
 

368
00:06:15,759 --> 00:06:17,670
problema che è che
in questo blocco if stiamo chiamando la nostra

369
00:06:17,670 --> 00:06:17,680
in questo blocco if stiamo chiamando la nostra
 

370
00:06:17,680 --> 00:06:19,110
in questo blocco if stiamo chiamando la nostra
costosa operazione

371
00:06:19,110 --> 00:06:19,120
costosa operazione
 

372
00:06:19,120 --> 00:06:21,830
costosa operazione
due volte, il che non va bene  ora potremmo risolvere

373
00:06:21,830 --> 00:06:21,840
due volte, il che non va bene  ora potremmo risolvere
 

374
00:06:21,840 --> 00:06:23,590
due volte, il che non va bene  ora potremmo risolvere
questo problema memorizzando il risultato della

375
00:06:23,590 --> 00:06:23,600
questo problema memorizzando il risultato della
 

376
00:06:23,600 --> 00:06:25,189
questo problema memorizzando il risultato della
nostra costosa chiamata di chiusura

377
00:06:25,189 --> 00:06:25,199
nostra costosa chiamata di chiusura
 

378
00:06:25,199 --> 00:06:27,350
nostra costosa chiamata di chiusura
in cima a questa istruzione if ma

379
00:06:27,350 --> 00:06:27,360
in cima a questa istruzione if ma
 

380
00:06:27,360 --> 00:06:28,710
in cima a questa istruzione if ma
c'è un altro modo in cui potremmo risolvere questo

381
00:06:28,710 --> 00:06:28,720
c'è un altro modo in cui potremmo risolvere questo
 

382
00:06:28,720 --> 00:06:29,270
c'è un altro modo in cui potremmo risolvere questo
problema

383
00:06:29,270 --> 00:06:29,280
problema
 

384
00:06:29,280 --> 00:06:31,670
problema
che faremo  parlarne un po'

385
00:06:31,670 --> 00:06:31,680
che faremo  parlarne un po'
 

386
00:06:31,680 --> 00:06:33,430
che faremo  parlarne un po'
prima di risolvere il problema

387
00:06:33,430 --> 00:06:33,440
prima di risolvere il problema
 

388
00:06:33,440 --> 00:06:34,870
prima di risolvere il problema
potresti aver notato che non

389
00:06:34,870 --> 00:06:34,880
potresti aver notato che non
 

390
00:06:34,880 --> 00:06:36,629
potresti aver notato che non
dovevamo annotare il tipo del

391
00:06:36,629 --> 00:06:36,639
dovevamo annotare il tipo del
 

392
00:06:36,639 --> 00:06:37,270
dovevamo annotare il tipo del

393
00:06:37,270 --> 00:06:37,280

 

394
00:06:37,280 --> 00:06:39,350

parametro di input della nostra chiusura né dovevamo

395
00:06:39,350 --> 00:06:39,360
parametro di input della nostra chiusura né dovevamo
 

396
00:06:39,360 --> 00:06:40,710
parametro di input della nostra chiusura né dovevamo
annotare il valore di ritorno della nostra chiusura

397
00:06:40,710 --> 00:06:40,720
annotare il valore di ritorno della nostra chiusura
 

398
00:06:40,720 --> 00:06:42,950
annotare il valore di ritorno della nostra chiusura
per le funzioni regolari

399
00:06:42,950 --> 00:06:42,960
per le funzioni regolari
 

400
00:06:42,960 --> 00:06:44,790
per le funzioni regolari
avremmo dovuto specificare il tipo  dei nostri

401
00:06:44,790 --> 00:06:44,800
avremmo dovuto specificare il tipo  dei nostri
 

402
00:06:44,800 --> 00:06:45,909
avremmo dovuto specificare il tipo  dei nostri
parametri di input

403
00:06:45,909 --> 00:06:45,919
parametri di input
 

404
00:06:45,919 --> 00:06:48,070
parametri di input
e del tipo dei nostri valori restituiti e

405
00:06:48,070 --> 00:06:48,080
e del tipo dei nostri valori restituiti e
 

406
00:06:48,080 --> 00:06:49,990
e del tipo dei nostri valori restituiti e
questo perché le funzioni fanno parte di

407
00:06:49,990 --> 00:06:50,000
questo perché le funzioni fanno parte di
 

408
00:06:50,000 --> 00:06:51,350
questo perché le funzioni fanno parte di
un'interfaccia esplicita

409
00:06:51,350 --> 00:06:51,360
un'interfaccia esplicita
 

410
00:06:51,360 --> 00:06:53,749
un'interfaccia esplicita
esposta agli utenti, quindi concordare sui

411
00:06:53,749 --> 00:06:53,759
esposta agli utenti, quindi concordare sui
 

412
00:06:53,759 --> 00:06:55,110
esposta agli utenti, quindi concordare sui
tipi passati

413
00:06:55,110 --> 00:06:55,120
tipi passati
 

414
00:06:55,120 --> 00:06:57,830
tipi passati
e restituiti è importante le chiusure

415
00:06:57,830 --> 00:06:57,840
e restituiti è importante le chiusure
 

416
00:06:57,840 --> 00:06:59,510
e restituiti è importante le chiusure
d'altra parte sono generalmente brevi e

417
00:06:59,510 --> 00:06:59,520
d'altra parte sono generalmente brevi e
 

418
00:06:59,520 --> 00:07:02,150
d'altra parte sono generalmente brevi e
rilevanti solo all'interno di un ristretto  contesto in modo che

419
00:07:02,150 --> 00:07:02,160
rilevanti solo all'interno di un ristretto  contesto in modo che
 

420
00:07:02,160 --> 00:07:02,550
rilevanti solo all'interno di un ristretto  contesto in modo che
il

421
00:07:02,550 --> 00:07:02,560
il
 

422
00:07:02,560 --> 00:07:04,870
il
compilatore sia in grado di determinare i

423
00:07:04,870 --> 00:07:04,880
compilatore sia in grado di determinare i
 

424
00:07:04,880 --> 00:07:05,990
compilatore sia in grado di determinare i
tipi di parametri di input

425
00:07:05,990 --> 00:07:06,000
tipi di parametri di input
 

426
00:07:06,000 --> 00:07:08,230
tipi di parametri di input
e i tipi restituiti questo è simile a

427
00:07:08,230 --> 00:07:08,240
e i tipi restituiti questo è simile a
 

428
00:07:08,240 --> 00:07:10,150
e i tipi restituiti questo è simile a
come il compilatore è in grado di determinare

429
00:07:10,150 --> 00:07:10,160
come il compilatore è in grado di determinare
 

430
00:07:10,160 --> 00:07:12,070
come il compilatore è in grado di determinare
i tipi della maggior parte delle variabili

431
00:07:12,070 --> 00:07:12,080
i tipi della maggior parte delle variabili
 

432
00:07:12,080 --> 00:07:13,749
i tipi della maggior parte delle variabili
nota che potremmo rendere espliciti i tipi

433
00:07:13,749 --> 00:07:13,759
nota che potremmo rendere espliciti i tipi
 

434
00:07:13,759 --> 00:07:17,430
nota che potremmo rendere espliciti i tipi
se vogliamo così

435
00:07:17,430 --> 00:07:17,440
se vogliamo così
 

436
00:07:17,440 --> 00:07:19,270
se vogliamo così
questo rende espliciti i tipi  a

437
00:07:19,270 --> 00:07:19,280
questo rende espliciti i tipi  a
 

438
00:07:19,280 --> 00:07:21,350
questo rende espliciti i tipi  a
costo di essere più prolissi si

439
00:07:21,350 --> 00:07:21,360
costo di essere più prolissi si
 

440
00:07:21,360 --> 00:07:23,189
costo di essere più prolissi si
noti che le definizioni di chiusura potrebbero

441
00:07:23,189 --> 00:07:23,199
noti che le definizioni di chiusura potrebbero
 

442
00:07:23,199 --> 00:07:25,350
noti che le definizioni di chiusura potrebbero
avere solo un tipo concreto dedotto

443
00:07:25,350 --> 00:07:25,360
avere solo un tipo concreto dedotto
 

444
00:07:25,360 --> 00:07:27,749
avere solo un tipo concreto dedotto
per ogni parametro di input, ad esempio

445
00:07:27,749 --> 00:07:27,759
per ogni parametro di input, ad esempio
 

446
00:07:27,759 --> 00:07:29,110
per ogni parametro di input, ad esempio
qui  hanno una variabile chiamata

447
00:07:29,110 --> 00:07:29,120
qui  hanno una variabile chiamata
 

448
00:07:29,120 --> 00:07:31,189
qui  hanno una variabile chiamata
esempio chiusura che è uguale a una

449
00:07:31,189 --> 00:07:31,199
esempio chiusura che è uguale a una
 

450
00:07:31,199 --> 00:07:33,270
esempio chiusura che è uguale a una
chiusura che accetta x

451
00:07:33,270 --> 00:07:33,280
chiusura che accetta x
 

452
00:07:33,280 --> 00:07:36,150
chiusura che accetta x
e quindi restituisce x ora perché la

453
00:07:36,150 --> 00:07:36,160
e quindi restituisce x ora perché la
 

454
00:07:36,160 --> 00:07:37,589
e quindi restituisce x ora perché la
chiusura è usata

455
00:07:37,589 --> 00:07:37,599
chiusura è usata
 

456
00:07:37,599 --> 00:07:40,309
chiusura è usata
qui alla riga 26 con una stringa il

457
00:07:40,309 --> 00:07:40,319
qui alla riga 26 con una stringa il
 

458
00:07:40,319 --> 00:07:41,670
qui alla riga 26 con una stringa il
compilatore deduce

459
00:07:41,670 --> 00:07:41,680
compilatore deduce
 

460
00:07:41,680 --> 00:07:43,830
compilatore deduce
che il tipo di parametro di input è una

461
00:07:43,830 --> 00:07:43,840
che il tipo di parametro di input è una
 

462
00:07:43,840 --> 00:07:46,230
che il tipo di parametro di input è una
stringa ma poi subito sotto sulla riga

463
00:07:46,230 --> 00:07:46,240
stringa ma poi subito sotto sulla riga
 

464
00:07:46,240 --> 00:07:47,270
stringa ma poi subito sotto sulla riga
27

465
00:07:47,270 --> 00:07:47,280
27
 

466
00:07:47,280 --> 00:07:50,309
27
chiamiamo il nostro esempio variabile di chiusura

467
00:07:50,309 --> 00:07:50,319
chiamiamo il nostro esempio variabile di chiusura
 

468
00:07:50,319 --> 00:07:53,110
chiamiamo il nostro esempio variabile di chiusura
con un numero intero ora il compilatore si

469
00:07:53,110 --> 00:07:53,120
con un numero intero ora il compilatore si
 

470
00:07:53,120 --> 00:07:53,830
con un numero intero ora il compilatore si
lamenterà

471
00:07:53,830 --> 00:07:53,840
lamenterà
 

472
00:07:53,840 --> 00:07:55,350
lamenterà
e la freccia dirà che abbiamo

473
00:07:55,350 --> 00:07:55,360
e la freccia dirà che abbiamo
 

474
00:07:55,360 --> 00:07:57,510
e la freccia dirà che abbiamo
tipi non corrispondenti ci aspettiamo una

475
00:07:57,510 --> 00:07:57,520
tipi non corrispondenti ci aspettiamo una
 

476
00:07:57,520 --> 00:07:58,550
tipi non corrispondenti ci aspettiamo una
stringa ma otteniamo

477
00:07:58,550 --> 00:07:58,560
stringa ma otteniamo
 

478
00:07:58,560 --> 00:08:00,950
stringa ma otteniamo
un intero quindi il modo in cui il compilatore funziona

479
00:08:00,950 --> 00:08:00,960
un intero quindi il modo in cui il compilatore funziona
 

480
00:08:00,960 --> 00:08:02,869
un intero quindi il modo in cui il compilatore funziona
è che il primo tipo è passato al nostro

481
00:08:02,869 --> 00:08:02,879
è che il primo tipo è passato al nostro
 

482
00:08:02,879 --> 00:08:03,670
è che il primo tipo è passato al nostro
la chiusura

483
00:08:03,670 --> 00:08:03,680
la chiusura
 

484
00:08:03,680 --> 00:08:06,309
la chiusura
sarà il tipo concreto dei nostri

485
00:08:06,309 --> 00:08:06,319
sarà il tipo concreto dei nostri
 

486
00:08:06,319 --> 00:08:07,189
sarà il tipo concreto dei nostri
parametri di input

487
00:08:07,189 --> 00:08:07,199
parametri di input
 

488
00:08:07,199 --> 00:08:08,790
parametri di input
ora torniamo al problema di

489
00:08:08,790 --> 00:08:08,800
ora torniamo al problema di
 

490
00:08:08,800 --> 00:08:11,029
ora torniamo al problema di
chiamare due volte la nostra costosa chiusura

491
00:08:11,029 --> 00:08:11,039
chiamare due volte la nostra costosa chiusura
 

492
00:08:11,039 --> 00:08:13,830
chiamare due volte la nostra costosa chiusura
in questo blocco if potremmo risolvere nuovamente

493
00:08:13,830 --> 00:08:13,840
in questo blocco if potremmo risolvere nuovamente
 

494
00:08:13,840 --> 00:08:15,830
in questo blocco if potremmo risolvere nuovamente
questa funzione creando una variabile nella

495
00:08:15,830 --> 00:08:15,840
questa funzione creando una variabile nella
 

496
00:08:15,840 --> 00:08:16,710
questa funzione creando una variabile nella
parte superiore del nostro

497
00:08:16,710 --> 00:08:16,720
parte superiore del nostro
 

498
00:08:16,720 --> 00:08:18,950
parte superiore del nostro
blocco if e semplicemente memorizzando il risultato di

499
00:08:18,950 --> 00:08:18,960
blocco if e semplicemente memorizzando il risultato di
 

500
00:08:18,960 --> 00:08:20,309
blocco if e semplicemente memorizzando il risultato di
la nostra costosa chiusura

501
00:08:20,309 --> 00:08:20,319
la nostra costosa chiusura
 

502
00:08:20,319 --> 00:08:22,309
la nostra costosa chiusura
e quindi l'utilizzo di quel risultato in entrambe

503
00:08:22,309 --> 00:08:22,319
e quindi l'utilizzo di quel risultato in entrambe
 

504
00:08:22,319 --> 00:08:23,990
e quindi l'utilizzo di quel risultato in entrambe
queste istruzioni della riga di stampa,

505
00:08:23,990 --> 00:08:24,000
queste istruzioni della riga di stampa,
 

506
00:08:24,000 --> 00:08:25,830
queste istruzioni della riga di stampa,
ma faremo qualcos'altro,

507
00:08:25,830 --> 00:08:25,840
ma faremo qualcos'altro,
 

508
00:08:25,840 --> 00:08:28,070
ma faremo qualcos'altro,
quello che faremo è usare il modello

509
00:08:28,070 --> 00:08:28,080
quello che faremo è usare il modello
 

510
00:08:28,080 --> 00:08:28,869
quello che faremo è usare il modello

511
00:08:28,869 --> 00:08:28,879

 

512
00:08:28,879 --> 00:08:31,670

di memorizzazione creando un str  uct che manterrà la nostra

513
00:08:31,670 --> 00:08:31,680
di memorizzazione creando un str  uct che manterrà la nostra
 

514
00:08:31,680 --> 00:08:32,630
di memorizzazione creando un str  uct che manterrà la nostra
chiusura

515
00:08:32,630 --> 00:08:32,640
chiusura
 

516
00:08:32,640 --> 00:08:35,430
chiusura
e il risultato della nostra chiusura qui ho

517
00:08:35,430 --> 00:08:35,440
e il risultato della nostra chiusura qui ho
 

518
00:08:35,440 --> 00:08:37,110
e il risultato della nostra chiusura qui ho
creato una struttura chiamata

519
00:08:37,110 --> 00:08:37,120
creato una struttura chiamata
 

520
00:08:37,120 --> 00:08:40,070
creato una struttura chiamata
cacher proprio sopra la nostra funzione di generazione dell'allenamento

521
00:08:40,070 --> 00:08:40,080
cacher proprio sopra la nostra funzione di generazione dell'allenamento
 

522
00:08:40,080 --> 00:08:40,870
cacher proprio sopra la nostra funzione di generazione dell'allenamento

523
00:08:40,870 --> 00:08:40,880

 

524
00:08:40,880 --> 00:08:43,670

ora per definire le enumerazioni delle strutture o

525
00:08:43,670 --> 00:08:43,680
ora per definire le enumerazioni delle strutture o
 

526
00:08:43,680 --> 00:08:45,269
ora per definire le enumerazioni delle strutture o
anche i parametri di funzione

527
00:08:45,269 --> 00:08:45,279
anche i parametri di funzione
 

528
00:08:45,279 --> 00:08:47,910
anche i parametri di funzione
che usano le chiusure di cui abbiamo bisogno per usare

529
00:08:47,910 --> 00:08:47,920
che usano le chiusure di cui abbiamo bisogno per usare
 

530
00:08:47,920 --> 00:08:48,870
che usano le chiusure di cui abbiamo bisogno per usare
generici

531
00:08:48,870 --> 00:08:48,880
generici
 

532
00:08:48,880 --> 00:08:51,590
generici
e limiti di tratto qui la nostra cache  istruire

533
00:08:51,590 --> 00:08:51,600
e limiti di tratto qui la nostra cache  istruire
 

534
00:08:51,600 --> 00:08:52,230
e limiti di tratto qui la nostra cache  istruire
sta usando

535
00:08:52,230 --> 00:08:52,240
sta usando
 

536
00:08:52,240 --> 00:08:55,430
sta usando
un generico chiamato t e di seguito definiamo un

537
00:08:55,430 --> 00:08:55,440
un generico chiamato t e di seguito definiamo un
 

538
00:08:55,440 --> 00:08:56,949
un generico chiamato t e di seguito definiamo un
tratto legato a generico

539
00:08:56,949 --> 00:08:56,959
tratto legato a generico
 

540
00:08:56,959 --> 00:08:59,590
tratto legato a generico
e il tratto che stiamo usando è fn abbreviazione

541
00:08:59,590 --> 00:08:59,600
e il tratto che stiamo usando è fn abbreviazione
 

542
00:08:59,600 --> 00:09:00,150
e il tratto che stiamo usando è fn abbreviazione
di

543
00:09:00,150 --> 00:09:00,160
di
 

544
00:09:00,160 --> 00:09:02,070
di
funzione ora senza entrare in quale sia il

545
00:09:02,070 --> 00:09:02,080
funzione ora senza entrare in quale sia il
 

546
00:09:02,080 --> 00:09:04,310
funzione ora senza entrare in quale sia il
tratto fn sappi solo che è fornito

547
00:09:04,310 --> 00:09:04,320
tratto fn sappi solo che è fornito
 

548
00:09:04,320 --> 00:09:05,750
tratto fn sappi solo che è fornito
dalla libreria standard

549
00:09:05,750 --> 00:09:05,760
dalla libreria standard
 

550
00:09:05,760 --> 00:09:07,829
dalla libreria standard
e tutte le chiusure implementano  uno dei

551
00:09:07,829 --> 00:09:07,839
e tutte le chiusure implementano  uno dei
 

552
00:09:07,839 --> 00:09:09,670
e tutte le chiusure implementano  uno dei
tre tratti fn

553
00:09:09,670 --> 00:09:09,680
tre tratti fn
 

554
00:09:09,680 --> 00:09:12,389
tre tratti fn
uno di questi è fn l'altro è fn

555
00:09:12,389 --> 00:09:12,399
uno di questi è fn l'altro è fn
 

556
00:09:12,399 --> 00:09:13,350
uno di questi è fn l'altro è fn
muto

557
00:09:13,350 --> 00:09:13,360
muto
 

558
00:09:13,360 --> 00:09:17,269
muto
e l'ultimo è fn una volta

559
00:09:17,269 --> 00:09:17,279
e l'ultimo è fn una volta
 

560
00:09:17,279 --> 00:09:19,110
e l'ultimo è fn una volta
che analizzeremo le differenze tra

561
00:09:19,110 --> 00:09:19,120
che analizzeremo le differenze tra
 

562
00:09:19,120 --> 00:09:21,190
che analizzeremo le differenze tra
questi tre tratti tra poco

563
00:09:21,190 --> 00:09:21,200
questi tre tratti tra poco
 

564
00:09:21,200 --> 00:09:23,190
questi tre tratti tra poco
qui abbiamo aggiunto i tipi al vassoio fn per

565
00:09:23,190 --> 00:09:23,200
qui abbiamo aggiunto i tipi al vassoio fn per
 

566
00:09:23,200 --> 00:09:25,030
qui abbiamo aggiunto i tipi al vassoio fn per
rappresentare il  parametri

567
00:09:25,030 --> 00:09:25,040
rappresentare il  parametri
 

568
00:09:25,040 --> 00:09:27,509
rappresentare il  parametri
di input della nostra chiusura che sarà un

569
00:09:27,509 --> 00:09:27,519
di input della nostra chiusura che sarà un
 

570
00:09:27,519 --> 00:09:29,430
di input della nostra chiusura che sarà un
intero a 32 bit senza segno

571
00:09:29,430 --> 00:09:29,440
intero a 32 bit senza segno
 

572
00:09:29,440 --> 00:09:31,670
intero a 32 bit senza segno
e anche i parametri di output

573
00:09:31,670 --> 00:09:31,680
e anche i parametri di output
 

574
00:09:31,680 --> 00:09:32,630
e anche i parametri di output
che saranno di nuovo

575
00:09:32,630 --> 00:09:32,640
che saranno di nuovo
 

576
00:09:32,640 --> 00:09:35,269
che saranno di nuovo
un intero a 32 bit senza segno, quindi nel

577
00:09:35,269 --> 00:09:35,279
un intero a 32 bit senza segno, quindi nel
 

578
00:09:35,279 --> 00:09:37,190
un intero a 32 bit senza segno, quindi nel
corpo della nostra struttura abbiamo

579
00:09:37,190 --> 00:09:37,200
corpo della nostra struttura abbiamo
 

580
00:09:37,200 --> 00:09:39,509
corpo della nostra struttura abbiamo
t  due campi il primo è il calcolo

581
00:09:39,509 --> 00:09:39,519
t  due campi il primo è il calcolo
 

582
00:09:39,519 --> 00:09:41,350
t  due campi il primo è il calcolo
che memorizzerà il nostro tipo generico,

583
00:09:41,350 --> 00:09:41,360
che memorizzerà il nostro tipo generico,
 

584
00:09:41,360 --> 00:09:44,070
che memorizzerà il nostro tipo generico,
quindi il calcolo potrebbe essere qualsiasi chiusura che

585
00:09:44,070 --> 00:09:44,080
quindi il calcolo potrebbe essere qualsiasi chiusura che
 

586
00:09:44,080 --> 00:09:44,949
quindi il calcolo potrebbe essere qualsiasi chiusura che
soddisfi questo

587
00:09:44,949 --> 00:09:44,959
soddisfi questo
 

588
00:09:44,959 --> 00:09:48,310
soddisfi questo
vassoio legato qui, quindi abbiamo un

589
00:09:48,310 --> 00:09:48,320
vassoio legato qui, quindi abbiamo un
 

590
00:09:48,320 --> 00:09:50,710
vassoio legato qui, quindi abbiamo un
valore che sarà un

591
00:09:50,710 --> 00:09:50,720
valore che sarà un
 

592
00:09:50,720 --> 00:09:51,670
valore che sarà un

593
00:09:51,670 --> 00:09:51,680

 

594
00:09:51,680 --> 00:09:54,230

valore intero a 32 bit opzionale è facoltativo perché quando il

595
00:09:54,230 --> 00:09:54,240
valore intero a 32 bit opzionale è facoltativo perché quando il
 

596
00:09:54,240 --> 00:09:55,110
valore intero a 32 bit opzionale è facoltativo perché quando il
nostro cacher è

597
00:09:55,110 --> 00:09:55,120
nostro cacher è
 

598
00:09:55,120 --> 00:09:57,190
nostro cacher è
inizializzato  non sarà nessuno e

599
00:09:57,190 --> 00:09:57,200
inizializzato  non sarà nessuno e
 

600
00:09:57,200 --> 00:09:59,110
inizializzato  non sarà nessuno e
quindi una volta chiamato il nostro

601
00:09:59,110 --> 00:09:59,120
quindi una volta chiamato il nostro
 

602
00:09:59,120 --> 00:10:01,590
quindi una volta chiamato il nostro
calcolo memorizzeremo il valore restituito all'interno del

603
00:10:01,590 --> 00:10:01,600
calcolo memorizzeremo il valore restituito all'interno del
 

604
00:10:01,600 --> 00:10:02,870
calcolo memorizzeremo il valore restituito all'interno del
nostro campo valore

605
00:10:02,870 --> 00:10:02,880
nostro campo valore
 

606
00:10:02,880 --> 00:10:05,190
nostro campo valore
nota che le funzioni regolari

607
00:10:05,190 --> 00:10:05,200
nota che le funzioni regolari
 

608
00:10:05,200 --> 00:10:06,710
nota che le funzioni regolari
implementano anche questi tre

609
00:10:06,710 --> 00:10:06,720
implementano anche questi tre
 

610
00:10:06,720 --> 00:10:09,829
implementano anche questi tre
tratti fn in modo da poter memorizzare anche una funzione regolare

611
00:10:09,829 --> 00:10:09,839
tratti fn in modo da poter memorizzare anche una funzione regolare
 

612
00:10:09,839 --> 00:10:10,310
tratti fn in modo da poter memorizzare anche una funzione regolare

613
00:10:10,310 --> 00:10:10,320

 

614
00:10:10,320 --> 00:10:13,190

all'interno del nostro campo di calcolo

615
00:10:13,190 --> 00:10:13,200
all'interno del nostro campo di calcolo
 

616
00:10:13,200 --> 00:10:15,190
all'interno del nostro campo di calcolo
successivo i'  ll incollare nel

617
00:10:15,190 --> 00:10:15,200
successivo i'  ll incollare nel
 

618
00:10:15,200 --> 00:10:16,949
successivo i'  ll incollare nel
blocco di implementazione per una cache o struct

619
00:10:16,949 --> 00:10:16,959
blocco di implementazione per una cache o struct
 

620
00:10:16,959 --> 00:10:21,110
blocco di implementazione per una cache o struct
e ne parleremo

621
00:10:21,110 --> 00:10:21,120

 

622
00:10:21,120 --> 00:10:23,269

ok, esaminiamo questo abbiamo il nostro

623
00:10:23,269 --> 00:10:23,279
ok, esaminiamo questo abbiamo il nostro
 

624
00:10:23,279 --> 00:10:24,389
ok, esaminiamo questo abbiamo il nostro
blocco di implementazione

625
00:10:24,389 --> 00:10:24,399
blocco di implementazione
 

626
00:10:24,399 --> 00:10:27,110
blocco di implementazione
per cacher che ha lo stesso generico

627
00:10:27,110 --> 00:10:27,120
per cacher che ha lo stesso generico
 

628
00:10:27,120 --> 00:10:28,230
per cacher che ha lo stesso generico
e tratto legato

629
00:10:28,230 --> 00:10:28,240
e tratto legato
 

630
00:10:28,240 --> 00:10:30,630
e tratto legato
della nostra cache o struct e quindi la

631
00:10:30,630 --> 00:10:30,640
della nostra cache o struct e quindi la
 

632
00:10:30,640 --> 00:10:31,590
della nostra cache o struct e quindi la
prima funzione

633
00:10:31,590 --> 00:10:31,600
prima funzione
 

634
00:10:31,600 --> 00:10:34,150
prima funzione
all'interno è  chiamato nuovo nuovo è una

635
00:10:34,150 --> 00:10:34,160
all'interno è  chiamato nuovo nuovo è una
 

636
00:10:34,160 --> 00:10:35,750
all'interno è  chiamato nuovo nuovo è una
funzione di costruzione prende in un

637
00:10:35,750 --> 00:10:35,760
funzione di costruzione prende in un
 

638
00:10:35,760 --> 00:10:37,829
funzione di costruzione prende in un
calcolo che è di tipo t

639
00:10:37,829 --> 00:10:37,839
calcolo che è di tipo t
 

640
00:10:37,839 --> 00:10:39,910
calcolo che è di tipo t
nostra chiusura e quindi crea un nuovo

641
00:10:39,910 --> 00:10:39,920
nostra chiusura e quindi crea un nuovo
 

642
00:10:39,920 --> 00:10:41,190
nostra chiusura e quindi crea un nuovo
cacher passando

643
00:10:41,190 --> 00:10:41,200
cacher passando
 

644
00:10:41,200 --> 00:10:44,069
cacher passando
il calcolo e impostando il valore su

645
00:10:44,069 --> 00:10:44,079
il calcolo e impostando il valore su
 

646
00:10:44,079 --> 00:10:44,790
il calcolo e impostando il valore su
nessuno

647
00:10:44,790 --> 00:10:44,800
nessuno
 

648
00:10:44,800 --> 00:10:47,910
nessuno
quindi abbiamo il nostro metodo value ed è un

649
00:10:47,910 --> 00:10:47,920
quindi abbiamo il nostro metodo value ed è un
 

650
00:10:47,920 --> 00:10:49,670
quindi abbiamo il nostro metodo value ed è un
metodo perché il primo parametro

651
00:10:49,670 --> 00:10:49,680
metodo perché il primo parametro
 

652
00:10:49,680 --> 00:10:52,389
metodo perché il primo parametro
è un riferimento a sé e infatti

653
00:10:52,389 --> 00:10:52,399
è un riferimento a sé e infatti
 

654
00:10:52,399 --> 00:10:54,470
è un riferimento a sé e infatti
abbiamo un riferimento mutevole a sé

655
00:10:54,470 --> 00:10:54,480
abbiamo un riferimento mutevole a sé
 

656
00:10:54,480 --> 00:10:57,590
abbiamo un riferimento mutevole a sé
il parametro successivo è arg che è l'

657
00:10:57,590 --> 00:10:57,600
il parametro successivo è arg che è l'
 

658
00:10:57,600 --> 00:11:00,150
il parametro successivo è arg che è l'
argomento che passeremo alla nostra chiusura ed

659
00:11:00,150 --> 00:11:00,160
argomento che passeremo alla nostra chiusura ed
 

660
00:11:00,160 --> 00:11:02,550
argomento che passeremo alla nostra chiusura ed
è un 32 senza segno  -bit integer il

661
00:11:02,550 --> 00:11:02,560
è un 32 senza segno  -bit integer il
 

662
00:11:02,560 --> 00:11:05,110
è un 32 senza segno  -bit integer il
tipo restituito è anche un intero a 32 bit senza segno

663
00:11:05,110 --> 00:11:05,120
tipo restituito è anche un intero a 32 bit senza segno
 

664
00:11:05,120 --> 00:11:05,829
tipo restituito è anche un intero a 32 bit senza segno

665
00:11:05,829 --> 00:11:05,839

 

666
00:11:05,839 --> 00:11:08,069

all'interno del metodo value

667
00:11:08,069 --> 00:11:08,079
all'interno del metodo value
 

668
00:11:08,079 --> 00:11:09,590
all'interno del metodo value
faremo un'espressione di corrispondenza

669
00:11:09,590 --> 00:11:09,600
faremo un'espressione di corrispondenza
 

670
00:11:09,600 --> 00:11:12,710
faremo un'espressione di corrispondenza
sul valore self dot quindi controlliamo il

671
00:11:12,710 --> 00:11:13,829
sul valore self dot quindi controlliamo il
 

672
00:11:13,829 --> 00:11:13,839

 

673
00:11:13,839 --> 00:11:16,550

tipo self dot e ricordiamo che self.value è un

674
00:11:16,550 --> 00:11:16,560
tipo self dot e ricordiamo che self.value è un
 

675
00:11:16,560 --> 00:11:17,509
tipo self dot e ricordiamo che self.value è un
tipo facoltativo

676
00:11:17,509 --> 00:11:17,519
tipo facoltativo
 

677
00:11:17,519 --> 00:11:19,829
tipo facoltativo
e  quando creiamo per la prima volta il nostro cacher

678
00:11:19,829 --> 00:11:19,839
e  quando creiamo per la prima volta il nostro cacher
 

679
00:11:19,839 --> 00:11:21,269
e  quando creiamo per la prima volta il nostro cacher
sarà impostato su none

680
00:11:21,269 --> 00:11:21,279
sarà impostato su none
 

681
00:11:21,279 --> 00:11:24,310
sarà impostato su none
quindi eseguiremo questo ramo none

682
00:11:24,310 --> 00:11:24,320
quindi eseguiremo questo ramo none
 

683
00:11:24,320 --> 00:11:26,389
quindi eseguiremo questo ramo none
all'interno del braccio none stiamo creando una

684
00:11:26,389 --> 00:11:26,399
all'interno del braccio none stiamo creando una
 

685
00:11:26,399 --> 00:11:27,430
all'interno del braccio none stiamo creando una
variabile chiamata v

686
00:11:27,430 --> 00:11:27,440
variabile chiamata v
 

687
00:11:27,440 --> 00:11:29,590
variabile chiamata v
e impostandola uguale al risultato della

688
00:11:29,590 --> 00:11:29,600
e impostandola uguale al risultato della
 

689
00:11:29,600 --> 00:11:31,350
e impostandola uguale al risultato della
chiamata al nostro calcolo

690
00:11:31,350 --> 00:11:31,360
chiamata al nostro calcolo
 

691
00:11:31,360 --> 00:11:35,030
chiamata al nostro calcolo
chiusura e passando la variabile arg

692
00:11:35,030 --> 00:11:35,040
chiusura e passando la variabile arg
 

693
00:11:35,040 --> 00:11:37,110
chiusura e passando la variabile arg
quindi stiamo mutando il campo del valore

694
00:11:37,110 --> 00:11:37,120
quindi stiamo mutando il campo del valore
 

695
00:11:37,120 --> 00:11:38,710
quindi stiamo mutando il campo del valore
della cache o dell'istanza corrente

696
00:11:38,710 --> 00:11:38,720
della cache o dell'istanza corrente
 

697
00:11:38,720 --> 00:11:42,069
della cache o dell'istanza corrente
e lo impostiamo su un passaggio in v

698
00:11:42,069 --> 00:11:42,079
e lo impostiamo su un passaggio in v
 

699
00:11:42,079 --> 00:11:44,069
e lo impostiamo su un passaggio in v
questo è il punto in cui avviene la memorizzazione nella cache stiamo

700
00:11:44,069 --> 00:11:44,079
questo è il punto in cui avviene la memorizzazione nella cache stiamo
 

701
00:11:44,079 --> 00:11:45,829
questo è il punto in cui avviene la memorizzazione nella cache stiamo
memorizzando nella cache il valore restituito del nostro

702
00:11:45,829 --> 00:11:45,839
memorizzando nella cache il valore restituito del nostro
 

703
00:11:45,839 --> 00:11:46,949
memorizzando nella cache il valore restituito del nostro
calcolo

704
00:11:46,949 --> 00:11:46,959
calcolo
 

705
00:11:46,959 --> 00:11:49,110
calcolo
all'interno del campo del valore e quindi

706
00:11:49,110 --> 00:11:49,120
all'interno del campo del valore e quindi
 

707
00:11:49,120 --> 00:11:50,710
all'interno del campo del valore e quindi
semplicemente restituiamo

708
00:11:50,710 --> 00:11:50,720
semplicemente restituiamo
 

709
00:11:50,720 --> 00:11:53,190
semplicemente restituiamo
v next let  's usa il nostro denaro o struttura

710
00:11:53,190 --> 00:11:53,200
v next let  's usa il nostro denaro o struttura
 

711
00:11:53,200 --> 00:11:55,350
v next let  's usa il nostro denaro o struttura
all'interno della funzione genera allenamento,

712
00:11:55,350 --> 00:11:55,360
all'interno della funzione genera allenamento,
 

713
00:11:55,360 --> 00:11:57,430
all'interno della funzione genera allenamento,
ma prima di farlo eseguiamo prima il

714
00:11:57,430 --> 00:11:57,440
ma prima di farlo eseguiamo prima il
 

715
00:11:57,440 --> 00:12:03,509
ma prima di farlo eseguiamo prima il
nostro programma

716
00:12:03,509 --> 00:12:03,519

 

717
00:12:03,519 --> 00:12:05,590

come puoi vedere la nostra costosa chiusura è stata

718
00:12:05,590 --> 00:12:05,600
come puoi vedere la nostra costosa chiusura è stata
 

719
00:12:05,600 --> 00:12:06,710
come puoi vedere la nostra costosa chiusura è stata
chiamata due volte

720
00:12:06,710 --> 00:12:06,720
chiamata due volte
 

721
00:12:06,720 --> 00:12:08,949
chiamata due volte
una volta per calcolare il numero di flessioni

722
00:12:08,949 --> 00:12:08,959
una volta per calcolare il numero di flessioni
 

723
00:12:08,959 --> 00:12:10,550
una volta per calcolare il numero di flessioni
e la seconda volta per calcolare

724
00:12:10,550 --> 00:12:10,560
e la seconda volta per calcolare
 

725
00:12:10,560 --> 00:12:12,870
e la seconda volta per calcolare
il numero di  sit-up rendiamolo

726
00:12:12,870 --> 00:12:12,880
il numero di  sit-up rendiamolo
 

727
00:12:12,880 --> 00:12:14,710
il numero di  sit-up rendiamolo
più efficiente racchiudendo la nostra

728
00:12:14,710 --> 00:12:14,720
più efficiente racchiudendo la nostra
 

729
00:12:14,720 --> 00:12:15,430
più efficiente racchiudendo la nostra
definizione di chiusura

730
00:12:15,430 --> 00:12:15,440
definizione di chiusura
 

731
00:12:15,440 --> 00:12:27,990
definizione di chiusura
qui all'interno della nostra struttura casher

732
00:12:27,990 --> 00:12:28,000

 

733
00:12:28,000 --> 00:12:29,750

qui chiamiamo la nuova funzione sul

734
00:12:29,750 --> 00:12:29,760
qui chiamiamo la nuova funzione sul
 

735
00:12:29,760 --> 00:12:31,829
qui chiamiamo la nuova funzione sul
nostro cash o struct e passando la

736
00:12:31,829 --> 00:12:31,839
nostro cash o struct e passando la
 

737
00:12:31,839 --> 00:12:34,069
nostro cash o struct e passando la
nostra chiusura che sarà impostata sul

738
00:12:34,069 --> 00:12:34,079
nostra chiusura che sarà impostata sul
 

739
00:12:34,079 --> 00:12:35,430
nostra chiusura che sarà impostata sul
campo di calcolo

740
00:12:35,430 --> 00:12:35,440
campo di calcolo
 

741
00:12:35,440 --> 00:12:37,670
campo di calcolo
sul nostro cash restruct Let's  cambia il

742
00:12:37,670 --> 00:12:37,680
sul nostro cash restruct Let's  cambia il
 

743
00:12:37,680 --> 00:12:42,870
sul nostro cash restruct Let's  cambia il
nome della nostra variabile in risultato memorizzato nella cache

744
00:12:42,870 --> 00:12:42,880

 

745
00:12:42,880 --> 00:12:44,310

vorremo anche rendere la nostra variabile

746
00:12:44,310 --> 00:12:44,320
vorremo anche rendere la nostra variabile
 

747
00:12:44,320 --> 00:12:45,910
vorremo anche rendere la nostra variabile
mutabile perché chiameremo il

748
00:12:45,910 --> 00:12:45,920
mutabile perché chiameremo il
 

749
00:12:45,920 --> 00:12:46,790
mutabile perché chiameremo il
metodo value

750
00:12:46,790 --> 00:12:46,800
metodo value
 

751
00:12:46,800 --> 00:12:52,389
metodo value
che muterà la nostra cache o struct

752
00:12:52,389 --> 00:12:52,399
che muterà la nostra cache o struct
 

753
00:12:52,399 --> 00:12:54,230
che muterà la nostra cache o struct
quindi invece di chiamare la costosa

754
00:12:54,230 --> 00:12:54,240
quindi invece di chiamare la costosa
 

755
00:12:54,240 --> 00:12:55,509
quindi invece di chiamare la costosa
chiusura chiameremo

756
00:12:55,509 --> 00:12:55,519
chiusura chiameremo
 

757
00:12:55,519 --> 00:13:07,590
chiusura chiameremo
cachedresult dot value

758
00:13:07,590 --> 00:13:07,600
cachedresult dot value
 

759
00:13:07,600 --> 00:13:13,269
cachedresult dot value
andiamo avanti e  esegui di nuovo il nostro programma

760
00:13:13,269 --> 00:13:13,279

 

761
00:13:13,279 --> 00:13:15,269

e come puoi vedere questa volta

762
00:13:15,269 --> 00:13:15,279
e come puoi vedere questa volta
 

763
00:13:15,279 --> 00:13:17,590
e come puoi vedere questa volta
chiamiamo la nostra costosa operazione solo

764
00:13:17,590 --> 00:13:17,600
chiamiamo la nostra costosa operazione solo
 

765
00:13:17,600 --> 00:13:20,389
chiamiamo la nostra costosa operazione solo
una volta che ora la memorizzazione nella cache dei valori è generalmente un

766
00:13:20,389 --> 00:13:20,399
una volta che ora la memorizzazione nella cache dei valori è generalmente un
 

767
00:13:20,399 --> 00:13:22,470
una volta che ora la memorizzazione nella cache dei valori è generalmente un
comportamento utile, quindi potremmo voler usare il

768
00:13:22,470 --> 00:13:22,480
comportamento utile, quindi potremmo voler usare il
 

769
00:13:22,480 --> 00:13:23,350
comportamento utile, quindi potremmo voler usare il
nostro cacher

770
00:13:23,350 --> 00:13:23,360
nostro cacher
 

771
00:13:23,360 --> 00:13:25,590
nostro cacher
in diversi  contesti ma ci sono due

772
00:13:25,590 --> 00:13:25,600
in diversi  contesti ma ci sono due
 

773
00:13:25,600 --> 00:13:27,910
in diversi  contesti ma ci sono due
problemi che ci impediscono di fare questo

774
00:13:27,910 --> 00:13:27,920
problemi che ci impediscono di fare questo
 

775
00:13:27,920 --> 00:13:30,230
problemi che ci impediscono di fare questo
problema il numero uno è chiamare il nostro

776
00:13:30,230 --> 00:13:30,240
problema il numero uno è chiamare il nostro
 

777
00:13:30,240 --> 00:13:32,069
problema il numero uno è chiamare il nostro
metodo value restituirà

778
00:13:32,069 --> 00:13:32,079
metodo value restituirà
 

779
00:13:32,079 --> 00:13:35,190
metodo value restituirà
lo stesso valore non importa quale sia il

780
00:13:35,190 --> 00:13:35,200
lo stesso valore non importa quale sia il
 

781
00:13:35,200 --> 00:13:37,829
lo stesso valore non importa quale sia il
parametro di input arg per esempio diciamo

782
00:13:37,829 --> 00:13:37,839
parametro di input arg per esempio diciamo
 

783
00:13:37,839 --> 00:13:39,910
parametro di input arg per esempio diciamo
la prima volta che chiamiamo il metodo value

784
00:13:39,910 --> 00:13:39,920
la prima volta che chiamiamo il metodo value
 

785
00:13:39,920 --> 00:13:43,110
la prima volta che chiamiamo il metodo value
che passiamo in uno  come valore per arg

786
00:13:43,110 --> 00:13:43,120
che passiamo in uno  come valore per arg
 

787
00:13:43,120 --> 00:13:44,389
che passiamo in uno  come valore per arg
perché questa è la prima volta che

788
00:13:44,389 --> 00:13:44,399
perché questa è la prima volta che
 

789
00:13:44,399 --> 00:13:46,790
perché questa è la prima volta che
chiamiamo il metodo value

790
00:13:46,790 --> 00:13:46,800
chiamiamo il metodo value
 

791
00:13:46,800 --> 00:13:48,230
chiamiamo il metodo value
self.value valuterà a none

792
00:13:48,230 --> 00:13:48,240
self.value valuterà a none
 

793
00:13:48,240 --> 00:13:50,150
self.value valuterà a none
quindi andremo nel ramo none e

794
00:13:50,150 --> 00:13:50,160
quindi andremo nel ramo none e
 

795
00:13:50,160 --> 00:13:51,350
quindi andremo nel ramo none e
quindi chiameremo la nostra

796
00:13:51,350 --> 00:13:51,360
quindi chiameremo la nostra
 

797
00:13:51,360 --> 00:13:53,910
quindi chiameremo la nostra
chiusura con il nostro arg che

798
00:13:53,910 --> 00:13:53,920
chiusura con il nostro arg che
 

799
00:13:53,920 --> 00:13:55,269
chiusura con il nostro arg che
sarà uguale  a 1.

800
00:13:55,269 --> 00:13:55,279
sarà uguale  a 1.
 

801
00:13:55,279 --> 00:13:57,670
sarà uguale  a 1.
quindi prenderemo il valore risultante e

802
00:13:57,670 --> 00:13:57,680
quindi prenderemo il valore risultante e
 

803
00:13:57,680 --> 00:13:58,870
quindi prenderemo il valore risultante e
lo salveremo all'interno di

804
00:13:58,870 --> 00:13:58,880
lo salveremo all'interno di
 

805
00:13:58,880 --> 00:14:01,670
lo salveremo all'interno di
self.value ora immaginiamo di chiamare di nuovo il nostro metodo value

806
00:14:01,670 --> 00:14:01,680
self.value ora immaginiamo di chiamare di nuovo il nostro metodo value
 

807
00:14:01,680 --> 00:14:02,150
self.value ora immaginiamo di chiamare di nuovo il nostro metodo value

808
00:14:02,150 --> 00:14:02,160

 

809
00:14:02,160 --> 00:14:04,870

ma questa volta passiamo a 2 come

810
00:14:04,870 --> 00:14:04,880
ma questa volta passiamo a 2 come
 

811
00:14:04,880 --> 00:14:05,590
ma questa volta passiamo a 2 come
valore per

812
00:14:05,590 --> 00:14:05,600
valore per
 

813
00:14:05,600 --> 00:14:08,470
valore per
arg questa volta self.value esiste già

814
00:14:08,470 --> 00:14:08,480
arg questa volta self.value esiste già
 

815
00:14:08,480 --> 00:14:10,550
arg questa volta self.value esiste già
quindi andremo  nel braccio somma e

816
00:14:10,550 --> 00:14:10,560
quindi andremo  nel braccio somma e
 

817
00:14:10,560 --> 00:14:13,350
quindi andremo  nel braccio somma e
restituire semplicemente il valore memorizzato nella somma, questo è

818
00:14:13,350 --> 00:14:13,360
restituire semplicemente il valore memorizzato nella somma, questo è
 

819
00:14:13,360 --> 00:14:14,389
restituire semplicemente il valore memorizzato nella somma, questo è
problematico perché

820
00:14:14,389 --> 00:14:14,399
problematico perché
 

821
00:14:14,399 --> 00:14:16,790
problematico perché
r viene passato alla nostra chiusura, il che significa

822
00:14:16,790 --> 00:14:16,800
r viene passato alla nostra chiusura, il che significa
 

823
00:14:16,800 --> 00:14:18,790
r viene passato alla nostra chiusura, il che significa
che potrebbe cambiare il valore risultante

824
00:14:18,790 --> 00:14:18,800
che potrebbe cambiare il valore risultante
 

825
00:14:18,800 --> 00:14:19,430
che potrebbe cambiare il valore risultante
proveniente

826
00:14:19,430 --> 00:14:19,440
proveniente
 

827
00:14:19,440 --> 00:14:21,269
proveniente
dalla nostra chiusura ma con la nostra attuale

828
00:14:21,269 --> 00:14:21,279
dalla nostra chiusura ma con la nostra attuale
 

829
00:14:21,279 --> 00:14:23,430
dalla nostra chiusura ma con la nostra attuale
implementazione il valore sarà sempre

830
00:14:23,430 --> 00:14:23,440
implementazione il valore sarà sempre
 

831
00:14:23,440 --> 00:14:25,590
implementazione il valore sarà sempre
uguale a re  sulto di chiamare la

832
00:14:25,590 --> 00:14:25,600
uguale a re  sulto di chiamare la
 

833
00:14:25,600 --> 00:14:27,829
uguale a re  sulto di chiamare la
nostra chiusura con l'argomento passato

834
00:14:27,829 --> 00:14:27,839
nostra chiusura con l'argomento passato
 

835
00:14:27,839 --> 00:14:29,110
nostra chiusura con l'argomento passato
nella prima chiamata

836
00:14:29,110 --> 00:14:29,120
nella prima chiamata
 

837
00:14:29,120 --> 00:14:31,350
nella prima chiamata
per valutare quello che sto sostanzialmente dicendo è

838
00:14:31,350 --> 00:14:31,360
per valutare quello che sto sostanzialmente dicendo è
 

839
00:14:31,360 --> 00:14:33,189
per valutare quello che sto sostanzialmente dicendo è
invece di incassare un valore,

840
00:14:33,189 --> 00:14:33,199
invece di incassare un valore,
 

841
00:14:33,199 --> 00:14:35,590
invece di incassare un valore,
indipendentemente dall'argomento passato,

842
00:14:35,590 --> 00:14:35,600
indipendentemente dall'argomento passato,
 

843
00:14:35,600 --> 00:14:36,710
indipendentemente dall'argomento passato,
è necessario incassare

844
00:14:36,710 --> 00:14:36,720
è necessario incassare
 

845
00:14:36,720 --> 00:14:39,110
è necessario incassare
un valore per ogni argomento

846
00:14:39,110 --> 00:14:39,120
un valore per ogni argomento
 

847
00:14:39,120 --> 00:14:40,790
un valore per ogni argomento
passato perché l'argomento

848
00:14:40,790 --> 00:14:40,800
passato perché l'argomento
 

849
00:14:40,800 --> 00:14:43,750
passato perché l'argomento
influenza il valore come esercizio

850
00:14:43,750 --> 00:14:43,760
influenza il valore come esercizio
 

851
00:14:43,760 --> 00:14:45,910
influenza il valore come esercizio
puoi correggere questa implementazione memorizzando una

852
00:14:45,910 --> 00:14:45,920
puoi correggere questa implementazione memorizzando una
 

853
00:14:45,920 --> 00:14:46,629
puoi correggere questa implementazione memorizzando una
hashmap

854
00:14:46,629 --> 00:14:46,639
hashmap
 

855
00:14:46,639 --> 00:14:48,949
hashmap
invece di un singolo valore le chiavi

856
00:14:48,949 --> 00:14:48,959
invece di un singolo valore le chiavi
 

857
00:14:48,959 --> 00:14:50,389
invece di un singolo valore le chiavi
della hashmap saranno

858
00:14:50,389 --> 00:14:50,399
della hashmap saranno
 

859
00:14:50,399 --> 00:14:53,110
della hashmap saranno
l'argomento passato in valore e i

860
00:14:53,110 --> 00:14:53,120
l'argomento passato in valore e i
 

861
00:14:53,120 --> 00:14:54,470
l'argomento passato in valore e i
valori nella tua hashmap

862
00:14:54,470 --> 00:14:54,480
valori nella tua hashmap
 

863
00:14:54,480 --> 00:14:57,189
valori nella tua hashmap
saranno il risultato della chiamata alla

864
00:14:57,189 --> 00:14:57,199
saranno il risultato della chiamata alla
 

865
00:14:57,199 --> 00:14:58,069
saranno il risultato della chiamata alla
chiusura

866
00:14:58,069 --> 00:14:58,079
chiusura
 

867
00:14:58,079 --> 00:15:00,550
chiusura
con l'argomento quindi  all'interno del corpo

868
00:15:00,550 --> 00:15:00,560
con l'argomento quindi  all'interno del corpo
 

869
00:15:00,560 --> 00:15:01,670
con l'argomento quindi  all'interno del corpo
di questo metodo di valore

870
00:15:01,670 --> 00:15:01,680
di questo metodo di valore
 

871
00:15:01,680 --> 00:15:04,150
di questo metodo di valore
dovrai cercare l'arg all'interno della

872
00:15:04,150 --> 00:15:04,160
dovrai cercare l'arg all'interno della
 

873
00:15:04,160 --> 00:15:05,110
dovrai cercare l'arg all'interno della
tua mappa hash

874
00:15:05,110 --> 00:15:05,120
tua mappa hash
 

875
00:15:05,120 --> 00:15:07,829
tua mappa hash
e se esiste un valore per quell'arg,

876
00:15:07,829 --> 00:15:07,839
e se esiste un valore per quell'arg,
 

877
00:15:07,839 --> 00:15:09,110
e se esiste un valore per quell'arg,
restituisci semplicemente

878
00:15:09,110 --> 00:15:09,120
restituisci semplicemente
 

879
00:15:09,120 --> 00:15:11,590
restituisci semplicemente
il valore e se non esiste esegui il

880
00:15:11,590 --> 00:15:11,600
il valore e se non esiste esegui il
 

881
00:15:11,600 --> 00:15:13,829
il valore e se non esiste esegui il
tuo calcolo costoso e memorizza il

882
00:15:13,829 --> 00:15:13,839
tuo calcolo costoso e memorizza il
 

883
00:15:13,839 --> 00:15:14,550
tuo calcolo costoso e memorizza il
risultato

884
00:15:14,550 --> 00:15:14,560
risultato
 

885
00:15:14,560 --> 00:15:16,790
risultato
all'interno  la tua mappa hash il secondo problema

886
00:15:16,790 --> 00:15:16,800
all'interno  la tua mappa hash il secondo problema
 

887
00:15:16,800 --> 00:15:18,949
all'interno  la tua mappa hash il secondo problema
con la nostra implementazione

888
00:15:18,949 --> 00:15:18,959
con la nostra implementazione
 

889
00:15:18,959 --> 00:15:21,350
con la nostra implementazione
del cacher è che stiamo usando tipi hardcoded, ad

890
00:15:21,350 --> 00:15:21,360
del cacher è che stiamo usando tipi hardcoded, ad
 

891
00:15:21,360 --> 00:15:22,710
del cacher è che stiamo usando tipi hardcoded, ad
esempio stiamo dicendo che la nostra

892
00:15:22,710 --> 00:15:22,720
esempio stiamo dicendo che la nostra
 

893
00:15:22,720 --> 00:15:25,189
esempio stiamo dicendo che la nostra
chiusura deve accettare un intero e

894
00:15:25,189 --> 00:15:25,199
chiusura deve accettare un intero e
 

895
00:15:25,199 --> 00:15:26,470
chiusura deve accettare un intero e
restituire un intero

896
00:15:26,470 --> 00:15:26,480
restituire un intero
 

897
00:15:26,480 --> 00:15:28,949
restituire un intero
e anche il nostro valore deve essere un intero

898
00:15:28,949 --> 00:15:28,959
e anche il nostro valore deve essere un intero
 

899
00:15:28,959 --> 00:15:29,590
e anche il nostro valore deve essere un intero

900
00:15:29,590 --> 00:15:29,600

 

901
00:15:29,600 --> 00:15:32,069

per risolvere questo problema puoi semplicemente usare i generici

902
00:15:32,069 --> 00:15:32,079
per risolvere questo problema puoi semplicemente usare i generici
 

903
00:15:32,079 --> 00:15:32,710
per risolvere questo problema puoi semplicemente usare i generici
invece di

904
00:15:32,710 --> 00:15:32,720
invece di
 

905
00:15:32,720 --> 00:15:34,870
invece di
valori hardcoded l'ultima cosa di cui

906
00:15:34,870 --> 00:15:34,880
valori hardcoded l'ultima cosa di cui
 

907
00:15:34,880 --> 00:15:36,629
valori hardcoded l'ultima cosa di cui
voglio parlare è catturare l'

908
00:15:36,629 --> 00:15:36,639
voglio parlare è catturare l'
 

909
00:15:36,639 --> 00:15:38,389
voglio parlare è catturare l'
ambiente con le chiusure a

910
00:15:38,389 --> 00:15:38,399
ambiente con le chiusure a
 

911
00:15:38,399 --> 00:15:41,189
ambiente con le chiusure a
differenza delle funzioni le chiusure hanno accesso a

912
00:15:41,189 --> 00:15:41,199
differenza delle funzioni le chiusure hanno accesso a
 

913
00:15:41,199 --> 00:15:42,069
differenza delle funzioni le chiusure hanno accesso a
variabili

914
00:15:42,069 --> 00:15:42,079
variabili
 

915
00:15:42,079 --> 00:15:43,990
variabili
che sono definite all'interno del  scope in

916
00:15:43,990 --> 00:15:44,000
che sono definite all'interno del  scope in
 

917
00:15:44,000 --> 00:15:45,829
che sono definite all'interno del  scope in
cui è definita la chiusura

918
00:15:45,829 --> 00:15:45,839
cui è definita la chiusura
 

919
00:15:45,839 --> 00:15:47,749
cui è definita la chiusura
ecco un semplice esempio in alto

920
00:15:47,749 --> 00:15:47,759
ecco un semplice esempio in alto
 

921
00:15:47,759 --> 00:15:48,870
ecco un semplice esempio in alto
abbiamo una variabile chiamata

922
00:15:48,870 --> 00:15:48,880
abbiamo una variabile chiamata
 

923
00:15:48,880 --> 00:15:51,590
abbiamo una variabile chiamata
x che è uguale a quattro poi abbiamo una

924
00:15:51,590 --> 00:15:51,600
x che è uguale a quattro poi abbiamo una
 

925
00:15:51,600 --> 00:15:53,350
x che è uguale a quattro poi abbiamo una
chiusura chiamata uguale a x

926
00:15:53,350 --> 00:15:53,360
chiusura chiamata uguale a x
 

927
00:15:53,360 --> 00:15:55,749
chiusura chiamata uguale a x
che accetta una variabile chiamata z e

928
00:15:55,749 --> 00:15:55,759
che accetta una variabile chiamata z e
 

929
00:15:55,759 --> 00:15:57,509
che accetta una variabile chiamata z e
poi restituisce un booleano

930
00:15:57,509 --> 00:15:57,519
poi restituisce un booleano
 

931
00:15:57,519 --> 00:15:59,110
poi restituisce un booleano
il booleano sta andando  per essere uguale a questa

932
00:15:59,110 --> 00:15:59,120
il booleano sta andando  per essere uguale a questa
 

933
00:15:59,120 --> 00:16:00,949
il booleano sta andando  per essere uguale a questa
espressione z è uguale

934
00:16:00,949 --> 00:16:00,959
espressione z è uguale
 

935
00:16:00,959 --> 00:16:03,590
espressione z è uguale
a x ora anche se x è definito

936
00:16:03,590 --> 00:16:03,600
a x ora anche se x è definito
 

937
00:16:03,600 --> 00:16:05,110
a x ora anche se x è definito
al di fuori della nostra chiusura la

938
00:16:05,110 --> 00:16:05,120
al di fuori della nostra chiusura la
 

939
00:16:05,120 --> 00:16:07,430
al di fuori della nostra chiusura la
nostra chiusura ha ancora accesso a x

940
00:16:07,430 --> 00:16:07,440
nostra chiusura ha ancora accesso a x
 

941
00:16:07,440 --> 00:16:09,030
nostra chiusura ha ancora accesso a x
perché sono entrambi definiti nello

942
00:16:09,030 --> 00:16:09,040
perché sono entrambi definiti nello
 

943
00:16:09,040 --> 00:16:09,990
perché sono entrambi definiti nello
stesso ambito

944
00:16:09,990 --> 00:16:10,000
stesso ambito
 

945
00:16:10,000 --> 00:16:11,990
stesso ambito
quindi definiamo una variabile chiamata y e la

946
00:16:11,990 --> 00:16:12,000
quindi definiamo una variabile chiamata y e la
 

947
00:16:12,000 --> 00:16:13,749
quindi definiamo una variabile chiamata y e la
impostiamo uguale  a quattro

948
00:16:13,749 --> 00:16:13,759
impostiamo uguale  a quattro
 

949
00:16:13,759 --> 00:16:16,710
impostiamo uguale  a quattro
infine chiamiamo la nostra chiusura passando in y

950
00:16:16,710 --> 00:16:16,720
infine chiamiamo la nostra chiusura passando in y
 

951
00:16:16,720 --> 00:16:18,470
infine chiamiamo la nostra chiusura passando in y
la chiamata alla nostra chiusura è racchiusa

952
00:16:18,470 --> 00:16:18,480
la chiamata alla nostra chiusura è racchiusa
 

953
00:16:18,480 --> 00:16:20,310
la chiamata alla nostra chiusura è racchiusa
in una macro di asserzione

954
00:16:20,310 --> 00:16:20,320
in una macro di asserzione
 

955
00:16:20,320 --> 00:16:22,629
in una macro di asserzione
che andrà in panico se la funzione della torre di chiamata

956
00:16:22,629 --> 00:16:23,590
che andrà in panico se la funzione della torre di chiamata
 

957
00:16:23,590 --> 00:16:23,600

 

958
00:16:23,600 --> 00:16:26,069

risulta falsa quindi andiamo avanti ed eseguiamo il nostro

959
00:16:26,069 --> 00:16:26,079
risulta falsa quindi andiamo avanti ed eseguiamo il nostro
 

960
00:16:26,079 --> 00:16:28,710
risulta falsa quindi andiamo avanti ed eseguiamo il nostro
programma

961
00:16:28,710 --> 00:16:28,720

 

962
00:16:28,720 --> 00:16:31,670

e come puoi vedere non ci siamo fatti prendere dal panico ora

963
00:16:31,670 --> 00:16:31,680
e come puoi vedere non ci siamo fatti prendere dal panico ora
 

964
00:16:31,680 --> 00:16:33,509
e come puoi vedere non ci siamo fatti prendere dal panico ora
vediamo cosa accadrebbe se usassimo una

965
00:16:33,509 --> 00:16:33,519
vediamo cosa accadrebbe se usassimo una
 

966
00:16:33,519 --> 00:16:34,230
vediamo cosa accadrebbe se usassimo una
funzione

967
00:16:34,230 --> 00:16:34,240
funzione
 

968
00:16:34,240 --> 00:16:36,710
funzione
invece di una chiusura, quindi cambieremo la nostra

969
00:16:36,710 --> 00:16:37,670
invece di una chiusura, quindi cambieremo la nostra
 

970
00:16:37,670 --> 00:16:37,680

 

971
00:16:37,680 --> 00:16:41,829

chiusura uguale a x in una funzione

972
00:16:41,829 --> 00:16:41,839

 

973
00:16:41,839 --> 00:16:43,910

qui puoi vedere alcune linee ondulate rosse

974
00:16:43,910 --> 00:16:43,920
qui puoi vedere alcune linee ondulate rosse
 

975
00:16:43,920 --> 00:16:45,910
qui puoi vedere alcune linee ondulate rosse
sotto x e se i  passa il mouse sopra puoi

976
00:16:45,910 --> 00:16:45,920
sotto x e se i  passa il mouse sopra puoi
 

977
00:16:45,920 --> 00:16:47,030
sotto x e se i  passa il mouse sopra puoi
vedere che l'errore non è in

978
00:16:47,030 --> 00:16:47,040
vedere che l'errore non è in
 

979
00:16:47,040 --> 00:16:49,509
vedere che l'errore non è in
grado di catturare l'ambiente dinamico all'interno di

980
00:16:49,509 --> 00:16:49,519
grado di catturare l'ambiente dinamico all'interno di
 

981
00:16:49,519 --> 00:16:50,470
grado di catturare l'ambiente dinamico all'interno di
una funzione

982
00:16:50,470 --> 00:16:50,480
una funzione
 

983
00:16:50,480 --> 00:16:52,710
una funzione
usa invece una chiusura, quindi il compilatore ci sta

984
00:16:52,710 --> 00:16:52,720
usa invece una chiusura, quindi il compilatore ci sta
 

985
00:16:52,720 --> 00:16:54,230
usa invece una chiusura, quindi il compilatore ci sta
effettivamente dicendo di usare

986
00:16:54,230 --> 00:16:54,240
effettivamente dicendo di usare
 

987
00:16:54,240 --> 00:16:56,550
effettivamente dicendo di usare
una chiusura invece di una funzione perché le

988
00:16:56,550 --> 00:16:56,560
una chiusura invece di una funzione perché le
 

989
00:16:56,560 --> 00:16:58,230
una chiusura invece di una funzione perché le
chiusure sono in grado di catturare il loro

990
00:16:58,230 --> 00:16:58,240
chiusure sono in grado di catturare il loro
 

991
00:16:58,240 --> 00:16:58,949
chiusure sono in grado di catturare il loro

992
00:16:58,949 --> 00:16:58,959

 

993
00:16:58,959 --> 00:17:01,189

ambiente devono usare memoria extra  per memorizzare

994
00:17:01,189 --> 00:17:01,199
ambiente devono usare memoria extra  per memorizzare
 

995
00:17:01,199 --> 00:17:02,310
ambiente devono usare memoria extra  per memorizzare
quel contesto

996
00:17:02,310 --> 00:17:02,320
quel contesto
 

997
00:17:02,320 --> 00:17:04,069
quel contesto
ma poiché le funzioni non catturano il

998
00:17:04,069 --> 00:17:04,079
ma poiché le funzioni non catturano il
 

999
00:17:04,079 --> 00:17:06,069
ma poiché le funzioni non catturano il
loro ambiente, non incorrono nelle

1000
00:17:06,069 --> 00:17:06,079
loro ambiente, non incorrono nelle
 

1001
00:17:06,079 --> 00:17:07,429
loro ambiente, non incorrono nelle
stesse

1002
00:17:07,429 --> 00:17:07,439
stesse
 

1003
00:17:07,439 --> 00:17:09,189
stesse
chiusure generali acquisiscono valori dal loro

1004
00:17:09,189 --> 00:17:09,199
chiusure generali acquisiscono valori dal loro
 

1005
00:17:09,199 --> 00:17:10,870
chiusure generali acquisiscono valori dal loro
ambiente in tre modi

1006
00:17:10,870 --> 00:17:10,880
ambiente in tre modi
 

1007
00:17:10,880 --> 00:17:13,110
ambiente in tre modi
che si associano direttamente ai tre modi in cui una

1008
00:17:13,110 --> 00:17:13,120
che si associano direttamente ai tre modi in cui una
 

1009
00:17:13,120 --> 00:17:14,549
che si associano direttamente ai tre modi in cui una
funzione potrebbe assumere

1010
00:17:14,549 --> 00:17:14,559
funzione potrebbe assumere
 

1011
00:17:14,559 --> 00:17:17,590
funzione potrebbe assumere
parametri di input assumendone la proprietà prendendo in

1012
00:17:17,590 --> 00:17:17,600
parametri di input assumendone la proprietà prendendo in
 

1013
00:17:17,600 --> 00:17:18,870
parametri di input assumendone la proprietà prendendo in
prestito immutabilmente

1014
00:17:18,870 --> 00:17:18,880
prestito immutabilmente
 

1015
00:17:18,880 --> 00:17:21,909
prestito immutabilmente
o prendendo in prestito immutabilmente questi tre

1016
00:17:21,909 --> 00:17:21,919
o prendendo in prestito immutabilmente questi tre
 

1017
00:17:21,919 --> 00:17:23,669
o prendendo in prestito immutabilmente questi tre
modi per catturare l'ambiente

1018
00:17:23,669 --> 00:17:23,679
modi per catturare l'ambiente
 

1019
00:17:23,679 --> 00:17:26,069
modi per catturare l'ambiente
sono codificati nei tratti della funzione di cui abbiamo

1020
00:17:26,069 --> 00:17:26,079
sono codificati nei tratti della funzione di cui abbiamo
 

1021
00:17:26,079 --> 00:17:27,350
sono codificati nei tratti della funzione di cui abbiamo
parlato prima

1022
00:17:27,350 --> 00:17:27,360
parlato prima
 

1023
00:17:27,360 --> 00:17:30,470
parlato prima
che sono fn una volta f e mu e

1024
00:17:30,470 --> 00:17:30,480
che sono fn una volta f e mu e
 

1025
00:17:30,480 --> 00:17:33,270
che sono fn una volta f e mu e
fn fn una volta  assume la proprietà delle

1026
00:17:33,270 --> 00:17:33,280
fn fn una volta  assume la proprietà delle
 

1027
00:17:33,280 --> 00:17:34,870
fn fn una volta  assume la proprietà delle
variabili all'interno

1028
00:17:34,870 --> 00:17:34,880
variabili all'interno
 

1029
00:17:34,880 --> 00:17:36,710
variabili all'interno
dell'ambiente delle chiusure la parte una volta del nome

1030
00:17:36,710 --> 00:17:36,720
dell'ambiente delle chiusure la parte una volta del nome
 

1031
00:17:36,720 --> 00:17:38,630
dell'ambiente delle chiusure la parte una volta del nome
rappresenta il fatto che le chiusure

1032
00:17:38,630 --> 00:17:38,640
rappresenta il fatto che le chiusure
 

1033
00:17:38,640 --> 00:17:40,230
rappresenta il fatto che le chiusure
non possono assumere la proprietà delle stesse

1034
00:17:40,230 --> 00:17:40,240
non possono assumere la proprietà delle stesse
 

1035
00:17:40,240 --> 00:17:42,150
non possono assumere la proprietà delle stesse
variabili più di una volta,

1036
00:17:42,150 --> 00:17:42,160
variabili più di una volta,
 

1037
00:17:42,160 --> 00:17:43,990
variabili più di una volta,
quindi queste chiusure possono essere chiamate solo

1038
00:17:43,990 --> 00:17:44,000
quindi queste chiusure possono essere chiamate solo
 

1039
00:17:44,000 --> 00:17:45,510
quindi queste chiusure possono essere chiamate solo
tali fn mu

1040
00:17:45,510 --> 00:17:45,520
tali fn mu
 

1041
00:17:45,520 --> 00:17:48,549
tali fn mu
prende in prestito valori e fn

1042
00:17:48,549 --> 00:17:48,559
prende in prestito valori e fn
 

1043
00:17:48,559 --> 00:17:51,029
prende in prestito valori e fn
immutabilmente valori  quando crei

1044
00:17:51,029 --> 00:17:51,039
immutabilmente valori  quando crei
 

1045
00:17:51,039 --> 00:17:52,870
immutabilmente valori  quando crei
una chiusura rust deduce quali di questi

1046
00:17:52,870 --> 00:17:52,880
una chiusura rust deduce quali di questi
 

1047
00:17:52,880 --> 00:17:54,070
una chiusura rust deduce quali di questi
tratti usare in

1048
00:17:54,070 --> 00:17:54,080
tratti usare in
 

1049
00:17:54,080 --> 00:17:56,630
tratti usare in
base a come usi i valori all'interno

1050
00:17:56,630 --> 00:17:56,640
base a come usi i valori all'interno
 

1051
00:17:56,640 --> 00:17:58,230
base a come usi i valori all'interno
dell'ambiente delle chiusure

1052
00:17:58,230 --> 00:17:58,240
dell'ambiente delle chiusure
 

1053
00:17:58,240 --> 00:18:00,230
dell'ambiente delle chiusure
potremmo tuttavia forzare la chiusura a

1054
00:18:00,230 --> 00:18:00,240
potremmo tuttavia forzare la chiusura a
 

1055
00:18:00,240 --> 00:18:02,710
potremmo tuttavia forzare la chiusura a
prendere possesso dei valori che usa

1056
00:18:02,710 --> 00:18:02,720
prendere possesso dei valori che usa
 

1057
00:18:02,720 --> 00:18:05,270
prendere possesso dei valori che usa
all'interno del suo ambiente usando la

1058
00:18:05,270 --> 00:18:05,280
all'interno del suo ambiente usando la
 

1059
00:18:05,280 --> 00:18:05,909
all'interno del suo ambiente usando la
parola

1060
00:18:05,909 --> 00:18:05,919
parola
 

1061
00:18:05,919 --> 00:18:08,070
parola
chiave move davanti al  chiusura è

1062
00:18:08,070 --> 00:18:08,080
chiave move davanti al  chiusura è
 

1063
00:18:08,080 --> 00:18:09,590
chiave move davanti al  chiusura è
utile soprattutto quando si passa una chiusura

1064
00:18:09,590 --> 00:18:09,600
utile soprattutto quando si passa una chiusura
 

1065
00:18:09,600 --> 00:18:10,470
utile soprattutto quando si passa una chiusura
da un

1066
00:18:10,470 --> 00:18:10,480
da un
 

1067
00:18:10,480 --> 00:18:12,470
da un
thread all'altro in modo da poter anche passare

1068
00:18:12,470 --> 00:18:12,480
thread all'altro in modo da poter anche passare
 

1069
00:18:12,480 --> 00:18:14,310
thread all'altro in modo da poter anche passare
la proprietà delle variabili da un

1070
00:18:14,310 --> 00:18:14,320
la proprietà delle variabili da un
 

1071
00:18:14,320 --> 00:18:14,789
la proprietà delle variabili da un

1072
00:18:14,789 --> 00:18:14,799

 

1073
00:18:14,799 --> 00:18:17,029

thread all'altro thread ad esempio in questo

1074
00:18:17,029 --> 00:18:17,039
thread all'altro thread ad esempio in questo
 

1075
00:18:17,039 --> 00:18:19,029
thread all'altro thread ad esempio in questo
caso x è uguale a un vettore

1076
00:18:19,029 --> 00:18:19,039
caso x è uguale a un vettore
 

1077
00:18:19,039 --> 00:18:21,750
caso x è uguale a un vettore
abbiamo la nostra chiusura  che non cambia

1078
00:18:21,750 --> 00:18:21,760
abbiamo la nostra chiusura  che non cambia
 

1079
00:18:21,760 --> 00:18:22,789
abbiamo la nostra chiusura  che non cambia
quindi

1080
00:18:22,789 --> 00:18:22,799
quindi
 

1081
00:18:22,799 --> 00:18:25,990
quindi
stampiamo x e quindi abbiamo anche y uguale a un

1082
00:18:25,990 --> 00:18:26,000
stampiamo x e quindi abbiamo anche y uguale a un
 

1083
00:18:26,000 --> 00:18:26,950
stampiamo x e quindi abbiamo anche y uguale a un
vettore

1084
00:18:26,950 --> 00:18:26,960
vettore
 

1085
00:18:26,960 --> 00:18:28,950
vettore
e quindi chiamiamo di nuovo la nostra chiusura

1086
00:18:28,950 --> 00:18:28,960
e quindi chiamiamo di nuovo la nostra chiusura
 

1087
00:18:28,960 --> 00:18:31,110
e quindi chiamiamo di nuovo la nostra chiusura
passando in y e affermando

1088
00:18:31,110 --> 00:18:31,120
passando in y e affermando
 

1089
00:18:31,120 --> 00:18:33,750
passando in y e affermando
che retu  ora è vero perché all'interno della

1090
00:18:33,750 --> 00:18:33,760
che retu  ora è vero perché all'interno della
 

1091
00:18:33,760 --> 00:18:34,549
che retu  ora è vero perché all'interno della
nostra chiusura

1092
00:18:34,549 --> 00:18:34,559
nostra chiusura
 

1093
00:18:34,559 --> 00:18:37,590
nostra chiusura
stiamo solo valutando x rispetto a z

1094
00:18:37,590 --> 00:18:37,600
stiamo solo valutando x rispetto a z
 

1095
00:18:37,600 --> 00:18:40,150
stiamo solo valutando x rispetto a z
non stiamo assumendo la proprietà di x all'interno della

1096
00:18:40,150 --> 00:18:40,160
non stiamo assumendo la proprietà di x all'interno della
 

1097
00:18:40,160 --> 00:18:41,029
non stiamo assumendo la proprietà di x all'interno della
nostra chiusura

1098
00:18:41,029 --> 00:18:41,039
nostra chiusura
 

1099
00:18:41,039 --> 00:18:43,350
nostra chiusura
ma di nuovo potremmo forzare la chiusura a

1100
00:18:43,350 --> 00:18:43,360
ma di nuovo potremmo forzare la chiusura a
 

1101
00:18:43,360 --> 00:18:44,390
ma di nuovo potremmo forzare la chiusura a
prendere

1102
00:18:44,390 --> 00:18:44,400
prendere
 

1103
00:18:44,400 --> 00:18:46,870
prendere
possesso specificando la parola chiave move davanti

1104
00:18:46,870 --> 00:18:46,880
possesso specificando la parola chiave move davanti
 

1105
00:18:46,880 --> 00:18:50,710
possesso specificando la parola chiave move davanti
alla nostra definizione di chiusura

1106
00:18:50,710 --> 00:18:50,720

 

1107
00:18:50,720 --> 00:18:53,669

ora la nostra chiusura  prende la proprietà di x

1108
00:18:53,669 --> 00:18:53,679
ora la nostra chiusura  prende la proprietà di x
 

1109
00:18:53,679 --> 00:18:54,070
ora la nostra chiusura  prende la proprietà di x
e

1110
00:18:54,070 --> 00:18:54,080
e
 

1111
00:18:54,080 --> 00:18:56,310
e
otteniamo un errore nella nostra dichiarazione di stampa

1112
00:18:56,310 --> 00:18:56,320
otteniamo un errore nella nostra dichiarazione di stampa
 

1113
00:18:56,320 --> 00:18:58,390
otteniamo un errore nella nostra dichiarazione di stampa
sotto la definizione della nostra chiusura

1114
00:18:58,390 --> 00:18:58,400
sotto la definizione della nostra chiusura
 

1115
00:18:58,400 --> 00:19:00,310
sotto la definizione della nostra chiusura
se passo sopra le onde rosse

1116
00:19:00,310 --> 00:19:00,320
se passo sopra le onde rosse
 

1117
00:19:00,320 --> 00:19:01,590
se passo sopra le onde rosse
puoi vedere che dice

1118
00:19:01,590 --> 00:19:01,600
puoi vedere che dice
 

1119
00:19:01,600 --> 00:19:04,230
puoi vedere che dice
che stiamo usando un valore preso in prestito dopo che è

1120
00:19:04,230 --> 00:19:04,240
che stiamo usando un valore preso in prestito dopo che è
 

1121
00:19:04,240 --> 00:19:04,950
che stiamo usando un valore preso in prestito dopo che è
stato spostato

1122
00:19:04,950 --> 00:19:04,960
stato spostato
 

1123
00:19:04,960 --> 00:19:07,350
stato spostato
questo ha senso perché sopra  la nostra

1124
00:19:07,350 --> 00:19:07,360
questo ha senso perché sopra  la nostra
 

1125
00:19:07,360 --> 00:19:09,270
questo ha senso perché sopra  la nostra
chiusura assume la proprietà di x,

1126
00:19:09,270 --> 00:19:09,280
chiusura assume la proprietà di x,
 

1127
00:19:09,280 --> 00:19:12,150
chiusura assume la proprietà di x,
quindi non possiamo usare x dopo che è stato

1128
00:19:12,150 --> 00:19:12,160
quindi non possiamo usare x dopo che è stato
 

1129
00:19:12,160 --> 00:19:13,029
quindi non possiamo usare x dopo che è stato
spostato qui sotto

1130
00:19:13,029 --> 00:19:13,039
spostato qui sotto
 

1131
00:19:13,039 --> 00:19:14,789
spostato qui sotto
tutto bene che conclude la prima parte del

1132
00:19:14,789 --> 00:19:14,799
tutto bene che conclude la prima parte del
 

1133
00:19:14,799 --> 00:19:16,870
tutto bene che conclude la prima parte del
capitolo 13 in cui abbiamo trattato le

1134
00:19:16,870 --> 00:19:16,880
capitolo 13 in cui abbiamo trattato le
 

1135
00:19:16,880 --> 00:19:19,029
capitolo 13 in cui abbiamo trattato le
chiusure ora so che le chiusure potrebbero essere

1136
00:19:19,029 --> 00:19:19,039
chiusure ora so che le chiusure potrebbero essere
 

1137
00:19:19,039 --> 00:19:20,470
chiusure ora so che le chiusure potrebbero essere
difficili da digerire

1138
00:19:20,470 --> 00:19:20,480
difficili da digerire
 

1139
00:19:20,480 --> 00:19:22,230
difficili da digerire
e non abbiamo esaminato tutto  i

1140
00:19:22,230 --> 00:19:22,240
e non abbiamo esaminato tutto  i
 

1141
00:19:22,240 --> 00:19:24,070
e non abbiamo esaminato tutto  i
possibili modi per utilizzare le chiusure

1142
00:19:24,070 --> 00:19:24,080
possibili modi per utilizzare le chiusure
 

1143
00:19:24,080 --> 00:19:25,909
possibili modi per utilizzare le chiusure
quindi se vuoi vedere un altro video

1144
00:19:25,909 --> 00:19:25,919
quindi se vuoi vedere un altro video
 

1145
00:19:25,919 --> 00:19:28,150
quindi se vuoi vedere un altro video
sulle chiusure con più esempi

1146
00:19:28,150 --> 00:19:28,160
sulle chiusure con più esempi
 

1147
00:19:28,160 --> 00:19:30,470
sulle chiusure con più esempi
commenta in basso e ovviamente se ti

1148
00:19:30,470 --> 00:19:30,480
commenta in basso e ovviamente se ti
 

1149
00:19:30,480 --> 00:19:31,510
commenta in basso e ovviamente se ti
piace questo video

1150
00:19:31,510 --> 00:19:31,520
piace questo video
 

1151
00:19:31,520 --> 00:19:33,350
piace questo video
assicurati di dargli un pollice in su nel

1152
00:19:33,350 --> 00:19:33,360
assicurati di dargli un pollice in su nel
 

1153
00:19:33,360 --> 00:19:34,630
assicurati di dargli un pollice in su nel
prossimo video siamo g  oing over

1154
00:19:34,630 --> 00:19:34,640
prossimo video siamo g  oing over
 

1155
00:19:34,640 --> 00:19:36,870
prossimo video siamo g  oing over
iterators quindi se vuoi essere informato

1156
00:19:36,870 --> 00:19:36,880
iterators quindi se vuoi essere informato
 

1157
00:19:36,880 --> 00:19:37,990
iterators quindi se vuoi essere informato
di ciò assicurati

1158
00:19:37,990 --> 00:19:38,000
di ciò assicurati
 

1159
00:19:38,000 --> 00:19:40,870
di ciò assicurati
di premere iscriviti e con quello ci vediamo

1160
00:19:40,870 --> 00:19:40,880
di premere iscriviti e con quello ci vediamo
 

1161
00:19:40,880 --> 00:19:41,590
di premere iscriviti e con quello ci vediamo

1162
00:19:41,590 --> 00:19:41,600

 

1163
00:19:41,600 --> 00:19:52,470

al prossimo

1164
00:19:52,470 --> 00:19:52,480
al prossimo
 

1165
00:19:52,480 --> 00:19:54,559
al prossimo
tu

