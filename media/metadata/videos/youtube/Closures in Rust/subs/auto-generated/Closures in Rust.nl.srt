1
00:00:00,560 --> 00:00:02,629

welkom terug russ bende als je nieuw bent

2
00:00:02,629 --> 00:00:02,639
welkom terug russ bende als je nieuw bent
 

3
00:00:02,639 --> 00:00:04,630
welkom terug russ bende als je nieuw bent
hier mijn naam is bogdan en dit kanaal

4
00:00:04,630 --> 00:00:04,640
hier mijn naam is bogdan en dit kanaal
 

5
00:00:04,640 --> 00:00:05,829
hier mijn naam is bogdan en dit kanaal
gaat helemaal over

6
00:00:05,829 --> 00:00:05,839
gaat helemaal over
 

7
00:00:05,839 --> 00:00:07,990
gaat helemaal over
de roest programmeertaal in de

8
00:00:07,990 --> 00:00:08,000
de roest programmeertaal in de
 

9
00:00:08,000 --> 00:00:10,070
de roest programmeertaal in de
laatste video hebben we hoofdstuk 12 van

10
00:00:10,070 --> 00:00:10,080
laatste video hebben we hoofdstuk 12 van
 

11
00:00:10,080 --> 00:00:11,350
laatste video hebben we hoofdstuk 12 van
het worstelboek

12
00:00:11,350 --> 00:00:11,360
het worstelboek
 

13
00:00:11,360 --> 00:00:14,390
het worstelboek
besproken waarin we een cli-programma hebben gemaakt

14
00:00:14,390 --> 00:00:14,400
besproken waarin we een cli-programma hebben gemaakt
 

15
00:00:14,400 --> 00:00:16,470
besproken waarin we een cli-programma hebben gemaakt
in deze video zijn we  hoofdstuk

16
00:00:16,470 --> 00:00:16,480
in deze video zijn we  hoofdstuk
 

17
00:00:16,480 --> 00:00:17,830
in deze video zijn we  hoofdstuk
13 bespreken, specifiek

18
00:00:17,830 --> 00:00:17,840
13 bespreken, specifiek
 

19
00:00:17,840 --> 00:00:20,310
13 bespreken, specifiek
deel 1 van hoofdstuk 13 waarin we het

20
00:00:20,310 --> 00:00:20,320
deel 1 van hoofdstuk 13 waarin we het
 

21
00:00:20,320 --> 00:00:21,109
deel 1 van hoofdstuk 13 waarin we het
over

22
00:00:21,109 --> 00:00:21,119
over
 

23
00:00:21,119 --> 00:00:30,550
over
sluitingen zullen hebben, dus laten we eerst roestig

24
00:00:30,550 --> 00:00:30,560
sluitingen zullen hebben, dus laten we eerst roestig
 

25
00:00:30,560 --> 00:00:33,270
sluitingen zullen hebben, dus laten we eerst roestig
worden wat zijn sluitingen sluitingen

26
00:00:33,270 --> 00:00:33,280
worden wat zijn sluitingen sluitingen
 

27
00:00:33,280 --> 00:00:34,470
worden wat zijn sluitingen sluitingen
zijn als functies,

28
00:00:34,470 --> 00:00:34,480
zijn als functies,
 

29
00:00:34,480 --> 00:00:36,150
zijn als functies,
behalve dat ze anoniem zijn, wat betekent

30
00:00:36,150 --> 00:00:36,160
behalve dat ze anoniem zijn, wat betekent
 

31
00:00:36,160 --> 00:00:37,830
behalve dat ze anoniem zijn, wat betekent
dat ze geen namen hebben die

32
00:00:37,830 --> 00:00:37,840
dat ze geen namen hebben die
 

33
00:00:37,840 --> 00:00:40,150
dat ze geen namen hebben die
ze zouden kunnen hebben  worden opgeslagen als variabelen en

34
00:00:40,150 --> 00:00:40,160
ze zouden kunnen hebben  worden opgeslagen als variabelen en
 

35
00:00:40,160 --> 00:00:41,030
ze zouden kunnen hebben  worden opgeslagen als variabelen en
doorgegeven

36
00:00:41,030 --> 00:00:41,040
doorgegeven
 

37
00:00:41,040 --> 00:00:43,270
doorgegeven
ze kunnen zelfs worden doorgegeven als invoerparameters

38
00:00:43,270 --> 00:00:43,280
ze kunnen zelfs worden doorgegeven als invoerparameters
 

39
00:00:43,280 --> 00:00:44,150
ze kunnen zelfs worden doorgegeven als invoerparameters

40
00:00:44,150 --> 00:00:44,160

 

41
00:00:44,160 --> 00:00:46,549

voor een functie en ze vangen de

42
00:00:46,549 --> 00:00:46,559
voor een functie en ze vangen de
 

43
00:00:46,559 --> 00:00:47,590
voor een functie en ze vangen de
variabelen

44
00:00:47,590 --> 00:00:47,600
variabelen
 

45
00:00:47,600 --> 00:00:50,150
variabelen
binnen het bereik waarin ze zijn

46
00:00:50,150 --> 00:00:50,160
binnen het bereik waarin ze zijn
 

47
00:00:50,160 --> 00:00:50,950
binnen het bereik waarin ze zijn

48
00:00:50,950 --> 00:00:50,960

 

49
00:00:50,960 --> 00:00:53,029

gedefinieerd om sluitingen beter te begrijpen,

50
00:00:53,029 --> 00:00:53,039
gedefinieerd om sluitingen beter te begrijpen,
 

51
00:00:53,039 --> 00:00:54,389
gedefinieerd om sluitingen beter te begrijpen,
we zullen ze in het volgende

52
00:00:54,389 --> 00:00:54,399
we zullen ze in het volgende
 

53
00:00:54,399 --> 00:00:56,470
we zullen ze in het volgende
voorbeeld gebruiken.  opnieuw een back-

54
00:00:56,470 --> 00:00:56,480
voorbeeld gebruiken.  opnieuw een back-
 

55
00:00:56,480 --> 00:00:58,389
voorbeeld gebruiken.  opnieuw een back-
end bouwen voor een fitness-app

56
00:00:58,389 --> 00:00:58,399
end bouwen voor een fitness-app
 

57
00:00:58,399 --> 00:01:00,950
end bouwen voor een fitness-app
en de back-end is gebouwd in roest de

58
00:01:00,950 --> 00:01:00,960
en de back-end is gebouwd in roest de
 

59
00:01:00,960 --> 00:01:02,790
en de back-end is gebouwd in roest de
fitness-app genereert aangepaste

60
00:01:02,790 --> 00:01:02,800
fitness-app genereert aangepaste
 

61
00:01:02,800 --> 00:01:04,390
fitness-app genereert aangepaste
trainingen voor een gebruiker op

62
00:01:04,390 --> 00:01:04,400
trainingen voor een gebruiker op
 

63
00:01:04,400 --> 00:01:07,109
trainingen voor een gebruiker op
basis van verschillende factoren, zoals hun leeftijd

64
00:01:07,109 --> 00:01:07,119
basis van verschillende factoren, zoals hun leeftijd
 

65
00:01:07,119 --> 00:01:07,910
basis van verschillende factoren, zoals hun leeftijd
body mass

66
00:01:07,910 --> 00:01:07,920
body mass
 

67
00:01:07,920 --> 00:01:11,190
body mass
index workoutvoorkeur  rentie en intensiteitsniveau

68
00:01:11,190 --> 00:01:11,200
index workoutvoorkeur  rentie en intensiteitsniveau
 

69
00:01:11,200 --> 00:01:12,149
index workoutvoorkeur  rentie en intensiteitsniveau

70
00:01:12,149 --> 00:01:12,159

 

71
00:01:12,159 --> 00:01:14,310

nu maakt de implementatie van dit algoritme

72
00:01:14,310 --> 00:01:14,320
nu maakt de implementatie van dit algoritme
 

73
00:01:14,320 --> 00:01:15,670
nu maakt de implementatie van dit algoritme
niet zoveel uit

74
00:01:15,670 --> 00:01:15,680
niet zoveel uit
 

75
00:01:15,680 --> 00:01:17,270
niet zoveel uit
wat er toe doet is dat een deel van dit

76
00:01:17,270 --> 00:01:17,280
wat er toe doet is dat een deel van dit
 

77
00:01:17,280 --> 00:01:19,510
wat er toe doet is dat een deel van dit
algoritme een berekening uitvoert

78
00:01:19,510 --> 00:01:19,520
algoritme een berekening uitvoert
 

79
00:01:19,520 --> 00:01:21,590
algoritme een berekening uitvoert
die duur is en een paar

80
00:01:21,590 --> 00:01:21,600
die duur is en een paar
 

81
00:01:21,600 --> 00:01:23,109
die duur is en een paar
seconden duurt om uit te voeren

82
00:01:23,109 --> 00:01:23,119
seconden duurt om uit te voeren
 

83
00:01:23,119 --> 00:01:25,510
seconden duurt om uit te voeren
hier hebben we deze berekening gesimuleerd

84
00:01:25,510 --> 00:01:25,520
hier hebben we deze berekening gesimuleerd
 

85
00:01:25,520 --> 00:01:26,630
hier hebben we deze berekening gesimuleerd
met een functie genaamd

86
00:01:26,630 --> 00:01:26,640
met een functie genaamd
 

87
00:01:26,640 --> 00:01:29,749
met een functie genaamd
gesimuleerd duur  berekening die

88
00:01:29,749 --> 00:01:30,310
gesimuleerd duur  berekening die
 

89
00:01:30,310 --> 00:01:30,320

 

90
00:01:30,320 --> 00:01:32,630

een intensiteit inneemt en vervolgens de berekening afdrukt

91
00:01:32,630 --> 00:01:34,390
een intensiteit inneemt en vervolgens de berekening afdrukt
 

92
00:01:34,390 --> 00:01:34,400

 

93
00:01:34,400 --> 00:01:36,710

laat de draad twee seconden slapen

94
00:01:36,710 --> 00:01:36,720
laat de draad twee seconden slapen
 

95
00:01:36,720 --> 00:01:38,950
laat de draad twee seconden slapen
en retourneert de intensiteit

96
00:01:38,950 --> 00:01:38,960
en retourneert de intensiteit
 

97
00:01:38,960 --> 00:01:41,030
en retourneert de intensiteit
nu hier in Maine we simuleren de

98
00:01:41,030 --> 00:01:41,040
nu hier in Maine we simuleren de
 

99
00:01:41,040 --> 00:01:42,230
nu hier in Maine we simuleren de
code die zou worden aangeroepen

100
00:01:42,230 --> 00:01:42,240
code die zou worden aangeroepen
 

101
00:01:42,240 --> 00:01:44,870
code die zou worden aangeroepen
als de gebruiker een nieuwe training wilde we

102
00:01:44,870 --> 00:01:44,880
als de gebruiker een nieuwe training wilde we
 

103
00:01:44,880 --> 00:01:46,710
als de gebruiker een nieuwe training wilde we
noemen training genereren  dat is een

104
00:01:46,710 --> 00:01:46,720
noemen training genereren  dat is een
 

105
00:01:46,720 --> 00:01:48,630
noemen training genereren  dat is een
functie die we nog niet hebben gemaakt

106
00:01:48,630 --> 00:01:48,640
functie die we nog niet hebben gemaakt
 

107
00:01:48,640 --> 00:01:50,310
functie die we nog niet hebben gemaakt
en het genereren van een training heeft twee

108
00:01:50,310 --> 00:01:50,320
en het genereren van een training heeft twee
 

109
00:01:50,320 --> 00:01:52,710
en het genereren van een training heeft twee
parameters nodig, de intensiteit die een gebruiker heeft

110
00:01:52,710 --> 00:01:52,720
parameters nodig, de intensiteit die een gebruiker heeft
 

111
00:01:52,720 --> 00:01:53,670
parameters nodig, de intensiteit die een gebruiker heeft
gespecificeerd

112
00:01:53,670 --> 00:01:53,680
gespecificeerd
 

113
00:01:53,680 --> 00:01:55,830
gespecificeerd
en een willekeurig getal om wat

114
00:01:55,830 --> 00:01:55,840
en een willekeurig getal om wat
 

115
00:01:55,840 --> 00:01:58,149
en een willekeurig getal om wat
variatie aan de gegenereerde training te bieden

116
00:01:58,149 --> 00:01:58,159
variatie aan de gegenereerde training te bieden
 

117
00:01:58,159 --> 00:01:59,990
variatie aan de gegenereerde training te bieden
, omdat we

118
00:01:59,990 --> 00:02:00,000
, omdat we
 

119
00:02:00,000 --> 00:02:01,830
, omdat we
in dit voorbeeld niet echt de voorkant bouwen,

120
00:02:01,830 --> 00:02:01,840
in dit voorbeeld niet echt de voorkant bouwen,
 

121
00:02:01,840 --> 00:02:04,469
in dit voorbeeld niet echt de voorkant bouwen,
we '  Ik zal slagen in een gesimuleerde intensiteit van

122
00:02:04,469 --> 00:02:04,479
we '  Ik zal slagen in een gesimuleerde intensiteit van
 

123
00:02:04,479 --> 00:02:05,030
we '  Ik zal slagen in een gesimuleerde intensiteit van
10

124
00:02:05,030 --> 00:02:05,040
10
 

125
00:02:05,040 --> 00:02:07,109
10
en voor het willekeurige getal kunnen we

126
00:02:07,109 --> 00:02:07,119
en voor het willekeurige getal kunnen we
 

127
00:02:07,119 --> 00:02:08,949
en voor het willekeurige getal kunnen we
de randkrat gebruiken en daadwerkelijk een willekeurig getal genereren,

128
00:02:08,949 --> 00:02:09,749
de randkrat gebruiken en daadwerkelijk een willekeurig getal genereren,
 

129
00:02:09,749 --> 00:02:09,759

 

130
00:02:09,759 --> 00:02:11,510

maar nogmaals, dat is geen  t onze focus in dit

131
00:02:11,510 --> 00:02:11,520
maar nogmaals, dat is geen  t onze focus in dit
 

132
00:02:11,520 --> 00:02:13,589
maar nogmaals, dat is geen  t onze focus in dit
voorbeeld, dus we zullen gewoon het willekeurige

133
00:02:13,589 --> 00:02:13,599
voorbeeld, dus we zullen gewoon het willekeurige
 

134
00:02:13,599 --> 00:02:15,350
voorbeeld, dus we zullen gewoon het willekeurige
getal instellen op een hardgecodeerde

135
00:02:15,350 --> 00:02:15,360
getal instellen op een hardgecodeerde
 

136
00:02:15,360 --> 00:02:17,670
getal instellen op een hardgecodeerde
zeven. Vervolgens definiëren we de gegenereerde

137
00:02:17,670 --> 00:02:17,680
zeven. Vervolgens definiëren we de gegenereerde
 

138
00:02:17,680 --> 00:02:18,869
zeven. Vervolgens definiëren we de gegenereerde
trainingsfunctie

139
00:02:18,869 --> 00:02:18,879
trainingsfunctie
 

140
00:02:18,879 --> 00:02:21,990
trainingsfunctie
direct onder de hoofdfunctie voor het

141
00:02:21,990 --> 00:02:22,000
direct onder de hoofdfunctie voor het
 

142
00:02:22,000 --> 00:02:23,990
direct onder de hoofdfunctie voor het
genereren van training neemt een

143
00:02:23,990 --> 00:02:24,000
genereren van training neemt een
 

144
00:02:24,000 --> 00:02:25,910
genereren van training neemt een
intensiteit en een willekeurig getal in

145
00:02:25,910 --> 00:02:25,920
intensiteit en een willekeurig getal in
 

146
00:02:25,920 --> 00:02:28,630
intensiteit en een willekeurig getal in
als de intensiteit minder is dan 25  we

147
00:02:28,630 --> 00:02:28,640
als de intensiteit minder is dan 25  we
 

148
00:02:28,640 --> 00:02:30,710
als de intensiteit minder is dan 25  we
printen do x aantal push-ups uit

149
00:02:30,710 --> 00:02:30,720
printen do x aantal push-ups uit
 

150
00:02:30,720 --> 00:02:33,030
printen do x aantal push-ups uit
en doen x aantal sit-ups om erachter te komen

151
00:02:33,030 --> 00:02:33,040
en doen x aantal sit-ups om erachter te komen
 

152
00:02:33,040 --> 00:02:34,949
en doen x aantal sit-ups om erachter te komen
hoeveel push-ups en setups we moeten doen

153
00:02:34,949 --> 00:02:34,959
hoeveel push-ups en setups we moeten doen
 

154
00:02:34,959 --> 00:02:37,990
hoeveel push-ups en setups we moeten doen
we noemen onze dure berekening als de

155
00:02:37,990 --> 00:02:38,000
we noemen onze dure berekening als de
 

156
00:02:38,000 --> 00:02:39,910
we noemen onze dure berekening als de
intensiteit meer dan 25 is,

157
00:02:39,910 --> 00:02:39,920
intensiteit meer dan 25 is,
 

158
00:02:39,920 --> 00:02:42,710
intensiteit meer dan 25 is,
dan gaan we naar de else-clausule hier we

159
00:02:42,710 --> 00:02:42,720
dan gaan we naar de else-clausule hier we
 

160
00:02:42,720 --> 00:02:43,030
dan gaan we naar de else-clausule hier we
controleer

161
00:02:43,030 --> 00:02:43,040
controleer
 

162
00:02:43,040 --> 00:02:45,750
controleer
ons willekeurig getal als het precies drie is,

163
00:02:45,750 --> 00:02:45,760
ons willekeurig getal als het precies drie is,
 

164
00:02:45,760 --> 00:02:47,509
ons willekeurig getal als het precies drie is,
we printen uit neem een ​​pauze,

165
00:02:47,509 --> 00:02:47,519
we printen uit neem een ​​pauze,
 

166
00:02:47,519 --> 00:02:49,910
we printen uit neem een ​​pauze,
anders noemen we run x aantal

167
00:02:49,910 --> 00:02:49,920
anders noemen we run x aantal
 

168
00:02:49,920 --> 00:02:51,670
anders noemen we run x aantal
minuten en nogmaals om het

169
00:02:51,670 --> 00:02:51,680
minuten en nogmaals om het
 

170
00:02:51,680 --> 00:02:53,110
minuten en nogmaals om het
aantal minuten te

171
00:02:53,110 --> 00:02:53,120
aantal minuten te
 

172
00:02:53,120 --> 00:02:55,350
aantal minuten te
berekenen gebruiken we onze dure berekeningsfunctie

173
00:02:55,350 --> 00:02:55,360
berekenen gebruiken we onze dure berekeningsfunctie
 

174
00:02:55,360 --> 00:02:56,150
berekenen gebruiken we onze dure berekeningsfunctie

175
00:02:56,150 --> 00:02:56,160

 

176
00:02:56,160 --> 00:02:57,910

nu werkt dit, maar het kan wat

177
00:02:57,910 --> 00:02:57,920
nu werkt dit, maar het kan wat
 

178
00:02:57,920 --> 00:02:59,750
nu werkt dit, maar het kan wat
refactoring gebruiken een probleem is  dat we

179
00:02:59,750 --> 00:02:59,760
refactoring gebruiken een probleem is  dat we
 

180
00:02:59,760 --> 00:03:01,350
refactoring gebruiken een probleem is  dat we
onze dure functie

181
00:03:01,350 --> 00:03:01,360
onze dure functie
 

182
00:03:01,360 --> 00:03:03,910
onze dure functie
op meerdere plaatsen aanroepen, dus als we de

183
00:03:03,910 --> 00:03:03,920
op meerdere plaatsen aanroepen, dus als we de
 

184
00:03:03,920 --> 00:03:05,350
op meerdere plaatsen aanroepen, dus als we de
manier veranderen waarop de functie wordt aangeroepen

185
00:03:05,350 --> 00:03:05,360
manier veranderen waarop de functie wordt aangeroepen
 

186
00:03:05,360 --> 00:03:07,910
manier veranderen waarop de functie wordt aangeroepen
, bijvoorbeeld als we een andere parameter toevoegen,

187
00:03:07,910 --> 00:03:07,920
, bijvoorbeeld als we een andere parameter toevoegen,
 

188
00:03:07,920 --> 00:03:09,110
, bijvoorbeeld als we een andere parameter toevoegen,
dan moeten we

189
00:03:09,110 --> 00:03:09,120
dan moeten we
 

190
00:03:09,120 --> 00:03:11,589
dan moeten we
alle oproepsites veranderen, ook noemen we onze

191
00:03:11,589 --> 00:03:11,599
alle oproepsites veranderen, ook noemen we onze
 

192
00:03:11,599 --> 00:03:12,710
alle oproepsites veranderen, ook noemen we onze
dure functi  op

193
00:03:12,710 --> 00:03:12,720
dure functi  op
 

194
00:03:12,720 --> 00:03:15,589
dure functi  op
meerdere keren onnodig bijvoorbeeld

195
00:03:15,589 --> 00:03:15,599
meerdere keren onnodig bijvoorbeeld
 

196
00:03:15,599 --> 00:03:16,710
meerdere keren onnodig bijvoorbeeld
in dit if-blok

197
00:03:16,710 --> 00:03:16,720
in dit if-blok
 

198
00:03:16,720 --> 00:03:18,790
in dit if-blok
roepen we onze dure functie twee keer aan,

199
00:03:18,790 --> 00:03:18,800
roepen we onze dure functie twee keer aan,
 

200
00:03:18,800 --> 00:03:21,030
roepen we onze dure functie twee keer aan,
terwijl we het eigenlijk maar één keer hoeven aan te roepen

201
00:03:21,030 --> 00:03:21,040
terwijl we het eigenlijk maar één keer hoeven aan te roepen
 

202
00:03:21,040 --> 00:03:23,190
terwijl we het eigenlijk maar één keer hoeven aan te roepen
en dan de retourwaarde door te geven aan

203
00:03:23,190 --> 00:03:23,200
en dan de retourwaarde door te geven aan
 

204
00:03:23,200 --> 00:03:24,789
en dan de retourwaarde door te geven aan
beide printinstructies.

205
00:03:24,789 --> 00:03:24,799
beide printinstructies.
 

206
00:03:24,799 --> 00:03:26,630
beide printinstructies.
Dit is misschien goed voor normale

207
00:03:26,630 --> 00:03:26,640
Dit is misschien goed voor normale
 

208
00:03:26,640 --> 00:03:28,470
Dit is misschien goed voor normale
functies, maar onthoud dat dit een

209
00:03:28,470 --> 00:03:28,480
functies, maar onthoud dat dit een
 

210
00:03:28,480 --> 00:03:30,229
functies, maar onthoud dat dit een
dure is  functie die twee

211
00:03:30,229 --> 00:03:30,239
dure is  functie die twee
 

212
00:03:30,239 --> 00:03:32,550
dure is  functie die twee
seconden nodig heeft om uit te voeren, dus we willen het

213
00:03:32,550 --> 00:03:32,560
seconden nodig heeft om uit te voeren, dus we willen het
 

214
00:03:32,560 --> 00:03:34,470
seconden nodig heeft om uit te voeren, dus we willen het
aantal keren dat we deze functie aanroepen

215
00:03:34,470 --> 00:03:34,480
aantal keren dat we deze functie aanroepen
 

216
00:03:34,480 --> 00:03:37,110
aantal keren dat we deze functie aanroepen
zoveel mogelijk beperken. Laten we deze twee

217
00:03:37,110 --> 00:03:37,120
zoveel mogelijk beperken. Laten we deze twee
 

218
00:03:37,120 --> 00:03:37,750
zoveel mogelijk beperken. Laten we deze twee
problemen oplossen

219
00:03:37,750 --> 00:03:37,760
problemen oplossen
 

220
00:03:37,760 --> 00:03:39,670
problemen oplossen
door het resultaat van onze dure

221
00:03:39,670 --> 00:03:39,680
door het resultaat van onze dure
 

222
00:03:39,680 --> 00:03:41,830
door het resultaat van onze dure
functie-aanroep in een variabele op te slaan,

223
00:03:41,830 --> 00:03:41,840
functie-aanroep in een variabele op te slaan,
 

224
00:03:41,840 --> 00:03:43,270
functie-aanroep in een variabele op te slaan,
dus we zullen een nieuwe variabele maken op

225
00:03:43,270 --> 00:03:43,280
dus we zullen een nieuwe variabele maken op
 

226
00:03:43,280 --> 00:03:44,869
dus we zullen een nieuwe variabele maken op
bovenaan onze functie

227
00:03:44,869 --> 00:03:44,879
bovenaan onze functie
 

228
00:03:44,879 --> 00:03:50,470
bovenaan onze functie
zullen we het duur resultaat noemen

229
00:03:50,470 --> 00:03:50,480

 

230
00:03:50,480 --> 00:03:52,789

en we zullen het gelijk stellen aan onze dure

231
00:03:52,789 --> 00:03:52,799
en we zullen het gelijk stellen aan onze dure
 

232
00:03:52,799 --> 00:03:56,710
en we zullen het gelijk stellen aan onze dure
functieaanroep

233
00:03:56,710 --> 00:03:56,720

 

234
00:03:56,720 --> 00:03:58,550

dan zullen we onze variabele gebruiken in al onze

235
00:03:58,550 --> 00:03:58,560
dan zullen we onze variabele gebruiken in al onze
 

236
00:03:58,560 --> 00:04:07,509
dan zullen we onze variabele gebruiken in al onze
printregelinstructies

237
00:04:07,509 --> 00:04:07,519

 

238
00:04:07,519 --> 00:04:09,509

nu dit zorgt voor ons

239
00:04:09,509 --> 00:04:09,519
nu dit zorgt voor ons
 

240
00:04:09,519 --> 00:04:11,670
nu dit zorgt voor ons
duplicatieprobleem maar nu hebben we een andere  probleem

241
00:04:11,670 --> 00:04:11,680
duplicatieprobleem maar nu hebben we een andere  probleem
 

242
00:04:11,680 --> 00:04:13,910
duplicatieprobleem maar nu hebben we een andere  probleem
noemen we onze dure functie in

243
00:04:13,910 --> 00:04:13,920
noemen we onze dure functie in
 

244
00:04:13,920 --> 00:04:15,429
noemen we onze dure functie in
elk geval

245
00:04:15,429 --> 00:04:15,439
elk geval
 

246
00:04:15,439 --> 00:04:17,509
elk geval
hier bovenaan, ongeacht wat er

247
00:04:17,509 --> 00:04:17,519
hier bovenaan, ongeacht wat er
 

248
00:04:17,519 --> 00:04:18,629
hier bovenaan, ongeacht wat er
hieronder wordt uitgevoerd,

249
00:04:18,629 --> 00:04:18,639
hieronder wordt uitgevoerd,
 

250
00:04:18,639 --> 00:04:20,310
hieronder wordt uitgevoerd,
we gaan onze dure functie aanroepen,

251
00:04:20,310 --> 00:04:20,320
we gaan onze dure functie aanroepen,
 

252
00:04:20,320 --> 00:04:22,870
we gaan onze dure functie aanroepen,
maar hier kun je zien dat als

253
00:04:22,870 --> 00:04:22,880
maar hier kun je zien dat als
 

254
00:04:22,880 --> 00:04:24,390
maar hier kun je zien dat als
de willekeurige  nummer is 3

255
00:04:24,390 --> 00:04:24,400
de willekeurige  nummer is 3
 

256
00:04:24,400 --> 00:04:26,070
de willekeurige  nummer is 3
we hebben onze dure functie niet nodig,

257
00:04:26,070 --> 00:04:26,080
we hebben onze dure functie niet nodig,
 

258
00:04:26,080 --> 00:04:27,430
we hebben onze dure functie niet nodig,
want we

259
00:04:27,430 --> 00:04:27,440
want we
 

260
00:04:27,440 --> 00:04:30,310
want we
printen deze tekst gewoon uit wat we willen is

261
00:04:30,310 --> 00:04:30,320
printen deze tekst gewoon uit wat we willen is
 

262
00:04:30,320 --> 00:04:32,310
printen deze tekst gewoon uit wat we willen is
onze code op één plek definiëren,

263
00:04:32,310 --> 00:04:32,320
onze code op één plek definiëren,
 

264
00:04:32,320 --> 00:04:35,270
onze code op één plek definiëren,
maar alleen uitvoeren als dat nodig is, dus

265
00:04:35,270 --> 00:04:35,280
maar alleen uitvoeren als dat nodig is, dus
 

266
00:04:35,280 --> 00:04:37,189
maar alleen uitvoeren als dat nodig is, dus
laten we proberen dit te refactoreren

267
00:04:37,189 --> 00:04:37,199
laten we proberen dit te refactoreren
 

268
00:04:37,199 --> 00:04:39,749
laten we proberen dit te refactoreren
met behulp van sluitingen laten we terug

269
00:04:39,749 --> 00:04:39,759
met behulp van sluitingen laten we terug
 

270
00:04:39,759 --> 00:04:41,030
met behulp van sluitingen laten we terug
naar boven scrollen  van ons programma

271
00:04:41,030 --> 00:04:41,040
naar boven scrollen  van ons programma
 

272
00:04:41,040 --> 00:04:43,270
naar boven scrollen  van ons programma
en in plaats van deze dure

273
00:04:43,270 --> 00:04:43,280
en in plaats van deze dure
 

274
00:04:43,280 --> 00:04:44,550
en in plaats van deze dure
resultaatvariabele te

275
00:04:44,550 --> 00:04:44,560
resultaatvariabele te
 

276
00:04:44,560 --> 00:04:48,150
resultaatvariabele te
definiëren, definiëren we een sluiting

277
00:04:48,150 --> 00:04:48,160

 

278
00:04:48,160 --> 00:04:50,310

hier hebben we een variabele genaamd dure

279
00:04:50,310 --> 00:04:50,320
hier hebben we een variabele genaamd dure
 

280
00:04:50,320 --> 00:04:52,550
hier hebben we een variabele genaamd dure
sluiting die gelijk is aan

281
00:04:52,550 --> 00:04:52,560
sluiting die gelijk is aan
 

282
00:04:52,560 --> 00:04:55,030
sluiting die gelijk is aan
onze sluiting onthoud nu dat sluitingen

283
00:04:55,030 --> 00:04:55,040
onze sluiting onthoud nu dat sluitingen
 

284
00:04:55,040 --> 00:04:56,469
onze sluiting onthoud nu dat sluitingen
anonieme functies zijn

285
00:04:56,469 --> 00:04:56,479
anonieme functies zijn
 

286
00:04:56,479 --> 00:04:58,390
anonieme functies zijn
en het verschil tussen een sluiting en

287
00:04:58,390 --> 00:04:58,400
en het verschil tussen een sluiting en
 

288
00:04:58,400 --> 00:05:00,230
en het verschil tussen een sluiting en
een functie of tenminste de  het belangrijkste visuele

289
00:05:00,230 --> 00:05:00,240
een functie of tenminste de  het belangrijkste visuele
 

290
00:05:00,240 --> 00:05:00,870
een functie of tenminste de  het belangrijkste visuele
verschil

291
00:05:00,870 --> 00:05:00,880
verschil
 

292
00:05:00,880 --> 00:05:03,029
verschil
is dat in plaats van dat de invoerparameters

293
00:05:03,029 --> 00:05:03,039
is dat in plaats van dat de invoerparameters
 

294
00:05:03,039 --> 00:05:04,629
is dat in plaats van dat de invoerparameters
tussen haakjes staan,

295
00:05:04,629 --> 00:05:04,639
tussen haakjes staan,
 

296
00:05:04,639 --> 00:05:06,790
tussen haakjes staan,
ze zich in deze verticale pijpen bevinden,

297
00:05:06,790 --> 00:05:06,800
ze zich in deze verticale pijpen bevinden,
 

298
00:05:06,800 --> 00:05:07,749
ze zich in deze verticale pijpen bevinden,
dus hier hebben we één

299
00:05:07,749 --> 00:05:07,759
dus hier hebben we één
 

300
00:05:07,759 --> 00:05:10,230
dus hier hebben we één
invoerparameter die num is, gevolgd door

301
00:05:10,230 --> 00:05:10,240
invoerparameter die num is, gevolgd door
 

302
00:05:10,240 --> 00:05:10,950
invoerparameter die num is, gevolgd door
haakjes

303
00:05:10,950 --> 00:05:10,960
haakjes
 

304
00:05:10,960 --> 00:05:13,590
haakjes
die het lichaam van onze sluiting bevatten en

305
00:05:13,590 --> 00:05:13,600
die het lichaam van onze sluiting bevatten en
 

306
00:05:13,600 --> 00:05:14,790
die het lichaam van onze sluiting bevatten en
als onze sluiting slechts

307
00:05:14,790 --> 00:05:14,800
als onze sluiting slechts
 

308
00:05:14,800 --> 00:05:16,629
als onze sluiting slechts
één regel was, dan  we hebben de haakjes niet eens nodig,

309
00:05:16,629 --> 00:05:16,639
één regel was, dan  we hebben de haakjes niet eens nodig,
 

310
00:05:16,639 --> 00:05:19,189
één regel was, dan  we hebben de haakjes niet eens nodig,
dus in ons sluitlichaam

311
00:05:19,189 --> 00:05:19,199
dus in ons sluitlichaam
 

312
00:05:19,199 --> 00:05:21,909
dus in ons sluitlichaam
voeren we onze dure berekening uit en

313
00:05:21,909 --> 00:05:21,919
voeren we onze dure berekening uit en
 

314
00:05:21,919 --> 00:05:22,629
voeren we onze dure berekening uit en
dan geven we

315
00:05:22,629 --> 00:05:22,639
dan geven we
 

316
00:05:22,639 --> 00:05:25,990
dan geven we
num terug aan het einde hebben we

317
00:05:25,990 --> 00:05:26,000
num terug aan het einde hebben we
 

318
00:05:26,000 --> 00:05:28,790
num terug aan het einde hebben we
deze semico nodig  lon hier om de let-verklaring af te ronden

319
00:05:28,790 --> 00:05:29,830
deze semico nodig  lon hier om de let-verklaring af te ronden
 

320
00:05:29,830 --> 00:05:29,840

 

321
00:05:29,840 --> 00:05:31,830

merk op dat onze dure

322
00:05:31,830 --> 00:05:31,840
merk op dat onze dure
 

323
00:05:31,840 --> 00:05:34,070
merk op dat onze dure
sluitingsvariabele niet de retourwaarde van onze

324
00:05:34,070 --> 00:05:34,080
sluitingsvariabele niet de retourwaarde van onze
 

325
00:05:34,080 --> 00:05:34,870
sluitingsvariabele niet de retourwaarde van onze
sluiting

326
00:05:34,870 --> 00:05:34,880
sluiting
 

327
00:05:34,880 --> 00:05:37,189
sluiting
opslaat, maar de sluiting zelf opslaat.

328
00:05:37,189 --> 00:05:37,199
opslaat, maar de sluiting zelf opslaat.
 

329
00:05:37,199 --> 00:05:39,590
opslaat, maar de sluiting zelf opslaat.
Merk ook op dat het lichaam van onze

330
00:05:39,590 --> 00:05:39,600
Merk ook op dat het lichaam van onze
 

331
00:05:39,600 --> 00:05:41,990
Merk ook op dat het lichaam van onze
sluiting identiek is aan het lichaam van onze

332
00:05:41,990 --> 00:05:42,000
sluiting identiek is aan het lichaam van onze
 

333
00:05:42,000 --> 00:05:43,670
sluiting identiek is aan het lichaam van onze
dure functie

334
00:05:43,670 --> 00:05:43,680
dure functie
 

335
00:05:43,680 --> 00:05:46,230
dure functie
die hier nu is gedefinieerd  dat onze sluiting is gedefinieerd

336
00:05:46,230 --> 00:05:46,240
die hier nu is gedefinieerd  dat onze sluiting is gedefinieerd
 

337
00:05:46,240 --> 00:05:47,670
die hier nu is gedefinieerd  dat onze sluiting is gedefinieerd
, kunnen we deze in

338
00:05:47,670 --> 00:05:47,680
, kunnen we deze in
 

339
00:05:47,680 --> 00:05:54,550
, kunnen we deze in
onze printregel-instructies

340
00:05:54,550 --> 00:05:54,560

 

341
00:05:54,560 --> 00:05:56,230

noemen, aangezien u kunt zien dat de syntaxis voor het aanroepen van

342
00:05:56,230 --> 00:05:56,240
noemen, aangezien u kunt zien dat de syntaxis voor het aanroepen van
 

343
00:05:56,240 --> 00:05:58,629
noemen, aangezien u kunt zien dat de syntaxis voor het aanroepen van
onze sluiting vergelijkbaar is met de syntaxis voor het

344
00:05:58,629 --> 00:05:58,639
onze sluiting vergelijkbaar is met de syntaxis voor het
 

345
00:05:58,639 --> 00:06:00,150
onze sluiting vergelijkbaar is met de syntaxis voor het
aanroepen van een functie.

346
00:06:00,150 --> 00:06:00,160
aanroepen van een functie.
 

347
00:06:00,160 --> 00:06:02,469
aanroepen van een functie.
We specificeren onze variabelenaam die

348
00:06:02,469 --> 00:06:02,479
We specificeren onze variabelenaam die
 

349
00:06:02,479 --> 00:06:03,430
We specificeren onze variabelenaam die
onze sluiting bevat,

350
00:06:03,430 --> 00:06:03,440
onze sluiting bevat,
 

351
00:06:03,440 --> 00:06:06,150
onze sluiting bevat,
gevolgd door haakjes en dan doorgeven in

352
00:06:06,150 --> 00:06:06,160
gevolgd door haakjes en dan doorgeven in
 

353
00:06:06,160 --> 00:06:07,590
gevolgd door haakjes en dan doorgeven in
de  invoerparameters

354
00:06:07,590 --> 00:06:07,600
de  invoerparameters
 

355
00:06:07,600 --> 00:06:09,590
de  invoerparameters
nu is onze logica op één plek gedefinieerd

356
00:06:09,590 --> 00:06:09,600
nu is onze logica op één plek gedefinieerd
 

357
00:06:09,600 --> 00:06:11,189
nu is onze logica op één plek gedefinieerd
en we bellen onze dure

358
00:06:11,189 --> 00:06:11,199
en we bellen onze dure
 

359
00:06:11,199 --> 00:06:12,150
en we bellen onze dure
operatie alleen

360
00:06:12,150 --> 00:06:12,160
operatie alleen
 

361
00:06:12,160 --> 00:06:14,550
operatie alleen
wanneer dat nodig is, maar we zijn terug met een oud

362
00:06:14,550 --> 00:06:14,560
wanneer dat nodig is, maar we zijn terug met een oud
 

363
00:06:14,560 --> 00:06:15,749
wanneer dat nodig is, maar we zijn terug met een oud
probleem, namelijk dat we

364
00:06:15,749 --> 00:06:15,759
probleem, namelijk dat we
 

365
00:06:15,759 --> 00:06:17,670
probleem, namelijk dat we
in dit if-blok onze

366
00:06:17,670 --> 00:06:17,680
in dit if-blok onze
 

367
00:06:17,680 --> 00:06:19,110
in dit if-blok onze
dure operatie

368
00:06:19,110 --> 00:06:19,120
dure operatie
 

369
00:06:19,120 --> 00:06:21,830
dure operatie
twee keer aanroepen, wat niet goed is  nu kunnen we

370
00:06:21,830 --> 00:06:21,840
twee keer aanroepen, wat niet goed is  nu kunnen we
 

371
00:06:21,840 --> 00:06:23,590
twee keer aanroepen, wat niet goed is  nu kunnen we
dit probleem oplossen door het resultaat van

372
00:06:23,590 --> 00:06:23,600
dit probleem oplossen door het resultaat van
 

373
00:06:23,600 --> 00:06:25,189
dit probleem oplossen door het resultaat van
onze dure sluitingsaanroep

374
00:06:25,189 --> 00:06:25,199
onze dure sluitingsaanroep
 

375
00:06:25,199 --> 00:06:27,350
onze dure sluitingsaanroep
bovenaan deze if-instructie op te slaan, maar

376
00:06:27,350 --> 00:06:27,360
bovenaan deze if-instructie op te slaan, maar
 

377
00:06:27,360 --> 00:06:28,710
bovenaan deze if-instructie op te slaan, maar
er is een andere manier om dit

378
00:06:28,710 --> 00:06:28,720
er is een andere manier om dit
 

379
00:06:28,720 --> 00:06:29,270
er is een andere manier om dit
probleem op te lossen,

380
00:06:29,270 --> 00:06:29,280
probleem op te lossen,
 

381
00:06:29,280 --> 00:06:31,670
probleem op te lossen,
wat we zullen doen  even over praten

382
00:06:31,670 --> 00:06:31,680
wat we zullen doen  even over praten
 

383
00:06:31,680 --> 00:06:33,430
wat we zullen doen  even over praten
voordat we dat probleem oplossen, het is

384
00:06:33,430 --> 00:06:33,440
voordat we dat probleem oplossen, het is
 

385
00:06:33,440 --> 00:06:34,870
voordat we dat probleem oplossen, het is
je misschien opgevallen dat we

386
00:06:34,870 --> 00:06:34,880
je misschien opgevallen dat we
 

387
00:06:34,880 --> 00:06:36,629
je misschien opgevallen dat we
het type van de invoerparameter van onze sluiting niet hoefden te annoteren,

388
00:06:36,629 --> 00:06:36,639
het type van de invoerparameter van onze sluiting niet hoefden te annoteren,
 

389
00:06:36,639 --> 00:06:37,270
het type van de invoerparameter van onze sluiting niet hoefden te annoteren,

390
00:06:37,270 --> 00:06:37,280

 

391
00:06:37,280 --> 00:06:39,350

noch hoefden we

392
00:06:39,350 --> 00:06:39,360
noch hoefden we
 

393
00:06:39,360 --> 00:06:40,710
noch hoefden we
de retourwaarde van onze sluiting te annoteren

394
00:06:40,710 --> 00:06:40,720
de retourwaarde van onze sluiting te annoteren
 

395
00:06:40,720 --> 00:06:42,950
de retourwaarde van onze sluiting te annoteren
voor reguliere functies, we

396
00:06:42,950 --> 00:06:42,960
voor reguliere functies, we
 

397
00:06:42,960 --> 00:06:44,790
voor reguliere functies, we
zouden het type moeten specificeren  van onze

398
00:06:44,790 --> 00:06:44,800
zouden het type moeten specificeren  van onze
 

399
00:06:44,800 --> 00:06:45,909
zouden het type moeten specificeren  van onze
invoerparameters

400
00:06:45,909 --> 00:06:45,919
invoerparameters
 

401
00:06:45,919 --> 00:06:48,070
invoerparameters
en het type van onze retourwaarden en

402
00:06:48,070 --> 00:06:48,080
en het type van onze retourwaarden en
 

403
00:06:48,080 --> 00:06:49,990
en het type van onze retourwaarden en
dat komt omdat functies deel uitmaken van een

404
00:06:49,990 --> 00:06:50,000
dat komt omdat functies deel uitmaken van een
 

405
00:06:50,000 --> 00:06:51,350
dat komt omdat functies deel uitmaken van een
expliciete interface die wordt

406
00:06:51,350 --> 00:06:51,360
expliciete interface die wordt
 

407
00:06:51,360 --> 00:06:53,749
expliciete interface die wordt
blootgesteld aan gebruikers, dus overeenstemming bereiken over de

408
00:06:53,749 --> 00:06:53,759
blootgesteld aan gebruikers, dus overeenstemming bereiken over de
 

409
00:06:53,759 --> 00:06:55,110
blootgesteld aan gebruikers, dus overeenstemming bereiken over de
typen die worden doorgegeven

410
00:06:55,110 --> 00:06:55,120
typen die worden doorgegeven
 

411
00:06:55,120 --> 00:06:57,830
typen die worden doorgegeven
en geretourneerd, is belangrijk, sluitingen

412
00:06:57,830 --> 00:06:57,840
en geretourneerd, is belangrijk, sluitingen
 

413
00:06:57,840 --> 00:06:59,510
en geretourneerd, is belangrijk, sluitingen
zijn daarentegen meestal kort en

414
00:06:59,510 --> 00:06:59,520
zijn daarentegen meestal kort en
 

415
00:06:59,520 --> 00:07:02,150
zijn daarentegen meestal kort en
alleen relevant binnen een nauwe  context, zodat

416
00:07:02,150 --> 00:07:02,160
alleen relevant binnen een nauwe  context, zodat
 

417
00:07:02,160 --> 00:07:02,550
alleen relevant binnen een nauwe  context, zodat
de

418
00:07:02,550 --> 00:07:02,560
de
 

419
00:07:02,560 --> 00:07:04,870
de
compiler de

420
00:07:04,870 --> 00:07:04,880
compiler de
 

421
00:07:04,880 --> 00:07:05,990
compiler de
typen invoerparameter

422
00:07:05,990 --> 00:07:06,000
typen invoerparameter
 

423
00:07:06,000 --> 00:07:08,230
typen invoerparameter
en de retourtypen kan bepalen. Dit is vergelijkbaar met

424
00:07:08,230 --> 00:07:08,240
en de retourtypen kan bepalen. Dit is vergelijkbaar met
 

425
00:07:08,240 --> 00:07:10,150
en de retourtypen kan bepalen. Dit is vergelijkbaar met
hoe de compiler

426
00:07:10,150 --> 00:07:10,160
hoe de compiler
 

427
00:07:10,160 --> 00:07:12,070
hoe de compiler
de typen van de meeste variabelen

428
00:07:12,070 --> 00:07:12,080
de typen van de meeste variabelen
 

429
00:07:12,080 --> 00:07:13,749
de typen van de meeste variabelen
kan bepalen merk op dat we de typen expliciet kunnen maken

430
00:07:13,749 --> 00:07:13,759
kan bepalen merk op dat we de typen expliciet kunnen maken
 

431
00:07:13,759 --> 00:07:17,430
kan bepalen merk op dat we de typen expliciet kunnen maken
als we dat willen, dus

432
00:07:17,430 --> 00:07:17,440
als we dat willen, dus
 

433
00:07:17,440 --> 00:07:19,270
als we dat willen, dus
dit maakt de typen expliciet  ten

434
00:07:19,270 --> 00:07:19,280
dit maakt de typen expliciet  ten
 

435
00:07:19,280 --> 00:07:21,350
dit maakt de typen expliciet  ten
koste van uitgebreider te zijn,

436
00:07:21,350 --> 00:07:21,360
koste van uitgebreider te zijn,
 

437
00:07:21,360 --> 00:07:23,189
koste van uitgebreider te zijn,
merk op dat sluitingsdefinities

438
00:07:23,189 --> 00:07:23,199
merk op dat sluitingsdefinities
 

439
00:07:23,199 --> 00:07:25,350
merk op dat sluitingsdefinities
slechts één concreet type kunnen hebben dat kan worden afgeleid

440
00:07:25,350 --> 00:07:25,360
slechts één concreet type kunnen hebben dat kan worden afgeleid
 

441
00:07:25,360 --> 00:07:27,749
slechts één concreet type kunnen hebben dat kan worden afgeleid
voor elke invoerparameter, bijvoorbeeld

442
00:07:27,749 --> 00:07:27,759
voor elke invoerparameter, bijvoorbeeld
 

443
00:07:27,759 --> 00:07:29,110
voor elke invoerparameter, bijvoorbeeld
hier hebben we  een variabele hebben met de naam

444
00:07:29,110 --> 00:07:29,120
hier hebben we  een variabele hebben met de naam
 

445
00:07:29,120 --> 00:07:31,189
hier hebben we  een variabele hebben met de naam
voorbeeldafsluiting die gelijk is aan een

446
00:07:31,189 --> 00:07:31,199
voorbeeldafsluiting die gelijk is aan een
 

447
00:07:31,199 --> 00:07:33,270
voorbeeldafsluiting die gelijk is aan een
afsluiting die x opneemt

448
00:07:33,270 --> 00:07:33,280
afsluiting die x opneemt
 

449
00:07:33,280 --> 00:07:36,150
afsluiting die x opneemt
en vervolgens x retourneert nu omdat de

450
00:07:36,150 --> 00:07:36,160
en vervolgens x retourneert nu omdat de
 

451
00:07:36,160 --> 00:07:37,589
en vervolgens x retourneert nu omdat de
afsluiting

452
00:07:37,589 --> 00:07:37,599
afsluiting
 

453
00:07:37,599 --> 00:07:40,309
afsluiting
hier op regel 26 wordt gebruikt met een tekenreeks de

454
00:07:40,309 --> 00:07:40,319
hier op regel 26 wordt gebruikt met een tekenreeks de
 

455
00:07:40,319 --> 00:07:41,670
hier op regel 26 wordt gebruikt met een tekenreeks de
compiler leidt hieruit af

456
00:07:41,670 --> 00:07:41,680
compiler leidt hieruit af
 

457
00:07:41,680 --> 00:07:43,830
compiler leidt hieruit af
dat het invoerparametertype een

458
00:07:43,830 --> 00:07:43,840
dat het invoerparametertype een
 

459
00:07:43,840 --> 00:07:46,230
dat het invoerparametertype een
tekenreeks is, maar dan direct eronder op regel

460
00:07:46,230 --> 00:07:46,240
tekenreeks is, maar dan direct eronder op regel
 

461
00:07:46,240 --> 00:07:47,270
tekenreeks is, maar dan direct eronder op regel
27

462
00:07:47,270 --> 00:07:47,280
27
 

463
00:07:47,280 --> 00:07:50,309
27
we noemen ons voorbeeld afsluitvariabele

464
00:07:50,309 --> 00:07:50,319
we noemen ons voorbeeld afsluitvariabele
 

465
00:07:50,319 --> 00:07:53,110
we noemen ons voorbeeld afsluitvariabele
met een geheel getal, nu zal de compiler

466
00:07:53,110 --> 00:07:53,120
met een geheel getal, nu zal de compiler
 

467
00:07:53,120 --> 00:07:53,830
met een geheel getal, nu zal de compiler
klagen

468
00:07:53,830 --> 00:07:53,840
klagen
 

469
00:07:53,840 --> 00:07:55,350
klagen
en de pijl zal zeggen dat we niet-

470
00:07:55,350 --> 00:07:55,360
en de pijl zal zeggen dat we niet-
 

471
00:07:55,360 --> 00:07:57,510
en de pijl zal zeggen dat we niet-
overeenkomende typen hebben, we verwachten een

472
00:07:57,510 --> 00:07:57,520
overeenkomende typen hebben, we verwachten een
 

473
00:07:57,520 --> 00:07:58,550
overeenkomende typen hebben, we verwachten een
string, maar we krijgen

474
00:07:58,550 --> 00:07:58,560
string, maar we krijgen
 

475
00:07:58,560 --> 00:08:00,950
string, maar we krijgen
een geheel getal, dus de manier waarop de compiler werkt,

476
00:08:00,950 --> 00:08:00,960
een geheel getal, dus de manier waarop de compiler werkt,
 

477
00:08:00,960 --> 00:08:02,869
een geheel getal, dus de manier waarop de compiler werkt,
is dat het eerste type is doorgegeven aan onze

478
00:08:02,869 --> 00:08:02,879
is dat het eerste type is doorgegeven aan onze
 

479
00:08:02,879 --> 00:08:03,670
is dat het eerste type is doorgegeven aan onze
sluiting

480
00:08:03,670 --> 00:08:03,680
sluiting
 

481
00:08:03,680 --> 00:08:06,309
sluiting
zal het concrete type zijn van onze invoerparameters.

482
00:08:06,309 --> 00:08:06,319
zal het concrete type zijn van onze invoerparameters.
 

483
00:08:06,319 --> 00:08:07,189
zal het concrete type zijn van onze invoerparameters.

484
00:08:07,189 --> 00:08:07,199

 

485
00:08:07,199 --> 00:08:08,790

Laten we nu teruggaan naar het probleem van

486
00:08:08,790 --> 00:08:08,800
Laten we nu teruggaan naar het probleem van
 

487
00:08:08,800 --> 00:08:11,029
Laten we nu teruggaan naar het probleem van
het twee keer aanroepen van onze dure sluiting

488
00:08:11,029 --> 00:08:11,039
het twee keer aanroepen van onze dure sluiting
 

489
00:08:11,039 --> 00:08:13,830
het twee keer aanroepen van onze dure sluiting
in dit if-blok. We zouden

490
00:08:13,830 --> 00:08:13,840
in dit if-blok. We zouden
 

491
00:08:13,840 --> 00:08:15,830
in dit if-blok. We zouden
deze functie kunnen oplossen door een variabele

492
00:08:15,830 --> 00:08:15,840
deze functie kunnen oplossen door een variabele
 

493
00:08:15,840 --> 00:08:16,710
deze functie kunnen oplossen door een variabele
bovenaan ons

494
00:08:16,710 --> 00:08:16,720
bovenaan ons
 

495
00:08:16,720 --> 00:08:18,950
bovenaan ons
if-blok te maken en gewoon het resultaat van op te slaan

496
00:08:18,950 --> 00:08:18,960
if-blok te maken en gewoon het resultaat van op te slaan
 

497
00:08:18,960 --> 00:08:20,309
if-blok te maken en gewoon het resultaat van op te slaan
onze dure sluiting

498
00:08:20,309 --> 00:08:20,319
onze dure sluiting
 

499
00:08:20,319 --> 00:08:22,309
onze dure sluiting
en vervolgens dat resultaat gebruiken in

500
00:08:22,309 --> 00:08:22,319
en vervolgens dat resultaat gebruiken in
 

501
00:08:22,319 --> 00:08:23,990
en vervolgens dat resultaat gebruiken in
beide printregelinstructies,

502
00:08:23,990 --> 00:08:24,000
beide printregelinstructies,
 

503
00:08:24,000 --> 00:08:25,830
beide printregelinstructies,
maar we gaan iets anders doen

504
00:08:25,830 --> 00:08:25,840
maar we gaan iets anders doen
 

505
00:08:25,840 --> 00:08:28,070
maar we gaan iets anders doen
wat we zullen doen is het memoisatiepatroon gebruiken

506
00:08:28,070 --> 00:08:28,080
wat we zullen doen is het memoisatiepatroon gebruiken
 

507
00:08:28,080 --> 00:08:28,869
wat we zullen doen is het memoisatiepatroon gebruiken

508
00:08:28,869 --> 00:08:28,879

 

509
00:08:28,879 --> 00:08:31,670

door een str te maken  uct die onze

510
00:08:31,670 --> 00:08:31,680
door een str te maken  uct die onze
 

511
00:08:31,680 --> 00:08:32,630
door een str te maken  uct die onze
sluiting

512
00:08:32,630 --> 00:08:32,640
sluiting
 

513
00:08:32,640 --> 00:08:35,430
sluiting
en het resultaat van onze sluiting hier zal houden ik heb

514
00:08:35,430 --> 00:08:35,440
en het resultaat van onze sluiting hier zal houden ik heb
 

515
00:08:35,440 --> 00:08:37,110
en het resultaat van onze sluiting hier zal houden ik heb
een struct gemaakt met de naam

516
00:08:37,110 --> 00:08:37,120
een struct gemaakt met de naam
 

517
00:08:37,120 --> 00:08:40,070
een struct gemaakt met de naam
cacher recht boven onze trainingsfunctie genereren

518
00:08:40,070 --> 00:08:40,080
cacher recht boven onze trainingsfunctie genereren
 

519
00:08:40,080 --> 00:08:40,870
cacher recht boven onze trainingsfunctie genereren

520
00:08:40,870 --> 00:08:40,880

 

521
00:08:40,880 --> 00:08:43,670

nu om structs enums of zelfs functieparameters te definiëren

522
00:08:43,670 --> 00:08:45,269
nu om structs enums of zelfs functieparameters te definiëren
 

523
00:08:45,269 --> 00:08:45,279

 

524
00:08:45,279 --> 00:08:47,910

die sluitingen gebruiken, we moeten

525
00:08:47,910 --> 00:08:47,920
die sluitingen gebruiken, we moeten
 

526
00:08:47,920 --> 00:08:48,870
die sluitingen gebruiken, we moeten
generieke

527
00:08:48,870 --> 00:08:48,880
generieke
 

528
00:08:48,880 --> 00:08:51,590
generieke
en trait-grenzen gebruiken hier onze cache

529
00:08:51,590 --> 00:08:51,600
en trait-grenzen gebruiken hier onze cache
 

530
00:08:51,600 --> 00:08:52,230
en trait-grenzen gebruiken hier onze cache
instrueren gebruikt

531
00:08:52,230 --> 00:08:52,240
instrueren gebruikt
 

532
00:08:52,240 --> 00:08:55,430
instrueren gebruikt
een generiek genaamd t en hieronder definiëren we een

533
00:08:55,430 --> 00:08:55,440
een generiek genaamd t en hieronder definiëren we een
 

534
00:08:55,440 --> 00:08:56,949
een generiek genaamd t en hieronder definiëren we een
eigenschap die gebonden is aan generiek

535
00:08:56,949 --> 00:08:56,959
eigenschap die gebonden is aan generiek
 

536
00:08:56,959 --> 00:08:59,590
eigenschap die gebonden is aan generiek
en de eigenschap die we gebruiken is fn een afkorting

537
00:08:59,590 --> 00:08:59,600
en de eigenschap die we gebruiken is fn een afkorting
 

538
00:08:59,600 --> 00:09:00,150
en de eigenschap die we gebruiken is fn een afkorting
voor

539
00:09:00,150 --> 00:09:00,160
voor
 

540
00:09:00,160 --> 00:09:02,070
voor
functie nu zonder in te gaan op wat de

541
00:09:02,070 --> 00:09:02,080
functie nu zonder in te gaan op wat de
 

542
00:09:02,080 --> 00:09:04,310
functie nu zonder in te gaan op wat de
fn-eigenschap is, weet gewoon dat het wordt geleverd

543
00:09:04,310 --> 00:09:04,320
fn-eigenschap is, weet gewoon dat het wordt geleverd
 

544
00:09:04,320 --> 00:09:05,750
fn-eigenschap is, weet gewoon dat het wordt geleverd
door de standaardbibliotheek

545
00:09:05,750 --> 00:09:05,760
door de standaardbibliotheek
 

546
00:09:05,760 --> 00:09:07,829
door de standaardbibliotheek
en alle sluitingen implementeren  een van de

547
00:09:07,829 --> 00:09:07,839
en alle sluitingen implementeren  een van de
 

548
00:09:07,839 --> 00:09:09,670
en alle sluitingen implementeren  een van de
drie fn-kenmerken

549
00:09:09,670 --> 00:09:09,680
drie fn-kenmerken
 

550
00:09:09,680 --> 00:09:12,389
drie fn-kenmerken
een daarvan is fn de andere is fn

551
00:09:12,389 --> 00:09:12,399
een daarvan is fn de andere is fn
 

552
00:09:12,399 --> 00:09:13,350
een daarvan is fn de andere is fn
mute

553
00:09:13,350 --> 00:09:13,360
mute
 

554
00:09:13,360 --> 00:09:17,269
mute
en de laatste is fn zodra

555
00:09:17,269 --> 00:09:17,279
en de laatste is fn zodra
 

556
00:09:17,279 --> 00:09:19,110
en de laatste is fn zodra
we ingaan op de verschillen tussen

557
00:09:19,110 --> 00:09:19,120
we ingaan op de verschillen tussen
 

558
00:09:19,120 --> 00:09:21,190
we ingaan op de verschillen tussen
deze drie eigenschappen,

559
00:09:21,190 --> 00:09:21,200
deze drie eigenschappen,
 

560
00:09:21,200 --> 00:09:23,190
deze drie eigenschappen,
hier hebben we typen aan de fn-lade toegevoegd

561
00:09:23,190 --> 00:09:23,200
hier hebben we typen aan de fn-lade toegevoegd
 

562
00:09:23,200 --> 00:09:25,030
hier hebben we typen aan de fn-lade toegevoegd
om de  invoerparameters

563
00:09:25,030 --> 00:09:25,040
om de  invoerparameters
 

564
00:09:25,040 --> 00:09:27,509
om de  invoerparameters
van onze sluiting, die een

565
00:09:27,509 --> 00:09:27,519
van onze sluiting, die een
 

566
00:09:27,519 --> 00:09:29,430
van onze sluiting, die een
niet-ondertekend 32-bits geheel getal zal zijn

567
00:09:29,430 --> 00:09:29,440
niet-ondertekend 32-bits geheel getal zal zijn
 

568
00:09:29,440 --> 00:09:31,670
niet-ondertekend 32-bits geheel getal zal zijn
en ook de uitvoerparameters die

569
00:09:31,670 --> 00:09:31,680
en ook de uitvoerparameters die
 

570
00:09:31,680 --> 00:09:32,630
en ook de uitvoerparameters die
weer

571
00:09:32,630 --> 00:09:32,640
weer
 

572
00:09:32,640 --> 00:09:35,269
weer
een niet-ondertekend 32-bits geheel getal zullen zijn, dan hebben we in de

573
00:09:35,269 --> 00:09:35,279
een niet-ondertekend 32-bits geheel getal zullen zijn, dan hebben we in de
 

574
00:09:35,279 --> 00:09:37,190
een niet-ondertekend 32-bits geheel getal zullen zijn, dan hebben we in de
hoofdtekst van onze struct

575
00:09:37,190 --> 00:09:37,200
hoofdtekst van onze struct
 

576
00:09:37,200 --> 00:09:39,509
hoofdtekst van onze struct
t  wo velden de eerste is een berekening

577
00:09:39,509 --> 00:09:39,519
t  wo velden de eerste is een berekening
 

578
00:09:39,519 --> 00:09:41,350
t  wo velden de eerste is een berekening
die ons generieke type zal opslaan,

579
00:09:41,350 --> 00:09:41,360
die ons generieke type zal opslaan,
 

580
00:09:41,360 --> 00:09:44,070
die ons generieke type zal opslaan,
dus de berekening kan elke afsluiting zijn die

581
00:09:44,070 --> 00:09:44,080
dus de berekening kan elke afsluiting zijn die
 

582
00:09:44,080 --> 00:09:44,949
dus de berekening kan elke afsluiting zijn die
voldoet aan deze

583
00:09:44,949 --> 00:09:44,959
voldoet aan deze
 

584
00:09:44,959 --> 00:09:48,310
voldoet aan deze
lade die hier is verbonden, dan hebben we een

585
00:09:48,310 --> 00:09:48,320
lade die hier is verbonden, dan hebben we een
 

586
00:09:48,320 --> 00:09:50,710
lade die hier is verbonden, dan hebben we een
waarde die een optionele

587
00:09:50,710 --> 00:09:50,720
waarde die een optionele
 

588
00:09:50,720 --> 00:09:51,670
waarde die een optionele
32-bits

589
00:09:51,670 --> 00:09:51,680
32-bits
 

590
00:09:51,680 --> 00:09:54,230
32-bits
integerwaarde wordt, is optioneel, want wanneer

591
00:09:54,230 --> 00:09:54,240
integerwaarde wordt, is optioneel, want wanneer
 

592
00:09:54,240 --> 00:09:55,110
integerwaarde wordt, is optioneel, want wanneer
onze cacher wordt

593
00:09:55,110 --> 00:09:55,120
onze cacher wordt
 

594
00:09:55,120 --> 00:09:57,190
onze cacher wordt
geïnitialiseerd  het wordt geen

595
00:09:57,190 --> 00:09:57,200
geïnitialiseerd  het wordt geen
 

596
00:09:57,200 --> 00:09:59,110
geïnitialiseerd  het wordt geen
en als we onze berekening eenmaal hebben

597
00:09:59,110 --> 00:09:59,120
en als we onze berekening eenmaal hebben
 

598
00:09:59,120 --> 00:10:01,590
en als we onze berekening eenmaal hebben
aangeroepen, slaan we de geretourneerde waarde op in

599
00:10:01,590 --> 00:10:01,600
aangeroepen, slaan we de geretourneerde waarde op in
 

600
00:10:01,600 --> 00:10:02,870
aangeroepen, slaan we de geretourneerde waarde op in
ons waardeveld.

601
00:10:02,870 --> 00:10:02,880
ons waardeveld.
 

602
00:10:02,880 --> 00:10:05,190
ons waardeveld.
Merk op dat reguliere functies

603
00:10:05,190 --> 00:10:05,200
Merk op dat reguliere functies
 

604
00:10:05,200 --> 00:10:06,710
Merk op dat reguliere functies
ook deze drie

605
00:10:06,710 --> 00:10:06,720
ook deze drie
 

606
00:10:06,720 --> 00:10:09,829
ook deze drie
fn-kenmerken implementeren, zodat we ook een normale

607
00:10:09,829 --> 00:10:09,839
fn-kenmerken implementeren, zodat we ook een normale
 

608
00:10:09,839 --> 00:10:10,310
fn-kenmerken implementeren, zodat we ook een normale
functie

609
00:10:10,310 --> 00:10:10,320
functie
 

610
00:10:10,320 --> 00:10:13,190
functie
in ons berekeningsveld

611
00:10:13,190 --> 00:10:13,200
in ons berekeningsveld
 

612
00:10:13,200 --> 00:10:15,190
in ons berekeningsveld
kunnen opslaan.  plak het implementatieblok

613
00:10:15,190 --> 00:10:15,200
kunnen opslaan.  plak het implementatieblok
 

614
00:10:15,200 --> 00:10:16,949
kunnen opslaan.  plak het implementatieblok
voor een cache of struct

615
00:10:16,949 --> 00:10:16,959
voor een cache of struct
 

616
00:10:16,959 --> 00:10:21,110
voor een cache of struct
en we zullen erover praten

617
00:10:21,110 --> 00:10:21,120

 

618
00:10:21,120 --> 00:10:23,269

oké, laten we dit doornemen, we hebben ons

619
00:10:23,269 --> 00:10:23,279
oké, laten we dit doornemen, we hebben ons
 

620
00:10:23,279 --> 00:10:24,389
oké, laten we dit doornemen, we hebben ons
implementatieblok

621
00:10:24,389 --> 00:10:24,399
implementatieblok
 

622
00:10:24,399 --> 00:10:27,110
implementatieblok
voor cacher dat dezelfde generieke

623
00:10:27,110 --> 00:10:27,120
voor cacher dat dezelfde generieke
 

624
00:10:27,120 --> 00:10:28,230
voor cacher dat dezelfde generieke
en kenmerkgebonden heeft

625
00:10:28,230 --> 00:10:28,240
en kenmerkgebonden heeft
 

626
00:10:28,240 --> 00:10:30,630
en kenmerkgebonden heeft
als onze cache of struct en dan is de

627
00:10:30,630 --> 00:10:30,640
als onze cache of struct en dan is de
 

628
00:10:30,640 --> 00:10:31,590
als onze cache of struct en dan is de
eerste functie

629
00:10:31,590 --> 00:10:31,600
eerste functie
 

630
00:10:31,600 --> 00:10:34,150
eerste functie
binnenin  genaamd nieuw nieuw is een

631
00:10:34,150 --> 00:10:34,160
binnenin  genaamd nieuw nieuw is een
 

632
00:10:34,160 --> 00:10:35,750
binnenin  genaamd nieuw nieuw is een
constructorfunctie die een

633
00:10:35,750 --> 00:10:35,760
constructorfunctie die een
 

634
00:10:35,760 --> 00:10:37,829
constructorfunctie die een
berekening nodig heeft die van het type t

635
00:10:37,829 --> 00:10:37,839
berekening nodig heeft die van het type t
 

636
00:10:37,839 --> 00:10:39,910
berekening nodig heeft die van het type t
onze sluiting is en vervolgens een nieuwe

637
00:10:39,910 --> 00:10:39,920
onze sluiting is en vervolgens een nieuwe
 

638
00:10:39,920 --> 00:10:41,190
onze sluiting is en vervolgens een nieuwe
cacher maakt die

639
00:10:41,190 --> 00:10:41,200
cacher maakt die
 

640
00:10:41,200 --> 00:10:44,069
cacher maakt die
de berekening doorgeeft en de waarde instelt op

641
00:10:44,069 --> 00:10:44,079
de berekening doorgeeft en de waarde instelt op
 

642
00:10:44,079 --> 00:10:44,790
de berekening doorgeeft en de waarde instelt op
geen

643
00:10:44,790 --> 00:10:44,800
geen
 

644
00:10:44,800 --> 00:10:47,910
geen
dan hebben we onze waardemethode en het is een

645
00:10:47,910 --> 00:10:47,920
dan hebben we onze waardemethode en het is een
 

646
00:10:47,920 --> 00:10:49,670
dan hebben we onze waardemethode en het is een
methode omdat de eerste

647
00:10:49,670 --> 00:10:49,680
methode omdat de eerste
 

648
00:10:49,680 --> 00:10:52,389
methode omdat de eerste
parameter een verwijzing naar zelf is en in feite hebben

649
00:10:52,389 --> 00:10:52,399
parameter een verwijzing naar zelf is en in feite hebben
 

650
00:10:52,399 --> 00:10:54,470
parameter een verwijzing naar zelf is en in feite hebben
we een veranderlijke verwijzing naar zelf

651
00:10:54,470 --> 00:10:54,480
we een veranderlijke verwijzing naar zelf
 

652
00:10:54,480 --> 00:10:57,590
we een veranderlijke verwijzing naar zelf
de volgende parameter is arg, wat het

653
00:10:57,590 --> 00:10:57,600
de volgende parameter is arg, wat het
 

654
00:10:57,600 --> 00:11:00,150
de volgende parameter is arg, wat het
argument is dat we in onze afsluiting zullen doorgeven en

655
00:11:00,150 --> 00:11:00,160
argument is dat we in onze afsluiting zullen doorgeven en
 

656
00:11:00,160 --> 00:11:02,550
argument is dat we in onze afsluiting zullen doorgeven en
het is een niet-ondertekende 32  -bit integer het

657
00:11:02,550 --> 00:11:02,560
het is een niet-ondertekende 32  -bit integer het
 

658
00:11:02,560 --> 00:11:05,110
het is een niet-ondertekende 32  -bit integer het
retourtype is ook een niet-ondertekend 32-bits

659
00:11:05,110 --> 00:11:05,120
retourtype is ook een niet-ondertekend 32-bits
 

660
00:11:05,120 --> 00:11:05,829
retourtype is ook een niet-ondertekend 32-bits
geheel getal

661
00:11:05,829 --> 00:11:05,839
geheel getal
 

662
00:11:05,839 --> 00:11:08,069
geheel getal
binnen de waardemethode. We

663
00:11:08,069 --> 00:11:08,079
binnen de waardemethode. We
 

664
00:11:08,079 --> 00:11:09,590
binnen de waardemethode. We
gaan een match-expressie doen

665
00:11:09,590 --> 00:11:09,600
gaan een match-expressie doen
 

666
00:11:09,600 --> 00:11:12,710
gaan een match-expressie doen
op de self-dot-waarde, dus we controleren het

667
00:11:12,710 --> 00:11:12,720
op de self-dot-waarde, dus we controleren het
 

668
00:11:12,720 --> 00:11:13,829
op de self-dot-waarde, dus we controleren het
self-dot-

669
00:11:13,829 --> 00:11:13,839
self-dot-
 

670
00:11:13,839 --> 00:11:16,550
self-dot-
type en onthouden dat self.value een

671
00:11:16,550 --> 00:11:16,560
type en onthouden dat self.value een
 

672
00:11:16,560 --> 00:11:17,509
type en onthouden dat self.value een
optioneel type is

673
00:11:17,509 --> 00:11:17,519
optioneel type is
 

674
00:11:17,519 --> 00:11:19,829
optioneel type is
en  wanneer we onze cacher voor het eerst maken,

675
00:11:19,829 --> 00:11:19,839
en  wanneer we onze cacher voor het eerst maken,
 

676
00:11:19,839 --> 00:11:21,269
en  wanneer we onze cacher voor het eerst maken,
wordt deze ingesteld op none,

677
00:11:21,269 --> 00:11:21,279
wordt deze ingesteld op none,
 

678
00:11:21,279 --> 00:11:24,310
wordt deze ingesteld op none,
dus we voeren deze none-tak uit

679
00:11:24,310 --> 00:11:24,320
dus we voeren deze none-tak uit
 

680
00:11:24,320 --> 00:11:26,389
dus we voeren deze none-tak uit
in de none-arm we maken een

681
00:11:26,389 --> 00:11:26,399
in de none-arm we maken een
 

682
00:11:26,399 --> 00:11:27,430
in de none-arm we maken een
variabele met de naam v

683
00:11:27,430 --> 00:11:27,440
variabele met de naam v
 

684
00:11:27,440 --> 00:11:29,590
variabele met de naam v
en stellen deze gelijk aan het resultaat van het

685
00:11:29,590 --> 00:11:29,600
en stellen deze gelijk aan het resultaat van het
 

686
00:11:29,600 --> 00:11:31,350
en stellen deze gelijk aan het resultaat van het
aanroepen van onze berekening

687
00:11:31,350 --> 00:11:31,360
aanroepen van onze berekening
 

688
00:11:31,360 --> 00:11:35,030
aanroepen van onze berekening
sluiting en doorgeven in de arg-variabele

689
00:11:35,030 --> 00:11:35,040
sluiting en doorgeven in de arg-variabele
 

690
00:11:35,040 --> 00:11:37,110
sluiting en doorgeven in de arg-variabele
dan muteren we het waardeveld van

691
00:11:37,110 --> 00:11:37,120
dan muteren we het waardeveld van
 

692
00:11:37,120 --> 00:11:38,710
dan muteren we het waardeveld van
de huidige cache of instantie

693
00:11:38,710 --> 00:11:38,720
de huidige cache of instantie
 

694
00:11:38,720 --> 00:11:42,069
de huidige cache of instantie
en stellen het in op wat passeren in v

695
00:11:42,069 --> 00:11:42,079
en stellen het in op wat passeren in v
 

696
00:11:42,079 --> 00:11:44,069
en stellen het in op wat passeren in v
dit is waar het cachen plaatsvindt we

697
00:11:44,069 --> 00:11:44,079
dit is waar het cachen plaatsvindt we
 

698
00:11:44,079 --> 00:11:45,829
dit is waar het cachen plaatsvindt we
cachen de geretourneerde waarde van onze

699
00:11:45,829 --> 00:11:45,839
cachen de geretourneerde waarde van onze
 

700
00:11:45,839 --> 00:11:46,949
cachen de geretourneerde waarde van onze
berekening

701
00:11:46,949 --> 00:11:46,959
berekening
 

702
00:11:46,959 --> 00:11:49,110
berekening
in het waardeveld en dan

703
00:11:49,110 --> 00:11:49,120
in het waardeveld en dan
 

704
00:11:49,120 --> 00:11:50,710
in het waardeveld en dan
keren we gewoon terug

705
00:11:50,710 --> 00:11:50,720
keren we gewoon terug
 

706
00:11:50,720 --> 00:11:53,190
keren we gewoon terug
v volgende laat  We gebruiken ons geld of onze structuur

707
00:11:53,190 --> 00:11:53,200
v volgende laat  We gebruiken ons geld of onze structuur
 

708
00:11:53,200 --> 00:11:55,350
v volgende laat  We gebruiken ons geld of onze structuur
in de functie voor het genereren van een training,

709
00:11:55,350 --> 00:11:55,360
in de functie voor het genereren van een training,
 

710
00:11:55,360 --> 00:11:57,430
in de functie voor het genereren van een training,
maar voordat we dat doen, laten we eerst

711
00:11:57,430 --> 00:11:57,440
maar voordat we dat doen, laten we eerst
 

712
00:11:57,440 --> 00:12:03,509
maar voordat we dat doen, laten we eerst
ons programma uitvoeren,

713
00:12:03,509 --> 00:12:03,519

 

714
00:12:03,519 --> 00:12:05,590

zoals je kunt zien, werd onze dure sluiting

715
00:12:05,590 --> 00:12:05,600
zoals je kunt zien, werd onze dure sluiting
 

716
00:12:05,600 --> 00:12:06,710
zoals je kunt zien, werd onze dure sluiting
twee keer aangeroepen

717
00:12:06,710 --> 00:12:06,720
twee keer aangeroepen
 

718
00:12:06,720 --> 00:12:08,949
twee keer aangeroepen
om het aantal push-ups

719
00:12:08,949 --> 00:12:08,959
om het aantal push-ups
 

720
00:12:08,959 --> 00:12:10,550
om het aantal push-ups
te berekenen en de tweede keer om

721
00:12:10,550 --> 00:12:10,560
te berekenen en de tweede keer om
 

722
00:12:10,560 --> 00:12:12,870
te berekenen en de tweede keer om
het aantal te berekenen  sit-ups laten we dit

723
00:12:12,870 --> 00:12:12,880
het aantal te berekenen  sit-ups laten we dit
 

724
00:12:12,880 --> 00:12:14,710
het aantal te berekenen  sit-ups laten we dit
efficiënter maken door onze sluitingsdefinitie

725
00:12:14,710 --> 00:12:14,720
efficiënter maken door onze sluitingsdefinitie
 

726
00:12:14,720 --> 00:12:15,430
efficiënter maken door onze sluitingsdefinitie

727
00:12:15,430 --> 00:12:15,440

 

728
00:12:15,440 --> 00:12:27,990

hier in onze casher-struct te verpakken.

729
00:12:27,990 --> 00:12:28,000

 

730
00:12:28,000 --> 00:12:29,750

Hier noemen we de nieuwe functie op

731
00:12:29,750 --> 00:12:29,760
Hier noemen we de nieuwe functie op
 

732
00:12:29,760 --> 00:12:31,829
Hier noemen we de nieuwe functie op
onze cash of struct en geven we

733
00:12:31,829 --> 00:12:31,839
onze cash of struct en geven we
 

734
00:12:31,839 --> 00:12:34,069
onze cash of struct en geven we
onze sluiting door die zal worden ingesteld op het

735
00:12:34,069 --> 00:12:34,079
onze sluiting door die zal worden ingesteld op het
 

736
00:12:34,079 --> 00:12:35,430
onze sluiting door die zal worden ingesteld op het
berekeningsveld

737
00:12:35,430 --> 00:12:35,440
berekeningsveld
 

738
00:12:35,440 --> 00:12:37,670
berekeningsveld
op onze cash-restruct.  verander de

739
00:12:37,670 --> 00:12:37,680
op onze cash-restruct.  verander de
 

740
00:12:37,680 --> 00:12:42,870
op onze cash-restruct.  verander de
naam van onze variabele in het resultaat in de cache

741
00:12:42,870 --> 00:12:42,880

 

742
00:12:42,880 --> 00:12:44,310

we willen ook onze variabele

743
00:12:44,310 --> 00:12:44,320
we willen ook onze variabele
 

744
00:12:44,320 --> 00:12:45,910
we willen ook onze variabele
veranderlijk maken omdat we de

745
00:12:45,910 --> 00:12:45,920
veranderlijk maken omdat we de
 

746
00:12:45,920 --> 00:12:46,790
veranderlijk maken omdat we de
waardemethode zullen aanroepen

747
00:12:46,790 --> 00:12:46,800
waardemethode zullen aanroepen
 

748
00:12:46,800 --> 00:12:52,389
waardemethode zullen aanroepen
die onze cache of struct zal muteren.

749
00:12:52,389 --> 00:12:54,230
die onze cache of struct zal muteren.
 

750
00:12:54,230 --> 00:12:55,509

 

751
00:12:55,509 --> 00:13:07,590

 

752
00:13:07,590 --> 00:13:07,600

 

753
00:13:07,600 --> 00:13:13,269

voer ons programma opnieuw uit

754
00:13:13,269 --> 00:13:13,279

 

755
00:13:13,279 --> 00:13:15,269

en zoals je deze keer kunt zien,

756
00:13:15,269 --> 00:13:15,279
en zoals je deze keer kunt zien,
 

757
00:13:15,279 --> 00:13:17,590
en zoals je deze keer kunt zien,
noemen we onze dure operatie slechts

758
00:13:17,590 --> 00:13:17,600
noemen we onze dure operatie slechts
 

759
00:13:17,600 --> 00:13:20,389
noemen we onze dure operatie slechts
één keer, nu is het cachen van waarden over het algemeen een

760
00:13:20,389 --> 00:13:20,399
één keer, nu is het cachen van waarden over het algemeen een
 

761
00:13:20,399 --> 00:13:22,470
één keer, nu is het cachen van waarden over het algemeen een
nuttig gedrag, dus misschien willen we

762
00:13:22,470 --> 00:13:22,480
nuttig gedrag, dus misschien willen we
 

763
00:13:22,480 --> 00:13:23,350
nuttig gedrag, dus misschien willen we
onze cacher

764
00:13:23,350 --> 00:13:23,360
onze cacher
 

765
00:13:23,360 --> 00:13:25,590
onze cacher
in verschillende  contexten, maar er zijn twee

766
00:13:25,590 --> 00:13:25,600
in verschillende  contexten, maar er zijn twee
 

767
00:13:25,600 --> 00:13:27,910
in verschillende  contexten, maar er zijn twee
problemen die ons ervan weerhouden dit

768
00:13:27,910 --> 00:13:27,920
problemen die ons ervan weerhouden dit
 

769
00:13:27,920 --> 00:13:30,230
problemen die ons ervan weerhouden dit
probleem te doen nummer één is het aanroepen van onze

770
00:13:30,230 --> 00:13:30,240
probleem te doen nummer één is het aanroepen van onze
 

771
00:13:30,240 --> 00:13:32,069
probleem te doen nummer één is het aanroepen van onze
waardemethode zal

772
00:13:32,069 --> 00:13:32,079
waardemethode zal
 

773
00:13:32,079 --> 00:13:35,190
waardemethode zal
dezelfde waarde retourneren, ongeacht wat de arg-

774
00:13:35,190 --> 00:13:35,200
dezelfde waarde retourneren, ongeacht wat de arg-
 

775
00:13:35,200 --> 00:13:37,829
dezelfde waarde retourneren, ongeacht wat de arg-
invoerparameter is, laten we zeggen dat

776
00:13:37,829 --> 00:13:37,839
invoerparameter is, laten we zeggen dat
 

777
00:13:37,839 --> 00:13:39,910
invoerparameter is, laten we zeggen dat
de eerste keer dat we de waardemethode noemen,

778
00:13:39,910 --> 00:13:39,920
de eerste keer dat we de waardemethode noemen,
 

779
00:13:39,920 --> 00:13:43,110
de eerste keer dat we de waardemethode noemen,
we in één doorgeven  als de waarde voor arg,

780
00:13:43,110 --> 00:13:43,120
we in één doorgeven  als de waarde voor arg,
 

781
00:13:43,120 --> 00:13:44,389
we in één doorgeven  als de waarde voor arg,
omdat dit de eerste keer is dat we

782
00:13:44,389 --> 00:13:44,399
omdat dit de eerste keer is dat we
 

783
00:13:44,399 --> 00:13:46,790
omdat dit de eerste keer is dat we
de waardemethode self aanroepen.value

784
00:13:46,790 --> 00:13:46,800
de waardemethode self aanroepen.value
 

785
00:13:46,800 --> 00:13:48,230
de waardemethode self aanroepen.value
gaat evalueren naar none,

786
00:13:48,230 --> 00:13:48,240
gaat evalueren naar none,
 

787
00:13:48,240 --> 00:13:50,150
gaat evalueren naar none,
dus we gaan naar de none branch

788
00:13:50,150 --> 00:13:50,160
dus we gaan naar de none branch
 

789
00:13:50,160 --> 00:13:51,350
dus we gaan naar de none branch
en roepen dan onze

790
00:13:51,350 --> 00:13:51,360
en roepen dan onze
 

791
00:13:51,360 --> 00:13:53,910
en roepen dan onze
sluiting op met onze arg die

792
00:13:53,910 --> 00:13:53,920
sluiting op met onze arg die
 

793
00:13:53,920 --> 00:13:55,269
sluiting op met onze arg die
gelijk zal zijn  naar 1.

794
00:13:55,269 --> 00:13:55,279
gelijk zal zijn  naar 1.
 

795
00:13:55,279 --> 00:13:57,670
gelijk zal zijn  naar 1.
dan nemen we de resulterende waarde en

796
00:13:57,670 --> 00:13:57,680
dan nemen we de resulterende waarde en
 

797
00:13:57,680 --> 00:13:58,870
dan nemen we de resulterende waarde en
slaan deze op in

798
00:13:58,870 --> 00:13:58,880
slaan deze op in
 

799
00:13:58,880 --> 00:14:01,670
slaan deze op in
self.value stel je nu voor dat we onze waardemethode

800
00:14:01,670 --> 00:14:01,680
self.value stel je nu voor dat we onze waardemethode
 

801
00:14:01,680 --> 00:14:02,150
self.value stel je nu voor dat we onze waardemethode

802
00:14:02,150 --> 00:14:02,160

 

803
00:14:02,160 --> 00:14:04,870

opnieuw aanroepen, maar deze keer geven we 2 door als de

804
00:14:04,870 --> 00:14:04,880
opnieuw aanroepen, maar deze keer geven we 2 door als de
 

805
00:14:04,880 --> 00:14:05,590
opnieuw aanroepen, maar deze keer geven we 2 door als de
waarde voor

806
00:14:05,590 --> 00:14:05,600
waarde voor
 

807
00:14:05,600 --> 00:14:08,470
waarde voor
arg deze keer self.value bestaat al,

808
00:14:08,470 --> 00:14:08,480
arg deze keer self.value bestaat al,
 

809
00:14:08,480 --> 00:14:10,550
arg deze keer self.value bestaat al,
dus we gaan  in de somarm en

810
00:14:10,550 --> 00:14:10,560
dus we gaan  in de somarm en
 

811
00:14:10,560 --> 00:14:13,350
dus we gaan  in de somarm en
retourneer gewoon de waarde die is opgeslagen in som. Dit is

812
00:14:13,350 --> 00:14:13,360
retourneer gewoon de waarde die is opgeslagen in som. Dit is
 

813
00:14:13,360 --> 00:14:14,389
retourneer gewoon de waarde die is opgeslagen in som. Dit is
problematisch omdat

814
00:14:14,389 --> 00:14:14,399
problematisch omdat
 

815
00:14:14,399 --> 00:14:16,790
problematisch omdat
r wordt doorgegeven aan onze sluiting, wat betekent

816
00:14:16,790 --> 00:14:16,800
r wordt doorgegeven aan onze sluiting, wat betekent
 

817
00:14:16,800 --> 00:14:18,790
r wordt doorgegeven aan onze sluiting, wat betekent
dat het de resulterende waarde van onze sluiting zou kunnen veranderen,

818
00:14:18,790 --> 00:14:18,800
dat het de resulterende waarde van onze sluiting zou kunnen veranderen,
 

819
00:14:18,800 --> 00:14:19,430
dat het de resulterende waarde van onze sluiting zou kunnen veranderen,

820
00:14:19,430 --> 00:14:19,440

 

821
00:14:19,440 --> 00:14:21,269

maar met onze huidige

822
00:14:21,269 --> 00:14:21,279
maar met onze huidige
 

823
00:14:21,279 --> 00:14:23,430
maar met onze huidige
implementatiewaarde zal

824
00:14:23,430 --> 00:14:23,440
implementatiewaarde zal
 

825
00:14:23,440 --> 00:14:25,590
implementatiewaarde zal
altijd gelijk zijn aan de re  sult van het noemen van

826
00:14:25,590 --> 00:14:25,600
altijd gelijk zijn aan de re  sult van het noemen van
 

827
00:14:25,600 --> 00:14:27,829
altijd gelijk zijn aan de re  sult van het noemen van
onze sluiting met het argument doorgegeven

828
00:14:27,829 --> 00:14:27,839
onze sluiting met het argument doorgegeven
 

829
00:14:27,839 --> 00:14:29,110
onze sluiting met het argument doorgegeven
aan de eerste oproep

830
00:14:29,110 --> 00:14:29,120
aan de eerste oproep
 

831
00:14:29,120 --> 00:14:31,350
aan de eerste oproep
om te waarderen wat ik eigenlijk zeg is in

832
00:14:31,350 --> 00:14:31,360
om te waarderen wat ik eigenlijk zeg is in
 

833
00:14:31,360 --> 00:14:33,189
om te waarderen wat ik eigenlijk zeg is in
plaats van één waarde te verzilveren,

834
00:14:33,189 --> 00:14:33,199
plaats van één waarde te verzilveren,
 

835
00:14:33,199 --> 00:14:35,590
plaats van één waarde te verzilveren,
ongeacht het argument dat is doorgegeven,

836
00:14:35,590 --> 00:14:35,600
ongeacht het argument dat is doorgegeven,
 

837
00:14:35,600 --> 00:14:36,710
ongeacht het argument dat is doorgegeven,
we moeten

838
00:14:36,710 --> 00:14:36,720
we moeten
 

839
00:14:36,720 --> 00:14:39,110
we moeten
één waarde verzilveren voor elk argument dat wordt doorgegeven

840
00:14:39,110 --> 00:14:39,120
één waarde verzilveren voor elk argument dat wordt doorgegeven
 

841
00:14:39,120 --> 00:14:40,790
één waarde verzilveren voor elk argument dat wordt doorgegeven
, omdat het argument

842
00:14:40,790 --> 00:14:40,800
, omdat het argument
 

843
00:14:40,800 --> 00:14:43,750
, omdat het argument
beïnvloedt de waarde als een oefening je

844
00:14:43,750 --> 00:14:43,760
beïnvloedt de waarde als een oefening je
 

845
00:14:43,760 --> 00:14:45,910
beïnvloedt de waarde als een oefening je
kunt deze implementatie repareren door een hashmap op te slaan in

846
00:14:45,910 --> 00:14:45,920
kunt deze implementatie repareren door een hashmap op te slaan in
 

847
00:14:45,920 --> 00:14:46,629
kunt deze implementatie repareren door een hashmap op te slaan in

848
00:14:46,629 --> 00:14:46,639

 

849
00:14:46,639 --> 00:14:48,949

plaats van een enkele waarde de sleutels van

850
00:14:48,949 --> 00:14:48,959
plaats van een enkele waarde de sleutels van
 

851
00:14:48,959 --> 00:14:50,389
plaats van een enkele waarde de sleutels van
de hashmap zullen

852
00:14:50,389 --> 00:14:50,399
de hashmap zullen
 

853
00:14:50,399 --> 00:14:53,110
de hashmap zullen
het argument zijn dat in waarde wordt doorgegeven en de

854
00:14:53,110 --> 00:14:53,120
het argument zijn dat in waarde wordt doorgegeven en de
 

855
00:14:53,120 --> 00:14:54,470
het argument zijn dat in waarde wordt doorgegeven en de
waarden in je hashmap

856
00:14:54,470 --> 00:14:54,480
waarden in je hashmap
 

857
00:14:54,480 --> 00:14:57,189
waarden in je hashmap
zullen het resultaat zijn van het aanroepen van de

858
00:14:57,189 --> 00:14:57,199
zullen het resultaat zijn van het aanroepen van de
 

859
00:14:57,199 --> 00:14:58,069
zullen het resultaat zijn van het aanroepen van de
sluiting

860
00:14:58,069 --> 00:14:58,079
sluiting
 

861
00:14:58,079 --> 00:15:00,550
sluiting
met het argument dan  in de body

862
00:15:00,550 --> 00:15:00,560
met het argument dan  in de body
 

863
00:15:00,560 --> 00:15:01,670
met het argument dan  in de body
van deze waardemethode

864
00:15:01,670 --> 00:15:01,680
van deze waardemethode
 

865
00:15:01,680 --> 00:15:04,150
van deze waardemethode
moet je de arg opzoeken in

866
00:15:04,150 --> 00:15:04,160
moet je de arg opzoeken in
 

867
00:15:04,160 --> 00:15:05,110
moet je de arg opzoeken in
je hash-kaart

868
00:15:05,110 --> 00:15:05,120
je hash-kaart
 

869
00:15:05,120 --> 00:15:07,829
je hash-kaart
en als er een waarde voor die arg bestaat

870
00:15:07,829 --> 00:15:07,839
en als er een waarde voor die arg bestaat
 

871
00:15:07,839 --> 00:15:09,110
en als er een waarde voor die arg bestaat
, retourneer je gewoon

872
00:15:09,110 --> 00:15:09,120
, retourneer je gewoon
 

873
00:15:09,120 --> 00:15:11,590
, retourneer je gewoon
de waarde en als deze niet bestaat, voer

874
00:15:11,590 --> 00:15:11,600
de waarde en als deze niet bestaat, voer
 

875
00:15:11,600 --> 00:15:13,829
de waarde en als deze niet bestaat, voer
je je dure berekening uit en sla je het

876
00:15:13,829 --> 00:15:13,839
je je dure berekening uit en sla je het
 

877
00:15:13,839 --> 00:15:14,550
je je dure berekening uit en sla je het
resultaat

878
00:15:14,550 --> 00:15:14,560
resultaat
 

879
00:15:14,560 --> 00:15:16,790
resultaat
op  je hash-kaart het tweede probleem

880
00:15:16,790 --> 00:15:16,800
op  je hash-kaart het tweede probleem
 

881
00:15:16,800 --> 00:15:18,949
op  je hash-kaart het tweede probleem
met onze cacher-implementatie

882
00:15:18,949 --> 00:15:18,959
met onze cacher-implementatie
 

883
00:15:18,959 --> 00:15:21,350
met onze cacher-implementatie
is dat we hardgecodeerde typen

884
00:15:21,350 --> 00:15:21,360
is dat we hardgecodeerde typen
 

885
00:15:21,360 --> 00:15:22,710
is dat we hardgecodeerde typen
gebruiken, we zeggen bijvoorbeeld dat onze

886
00:15:22,710 --> 00:15:22,720
gebruiken, we zeggen bijvoorbeeld dat onze
 

887
00:15:22,720 --> 00:15:25,189
gebruiken, we zeggen bijvoorbeeld dat onze
afsluiting een geheel getal moet accepteren en een geheel getal moet

888
00:15:25,189 --> 00:15:25,199
afsluiting een geheel getal moet accepteren en een geheel getal moet
 

889
00:15:25,199 --> 00:15:26,470
afsluiting een geheel getal moet accepteren en een geheel getal moet
retourneren

890
00:15:26,470 --> 00:15:26,480
retourneren
 

891
00:15:26,480 --> 00:15:28,949
retourneren
en onze waarde moet ook een geheel getal

892
00:15:28,949 --> 00:15:28,959
en onze waarde moet ook een geheel getal
 

893
00:15:28,959 --> 00:15:29,590
en onze waarde moet ook een geheel getal

894
00:15:29,590 --> 00:15:29,600

 

895
00:15:29,600 --> 00:15:32,069

zijn om dit op te lossen, je kunt gewoon generieke waarden gebruiken in

896
00:15:32,069 --> 00:15:32,079
zijn om dit op te lossen, je kunt gewoon generieke waarden gebruiken in
 

897
00:15:32,079 --> 00:15:32,710
zijn om dit op te lossen, je kunt gewoon generieke waarden gebruiken in
plaats van

898
00:15:32,710 --> 00:15:32,720
plaats van
 

899
00:15:32,720 --> 00:15:34,870
plaats van
hardgecodeerde waarden. Het laatste waar ik het over

900
00:15:34,870 --> 00:15:34,880
hardgecodeerde waarden. Het laatste waar ik het over
 

901
00:15:34,880 --> 00:15:36,629
hardgecodeerde waarden. Het laatste waar ik het over
wil hebben is het vastleggen van de

902
00:15:36,629 --> 00:15:36,639
wil hebben is het vastleggen van de
 

903
00:15:36,639 --> 00:15:38,389
wil hebben is het vastleggen van de
omgeving met sluitingen, in

904
00:15:38,389 --> 00:15:38,399
omgeving met sluitingen, in
 

905
00:15:38,399 --> 00:15:41,189
omgeving met sluitingen, in
tegenstelling tot functies, sluitingen hebben toegang tot

906
00:15:41,189 --> 00:15:41,199
tegenstelling tot functies, sluitingen hebben toegang tot
 

907
00:15:41,199 --> 00:15:42,069
tegenstelling tot functies, sluitingen hebben toegang tot
variabelen

908
00:15:42,069 --> 00:15:42,079
variabelen
 

909
00:15:42,079 --> 00:15:43,990
variabelen
die zijn gedefinieerd binnen de  scope

910
00:15:43,990 --> 00:15:44,000
die zijn gedefinieerd binnen de  scope
 

911
00:15:44,000 --> 00:15:45,829
die zijn gedefinieerd binnen de  scope
waarin de sluiting is gedefinieerd

912
00:15:45,829 --> 00:15:45,839
waarin de sluiting is gedefinieerd
 

913
00:15:45,839 --> 00:15:47,749
waarin de sluiting is gedefinieerd
hier is een eenvoudig voorbeeld bovenaan hebben

914
00:15:47,749 --> 00:15:47,759
hier is een eenvoudig voorbeeld bovenaan hebben
 

915
00:15:47,759 --> 00:15:48,870
hier is een eenvoudig voorbeeld bovenaan hebben
we een variabele genaamd

916
00:15:48,870 --> 00:15:48,880
we een variabele genaamd
 

917
00:15:48,880 --> 00:15:51,590
we een variabele genaamd
x die gelijk is aan vier dan hebben we een

918
00:15:51,590 --> 00:15:51,600
x die gelijk is aan vier dan hebben we een
 

919
00:15:51,600 --> 00:15:53,350
x die gelijk is aan vier dan hebben we een
sluiting genaamd gelijk aan x

920
00:15:53,350 --> 00:15:53,360
sluiting genaamd gelijk aan x
 

921
00:15:53,360 --> 00:15:55,749
sluiting genaamd gelijk aan x
die een variabele genaamd z opneemt en

922
00:15:55,749 --> 00:15:55,759
die een variabele genaamd z opneemt en
 

923
00:15:55,759 --> 00:15:57,509
die een variabele genaamd z opneemt en
dan een boolean retourneert

924
00:15:57,509 --> 00:15:57,519
dan een boolean retourneert
 

925
00:15:57,519 --> 00:15:59,110
dan een boolean retourneert
de boolean gaat  om gelijk te zijn aan deze

926
00:15:59,110 --> 00:15:59,120
de boolean gaat  om gelijk te zijn aan deze
 

927
00:15:59,120 --> 00:16:00,949
de boolean gaat  om gelijk te zijn aan deze
uitdrukking z is gelijk

928
00:16:00,949 --> 00:16:00,959
uitdrukking z is gelijk
 

929
00:16:00,959 --> 00:16:03,590
uitdrukking z is gelijk
aan x nu, ook al is x gedefinieerd

930
00:16:03,590 --> 00:16:03,600
aan x nu, ook al is x gedefinieerd
 

931
00:16:03,600 --> 00:16:05,110
aan x nu, ook al is x gedefinieerd
buiten onze sluiting, heeft

932
00:16:05,110 --> 00:16:05,120
buiten onze sluiting, heeft
 

933
00:16:05,120 --> 00:16:07,430
buiten onze sluiting, heeft
onze sluiting nog steeds toegang tot x

934
00:16:07,430 --> 00:16:07,440
onze sluiting nog steeds toegang tot x
 

935
00:16:07,440 --> 00:16:09,030
onze sluiting nog steeds toegang tot x
omdat ze allebei binnen hetzelfde bereik zijn gedefinieerd,

936
00:16:09,030 --> 00:16:09,990
omdat ze allebei binnen hetzelfde bereik zijn gedefinieerd,
 

937
00:16:09,990 --> 00:16:10,000

 

938
00:16:10,000 --> 00:16:11,990

dan definiëren we een variabele genaamd y en

939
00:16:11,990 --> 00:16:12,000
dan definiëren we een variabele genaamd y en
 

940
00:16:12,000 --> 00:16:13,749
dan definiëren we een variabele genaamd y en
stellen deze ook gelijk in  tot vier

941
00:16:13,749 --> 00:16:13,759
stellen deze ook gelijk in  tot vier
 

942
00:16:13,759 --> 00:16:16,710
stellen deze ook gelijk in  tot vier
eindelijk noemen we onze sluiting en passeren in y

943
00:16:16,710 --> 00:16:16,720
eindelijk noemen we onze sluiting en passeren in y
 

944
00:16:16,720 --> 00:16:18,470
eindelijk noemen we onze sluiting en passeren in y
de oproep tot onze sluiting is verpakt

945
00:16:18,470 --> 00:16:18,480
de oproep tot onze sluiting is verpakt
 

946
00:16:18,480 --> 00:16:20,310
de oproep tot onze sluiting is verpakt
in een

947
00:16:20,310 --> 00:16:20,320
in een
 

948
00:16:20,320 --> 00:16:22,629
in een
assertmacro die in paniek zal raken als de oproeptorenfunctie

949
00:16:22,629 --> 00:16:23,590
assertmacro die in paniek zal raken als de oproeptorenfunctie
 

950
00:16:23,590 --> 00:16:23,600

 

951
00:16:23,600 --> 00:16:26,069

in false resulteert, dus laten we doorgaan en ons

952
00:16:26,069 --> 00:16:26,079
in false resulteert, dus laten we doorgaan en ons
 

953
00:16:26,079 --> 00:16:28,710
in false resulteert, dus laten we doorgaan en ons
programma uitvoeren

954
00:16:28,710 --> 00:16:28,720

 

955
00:16:28,720 --> 00:16:31,670

en zoals je kunt zien, raakten we niet in paniek.

956
00:16:31,670 --> 00:16:31,680
en zoals je kunt zien, raakten we niet in paniek.
 

957
00:16:31,680 --> 00:16:33,509
en zoals je kunt zien, raakten we niet in paniek.
Laten we eens kijken wat er zou gebeuren als we een

958
00:16:33,509 --> 00:16:33,519
Laten we eens kijken wat er zou gebeuren als we een
 

959
00:16:33,519 --> 00:16:34,230
Laten we eens kijken wat er zou gebeuren als we een
functie zouden gebruiken in

960
00:16:34,230 --> 00:16:34,240
functie zouden gebruiken in
 

961
00:16:34,240 --> 00:16:36,710
functie zouden gebruiken in
plaats van een sluiting, dus we zullen onze

962
00:16:36,710 --> 00:16:36,720
plaats van een sluiting, dus we zullen onze
 

963
00:16:36,720 --> 00:16:37,670
plaats van een sluiting, dus we zullen onze
gelijk aan x

964
00:16:37,670 --> 00:16:37,680
gelijk aan x
 

965
00:16:37,680 --> 00:16:41,829
gelijk aan x
sluiting veranderen in een functie

966
00:16:41,829 --> 00:16:41,839

 

967
00:16:41,839 --> 00:16:43,910

hier zie je enkele rode kronkelende lijnen

968
00:16:43,910 --> 00:16:43,920
hier zie je enkele rode kronkelende lijnen
 

969
00:16:43,920 --> 00:16:45,910
hier zie je enkele rode kronkelende lijnen
onder x en als ik  beweeg de muisaanwijzer over je kunt

970
00:16:45,910 --> 00:16:45,920
onder x en als ik  beweeg de muisaanwijzer over je kunt
 

971
00:16:45,920 --> 00:16:47,030
onder x en als ik  beweeg de muisaanwijzer over je kunt
zien dat de fout

972
00:16:47,030 --> 00:16:47,040
zien dat de fout
 

973
00:16:47,040 --> 00:16:49,509
zien dat de fout
de dynamische omgeving binnen een functie niet kan vastleggen

974
00:16:49,509 --> 00:16:50,470
de dynamische omgeving binnen een functie niet kan vastleggen
 

975
00:16:50,470 --> 00:16:50,480

 

976
00:16:50,480 --> 00:16:52,710

gebruik in plaats daarvan een sluiting, dus de compiler

977
00:16:52,710 --> 00:16:52,720
gebruik in plaats daarvan een sluiting, dus de compiler
 

978
00:16:52,720 --> 00:16:54,230
gebruik in plaats daarvan een sluiting, dus de compiler
vertelt ons eigenlijk dat we

979
00:16:54,230 --> 00:16:54,240
vertelt ons eigenlijk dat we
 

980
00:16:54,240 --> 00:16:56,550
vertelt ons eigenlijk dat we
een sluiting moeten gebruiken in plaats van een functie omdat

981
00:16:56,550 --> 00:16:56,560
een sluiting moeten gebruiken in plaats van een functie omdat
 

982
00:16:56,560 --> 00:16:58,230
een sluiting moeten gebruiken in plaats van een functie omdat
sluitingen hun omgeving kunnen vastleggen

983
00:16:58,230 --> 00:16:58,240
sluitingen hun omgeving kunnen vastleggen
 

984
00:16:58,240 --> 00:16:58,949
sluitingen hun omgeving kunnen vastleggen
,

985
00:16:58,949 --> 00:16:58,959
,
 

986
00:16:58,959 --> 00:17:01,189
,
ze moeten extra geheugen gebruiken  om

987
00:17:01,189 --> 00:17:01,199
ze moeten extra geheugen gebruiken  om
 

988
00:17:01,199 --> 00:17:02,310
ze moeten extra geheugen gebruiken  om
die context op te slaan,

989
00:17:02,310 --> 00:17:02,320
die context op te slaan,
 

990
00:17:02,320 --> 00:17:04,069
die context op te slaan,
maar omdat functies hun omgeving niet vastleggen,

991
00:17:04,069 --> 00:17:04,079
maar omdat functies hun omgeving niet vastleggen,
 

992
00:17:04,079 --> 00:17:06,069
maar omdat functies hun omgeving niet vastleggen,
hebben ze niet

993
00:17:06,069 --> 00:17:06,079
hebben ze niet
 

994
00:17:06,079 --> 00:17:07,429
hebben ze niet
dezelfde overhead-

995
00:17:07,429 --> 00:17:07,439
dezelfde overhead-
 

996
00:17:07,439 --> 00:17:09,189
dezelfde overhead-
afsluitingen, worden waarden uit hun

997
00:17:09,189 --> 00:17:09,199
afsluitingen, worden waarden uit hun
 

998
00:17:09,199 --> 00:17:10,870
afsluitingen, worden waarden uit hun
omgeving op drie manieren vastgelegd

999
00:17:10,870 --> 00:17:10,880
omgeving op drie manieren vastgelegd
 

1000
00:17:10,880 --> 00:17:13,110
omgeving op drie manieren vastgelegd
die direct worden gekoppeld aan de drie manieren waarop een

1001
00:17:13,110 --> 00:17:13,120
die direct worden gekoppeld aan de drie manieren waarop een
 

1002
00:17:13,120 --> 00:17:14,549
die direct worden gekoppeld aan de drie manieren waarop een
functie

1003
00:17:14,549 --> 00:17:14,559
functie
 

1004
00:17:14,559 --> 00:17:17,590
functie
invoerparameters kan opnemen door eigendom te nemen door

1005
00:17:17,590 --> 00:17:17,600
invoerparameters kan opnemen door eigendom te nemen door
 

1006
00:17:17,600 --> 00:17:18,870
invoerparameters kan opnemen door eigendom te nemen door
onveranderlijk te lenen

1007
00:17:18,870 --> 00:17:18,880
onveranderlijk te lenen
 

1008
00:17:18,880 --> 00:17:21,909
onveranderlijk te lenen
of door onveranderlijk te lenen zijn deze drie

1009
00:17:21,909 --> 00:17:21,919
of door onveranderlijk te lenen zijn deze drie
 

1010
00:17:21,919 --> 00:17:23,669
of door onveranderlijk te lenen zijn deze drie
manieren om de omgeving vast te

1011
00:17:23,669 --> 00:17:23,679
manieren om de omgeving vast te
 

1012
00:17:23,679 --> 00:17:26,069
manieren om de omgeving vast te
leggen gecodeerd in de functiekenmerken waar we

1013
00:17:26,069 --> 00:17:26,079
leggen gecodeerd in de functiekenmerken waar we
 

1014
00:17:26,079 --> 00:17:27,350
leggen gecodeerd in de functiekenmerken waar we
het eerder over hadden

1015
00:17:27,350 --> 00:17:27,360
het eerder over hadden
 

1016
00:17:27,360 --> 00:17:30,470
het eerder over hadden
, namelijk fn eenmaal f en mu en

1017
00:17:30,470 --> 00:17:30,480
, namelijk fn eenmaal f en mu en
 

1018
00:17:30,480 --> 00:17:33,270
, namelijk fn eenmaal f en mu en
fn fn eenmaal  neemt eigendom van de

1019
00:17:33,270 --> 00:17:33,280
fn fn eenmaal  neemt eigendom van de
 

1020
00:17:33,280 --> 00:17:34,870
fn fn eenmaal  neemt eigendom van de
variabelen binnen de

1021
00:17:34,870 --> 00:17:34,880
variabelen binnen de
 

1022
00:17:34,880 --> 00:17:36,710
variabelen binnen de
sluitingsomgeving het eenmalige deel van de naam

1023
00:17:36,710 --> 00:17:36,720
sluitingsomgeving het eenmalige deel van de naam
 

1024
00:17:36,720 --> 00:17:38,630
sluitingsomgeving het eenmalige deel van de naam
vertegenwoordigt het feit dat

1025
00:17:38,630 --> 00:17:38,640
vertegenwoordigt het feit dat
 

1026
00:17:38,640 --> 00:17:40,230
vertegenwoordigt het feit dat
sluitingen niet meer dan eens eigenaar kunnen worden van dezelfde

1027
00:17:40,230 --> 00:17:40,240
sluitingen niet meer dan eens eigenaar kunnen worden van dezelfde
 

1028
00:17:40,240 --> 00:17:42,150
sluitingen niet meer dan eens eigenaar kunnen worden van dezelfde
variabelen,

1029
00:17:42,150 --> 00:17:42,160
variabelen,
 

1030
00:17:42,160 --> 00:17:43,990
variabelen,
dus deze sluitingen kunnen alleen die worden

1031
00:17:43,990 --> 00:17:44,000
dus deze sluitingen kunnen alleen die worden
 

1032
00:17:44,000 --> 00:17:45,510
dus deze sluitingen kunnen alleen die worden
genoemd fn

1033
00:17:45,510 --> 00:17:45,520
genoemd fn
 

1034
00:17:45,520 --> 00:17:48,549
genoemd fn
mu leent veranderlijk waarden en fn

1035
00:17:48,549 --> 00:17:48,559
mu leent veranderlijk waarden en fn
 

1036
00:17:48,559 --> 00:17:51,029
mu leent veranderlijk waarden en fn
leent onveranderlijk waarden  wanneer u

1037
00:17:51,029 --> 00:17:51,039
leent onveranderlijk waarden  wanneer u
 

1038
00:17:51,039 --> 00:17:52,870
leent onveranderlijk waarden  wanneer u
een sluiting maakt, leidt roest af welke van deze

1039
00:17:52,870 --> 00:17:52,880
een sluiting maakt, leidt roest af welke van deze
 

1040
00:17:52,880 --> 00:17:54,070
een sluiting maakt, leidt roest af welke van deze
eigenschappen u moet gebruiken op

1041
00:17:54,070 --> 00:17:54,080
eigenschappen u moet gebruiken op
 

1042
00:17:54,080 --> 00:17:56,630
eigenschappen u moet gebruiken op
basis van hoe u de waarden binnen

1043
00:17:56,630 --> 00:17:56,640
basis van hoe u de waarden binnen
 

1044
00:17:56,640 --> 00:17:58,230
basis van hoe u de waarden binnen
de sluitingsomgeving

1045
00:17:58,230 --> 00:18:00,230
de sluitingsomgeving
 

1046
00:18:00,230 --> 00:18:00,240

 

1047
00:18:00,240 --> 00:18:02,710

gebruikt.

1048
00:18:02,710 --> 00:18:05,270
gebruikt.
 

1049
00:18:05,270 --> 00:18:05,280

 

1050
00:18:05,280 --> 00:18:05,909


1051
00:18:05,909 --> 00:18:05,919

 

1052
00:18:05,919 --> 00:18:08,070

sluiting dit is vooral

1053
00:18:08,070 --> 00:18:08,080
sluiting dit is vooral
 

1054
00:18:08,080 --> 00:18:09,590
sluiting dit is vooral
handig wanneer u een sluiting

1055
00:18:09,590 --> 00:18:09,600
handig wanneer u een sluiting
 

1056
00:18:09,600 --> 00:18:10,470
handig wanneer u een sluiting
van de ene thread

1057
00:18:10,470 --> 00:18:10,480
van de ene thread
 

1058
00:18:10,480 --> 00:18:12,470
van de ene thread
naar de andere thread doorgeeft, zodat u ook

1059
00:18:12,470 --> 00:18:12,480
naar de andere thread doorgeeft, zodat u ook
 

1060
00:18:12,480 --> 00:18:14,310
naar de andere thread doorgeeft, zodat u ook
het eigendom van de variabelen van de ene

1061
00:18:14,310 --> 00:18:14,320
het eigendom van de variabelen van de ene
 

1062
00:18:14,320 --> 00:18:14,789
het eigendom van de variabelen van de ene
thread

1063
00:18:14,789 --> 00:18:14,799
thread
 

1064
00:18:14,799 --> 00:18:17,029
thread
naar de andere thread kunt doorgeven, bijvoorbeeld in dit

1065
00:18:17,029 --> 00:18:17,039
naar de andere thread kunt doorgeven, bijvoorbeeld in dit
 

1066
00:18:17,039 --> 00:18:19,029
naar de andere thread kunt doorgeven, bijvoorbeeld in dit
geval is x gelijk aan een vector

1067
00:18:19,029 --> 00:18:19,039
geval is x gelijk aan een vector
 

1068
00:18:19,039 --> 00:18:21,750
geval is x gelijk aan een vector
we hebben onze sluiting  die niet verandert,

1069
00:18:21,750 --> 00:18:21,760
we hebben onze sluiting  die niet verandert,
 

1070
00:18:21,760 --> 00:18:22,789
we hebben onze sluiting  die niet verandert,
dan printen we

1071
00:18:22,789 --> 00:18:22,799
dan printen we
 

1072
00:18:22,799 --> 00:18:25,990
dan printen we
x uit en dan hebben we y gelijk aan een

1073
00:18:25,990 --> 00:18:26,000
x uit en dan hebben we y gelijk aan een
 

1074
00:18:26,000 --> 00:18:26,950
x uit en dan hebben we y gelijk aan een
vector

1075
00:18:26,950 --> 00:18:26,960
vector
 

1076
00:18:26,960 --> 00:18:28,950
vector
en dan noemen we onze sluiting opnieuw en

1077
00:18:28,950 --> 00:18:28,960
en dan noemen we onze sluiting opnieuw en
 

1078
00:18:28,960 --> 00:18:31,110
en dan noemen we onze sluiting opnieuw en
geven y door en beweren

1079
00:18:31,110 --> 00:18:31,120
geven y door en beweren
 

1080
00:18:31,120 --> 00:18:33,750
geven y door en beweren
dat het retu is  rns nu waar, want binnen

1081
00:18:33,750 --> 00:18:33,760
dat het retu is  rns nu waar, want binnen
 

1082
00:18:33,760 --> 00:18:34,549
dat het retu is  rns nu waar, want binnen
onze sluiting

1083
00:18:34,549 --> 00:18:34,559
onze sluiting
 

1084
00:18:34,559 --> 00:18:37,590
onze sluiting
evalueren we gewoon x tegen z

1085
00:18:37,590 --> 00:18:37,600
evalueren we gewoon x tegen z
 

1086
00:18:37,600 --> 00:18:40,150
evalueren we gewoon x tegen z
we nemen geen eigendom van x binnen

1087
00:18:40,150 --> 00:18:40,160
we nemen geen eigendom van x binnen
 

1088
00:18:40,160 --> 00:18:41,029
we nemen geen eigendom van x binnen
onze sluiting,

1089
00:18:41,029 --> 00:18:41,039
onze sluiting,
 

1090
00:18:41,039 --> 00:18:43,350
onze sluiting,
maar nogmaals, we kunnen de sluiting

1091
00:18:43,350 --> 00:18:43,360
maar nogmaals, we kunnen de sluiting
 

1092
00:18:43,360 --> 00:18:44,390
maar nogmaals, we kunnen de sluiting
dwingen eigenaar te worden

1093
00:18:44,390 --> 00:18:44,400
dwingen eigenaar te worden
 

1094
00:18:44,400 --> 00:18:46,870
dwingen eigenaar te worden
door het verplaatsingssleutelwoord op te geven voor

1095
00:18:46,870 --> 00:18:46,880
door het verplaatsingssleutelwoord op te geven voor
 

1096
00:18:46,880 --> 00:18:50,710
door het verplaatsingssleutelwoord op te geven voor
onze sluitingsdefinitie

1097
00:18:50,710 --> 00:18:50,720

 

1098
00:18:50,720 --> 00:18:53,669

nu onze sluiting  neemt wel de eigendom van x

1099
00:18:53,669 --> 00:18:53,679
nu onze sluiting  neemt wel de eigendom van x
 

1100
00:18:53,679 --> 00:18:54,070
nu onze sluiting  neemt wel de eigendom van x
en

1101
00:18:54,070 --> 00:18:54,080
en
 

1102
00:18:54,080 --> 00:18:56,310
en
we krijgen een fout in onze afdrukverklaring

1103
00:18:56,310 --> 00:18:56,320
we krijgen een fout in onze afdrukverklaring
 

1104
00:18:56,320 --> 00:18:58,390
we krijgen een fout in onze afdrukverklaring
onder de definitie van onze sluiting

1105
00:18:58,390 --> 00:18:58,400
onder de definitie van onze sluiting
 

1106
00:18:58,400 --> 00:19:00,310
onder de definitie van onze sluiting
als ik over de rode kronkels zweef, je

1107
00:19:00,310 --> 00:19:00,320
als ik over de rode kronkels zweef, je
 

1108
00:19:00,320 --> 00:19:01,590
als ik over de rode kronkels zweef, je
kunt zien dat er staat dat

1109
00:19:01,590 --> 00:19:01,600
kunt zien dat er staat dat
 

1110
00:19:01,600 --> 00:19:04,230
kunt zien dat er staat dat
we een geleende waarde gebruiken nadat deze

1111
00:19:04,230 --> 00:19:04,240
we een geleende waarde gebruiken nadat deze
 

1112
00:19:04,240 --> 00:19:04,950
we een geleende waarde gebruiken nadat deze
is verplaatst,

1113
00:19:04,950 --> 00:19:04,960
is verplaatst,
 

1114
00:19:04,960 --> 00:19:07,350
is verplaatst,
dit is logisch omdat hierboven  onze

1115
00:19:07,350 --> 00:19:07,360
dit is logisch omdat hierboven  onze
 

1116
00:19:07,360 --> 00:19:09,270
dit is logisch omdat hierboven  onze
sluiting neemt de eigendom van x over,

1117
00:19:09,270 --> 00:19:09,280
sluiting neemt de eigendom van x over,
 

1118
00:19:09,280 --> 00:19:12,150
sluiting neemt de eigendom van x over,
dus we kunnen x niet gebruiken nadat het hier naar beneden is verplaatst

1119
00:19:12,150 --> 00:19:12,160
dus we kunnen x niet gebruiken nadat het hier naar beneden is verplaatst
 

1120
00:19:12,160 --> 00:19:13,029
dus we kunnen x niet gebruiken nadat het hier naar beneden is verplaatst
.

1121
00:19:13,029 --> 00:19:13,039
.
 

1122
00:19:13,039 --> 00:19:14,789
.
Oké, dat is het einde van deel één van

1123
00:19:14,789 --> 00:19:14,799
Oké, dat is het einde van deel één van
 

1124
00:19:14,799 --> 00:19:16,870
Oké, dat is het einde van deel één van
hoofdstuk 13 waarin we sluitingen hebben behandeld.

1125
00:19:16,870 --> 00:19:16,880
hoofdstuk 13 waarin we sluitingen hebben behandeld.
 

1126
00:19:16,880 --> 00:19:19,029
hoofdstuk 13 waarin we sluitingen hebben behandeld.
Nu weet ik dat sluitingen

1127
00:19:19,029 --> 00:19:19,039
Nu weet ik dat sluitingen
 

1128
00:19:19,039 --> 00:19:20,470
Nu weet ik dat sluitingen
moeilijk te verteren kunnen zijn

1129
00:19:20,470 --> 00:19:20,480
moeilijk te verteren kunnen zijn
 

1130
00:19:20,480 --> 00:19:22,230
moeilijk te verteren kunnen zijn
en we hebben niet alles doorgenomen  de

1131
00:19:22,230 --> 00:19:22,240
en we hebben niet alles doorgenomen  de
 

1132
00:19:22,240 --> 00:19:24,070
en we hebben niet alles doorgenomen  de
mogelijke manieren om sluitingen te gebruiken,

1133
00:19:24,070 --> 00:19:24,080
mogelijke manieren om sluitingen te gebruiken,
 

1134
00:19:24,080 --> 00:19:25,909
mogelijke manieren om sluitingen te gebruiken,
dus als je nog een video

1135
00:19:25,909 --> 00:19:25,919
dus als je nog een video
 

1136
00:19:25,919 --> 00:19:28,150
dus als je nog een video
over sluitingen wilt zien met meer voorbeelden,

1137
00:19:28,150 --> 00:19:28,160
over sluitingen wilt zien met meer voorbeelden,
 

1138
00:19:28,160 --> 00:19:30,470
over sluitingen wilt zien met meer voorbeelden,
reageer dan hieronder en natuurlijk als

1139
00:19:30,470 --> 00:19:30,480
reageer dan hieronder en natuurlijk als
 

1140
00:19:30,480 --> 00:19:31,510
reageer dan hieronder en natuurlijk als
je deze video leuk vindt,

1141
00:19:31,510 --> 00:19:31,520
je deze video leuk vindt,
 

1142
00:19:31,520 --> 00:19:33,350
je deze video leuk vindt,
geef hem dan een duim omhoog in de

1143
00:19:33,350 --> 00:19:33,360
geef hem dan een duim omhoog in de
 

1144
00:19:33,360 --> 00:19:34,630
geef hem dan een duim omhoog in de
volgende video, we zijn g  oing over

1145
00:19:34,630 --> 00:19:34,640
volgende video, we zijn g  oing over
 

1146
00:19:34,640 --> 00:19:36,870
volgende video, we zijn g  oing over
iterators, dus als je daarvan op de hoogte wilt worden gehouden, klik dan

1147
00:19:36,870 --> 00:19:37,990
iterators, dus als je daarvan op de hoogte wilt worden gehouden, klik dan
 

1148
00:19:37,990 --> 00:19:38,000

 

1149
00:19:38,000 --> 00:19:40,870

op abonneren en daarmee zie ik je

1150
00:19:40,870 --> 00:19:40,880
op abonneren en daarmee zie ik je
 

1151
00:19:40,880 --> 00:19:41,590
op abonneren en daarmee zie ik je

1152
00:19:41,590 --> 00:19:41,600

 

1153
00:19:41,600 --> 00:19:52,470

in de volgende

1154
00:19:52,470 --> 00:19:52,480
in de volgende
 

1155
00:19:52,480 --> 00:19:54,559
in de volgende

